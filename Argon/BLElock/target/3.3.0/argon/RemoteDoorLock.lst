
/Users/lst97/Desktop/_temp/RemoteDoorLock/target/3.3.0/argon/RemoteDoorLock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000036f4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b7710  000b7710  00007710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b7734  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e564  000b7738  0001e564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000220  2003e5d0  2003e5d0  0002e5d0  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b77a4  000b77a4  000277a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b77cc  000b77cc  000277cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00123755  00000000  00000000  000277d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00012f62  00000000  00000000  0014af25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00039190  00000000  00000000  0015de87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002ea0  00000000  00000000  00197017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a6d0  00000000  00000000  00199eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b141  00000000  00000000  001a4587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003eee2  00000000  00000000  001df6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001369bb  00000000  00000000  0021e5aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000082ac  00000000  00000000  00354f68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f002 fec1 	bl	b6db4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f002 fee3 	bl	b6e04 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e564 	.word	0x2003e564
   b4048:	000b7738 	.word	0x000b7738
   b404c:	2003e5d0 	.word	0x2003e5d0
   b4050:	2003e5d0 	.word	0x2003e5d0
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f002 fc3b 	bl	b68d8 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b76e8 	.word	0x000b76e8
   b407c:	000b7710 	.word	0x000b7710

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b934 	b.w	b42ec <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f97b 	bl	b4380 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f002 bbdb 	b.w	b6848 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f000 be2d 	b.w	b4cf0 <malloc>

000b4096 <_Znaj>:
   b4096:	f000 be2b 	b.w	b4cf0 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 be31 	b.w	b4d00 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr

000b40ae <_ZN4Lock10disconnectEv>:
  int ld_switch;
  int rd_switch;
  int ll_switch;
  int rl_switch;

  void disconnect(){
   b40ae:	b510      	push	{r4, lr}
   b40b0:	4604      	mov	r4, r0
    digitalWrite(this->up_pin, HIGH);
   b40b2:	2101      	movs	r1, #1
   b40b4:	8800      	ldrh	r0, [r0, #0]
   b40b6:	f002 fc90 	bl	b69da <digitalWrite>
    digitalWrite(this->down_pin, HIGH);
   b40ba:	88a0      	ldrh	r0, [r4, #4]
   b40bc:	2101      	movs	r1, #1
  }
   b40be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(this->down_pin, HIGH);
   b40c2:	f002 bc8a 	b.w	b69da <digitalWrite>

000b40c6 <_ZN4Lock15get_lock_statusEv>:
    ld = ld << 1;

    return ld | rd;
  }

  int get_lock_status(){
   b40c6:	b538      	push	{r3, r4, r5, lr}
   b40c8:	4604      	mov	r4, r0
    int ll = digitalRead(ll_switch);
   b40ca:	8a00      	ldrh	r0, [r0, #16]
   b40cc:	f002 fc9e 	bl	b6a0c <digitalRead>
   b40d0:	4605      	mov	r5, r0
    int rl = digitalRead(rl_switch);
   b40d2:	8aa0      	ldrh	r0, [r4, #20]
   b40d4:	f002 fc9a 	bl	b6a0c <digitalRead>

    ll = ll << 1;

    return ll | rl;
  }
   b40d8:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
   b40dc:	bd38      	pop	{r3, r4, r5, pc}

000b40de <_ZN4Lock6unlockEv>:
  }

  int get_jumpper_status(){
    return digitalRead(JUMPPER);
  }
  void unlock(){
   b40de:	b510      	push	{r4, lr}
   b40e0:	4604      	mov	r4, r0
    digitalWrite(this->up_pin, LOW);
   b40e2:	2100      	movs	r1, #0
   b40e4:	8800      	ldrh	r0, [r0, #0]
   b40e6:	f002 fc78 	bl	b69da <digitalWrite>
    digitalWrite(this->down_pin, HIGH);
   b40ea:	88a0      	ldrh	r0, [r4, #4]
   b40ec:	2101      	movs	r1, #1
   b40ee:	f002 fc74 	bl	b69da <digitalWrite>
    delay(100);
   b40f2:	2064      	movs	r0, #100	; 0x64
   b40f4:	f000 fe34 	bl	b4d60 <delay>
    this->disconnect();
   b40f8:	4620      	mov	r0, r4
   b40fa:	f7ff ffd8 	bl	b40ae <_ZN4Lock10disconnectEv>
  }
   b40fe:	bd10      	pop	{r4, pc}

000b4100 <_ZN4Lock4lockEv>:

  void lock(){
   b4100:	b510      	push	{r4, lr}
   b4102:	4604      	mov	r4, r0
    digitalWrite(this->up_pin, HIGH);
   b4104:	2101      	movs	r1, #1
   b4106:	8800      	ldrh	r0, [r0, #0]
   b4108:	f002 fc67 	bl	b69da <digitalWrite>
    digitalWrite(this->down_pin, LOW);
   b410c:	88a0      	ldrh	r0, [r4, #4]
   b410e:	2100      	movs	r1, #0
   b4110:	f002 fc63 	bl	b69da <digitalWrite>
    delay(100);
   b4114:	2064      	movs	r0, #100	; 0x64
   b4116:	f000 fe23 	bl	b4d60 <delay>
    this->disconnect();
   b411a:	4620      	mov	r0, r4
   b411c:	f7ff ffc7 	bl	b40ae <_ZN4Lock10disconnectEv>
  }
   b4120:	bd10      	pop	{r4, pc}
	...

000b4124 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
  }
};
BlueTooth* BT = NULL;

// handling Bluetooth Low Energy callbacks
static void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4124:	b570      	push	{r4, r5, r6, lr}
  if(ddos_relief == true || len == 0)
   b4126:	4a23      	ldr	r2, [pc, #140]	; (b41b4 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x90>)
   b4128:	7813      	ldrb	r3, [r2, #0]
static void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b412a:	4604      	mov	r4, r0
  if(ddos_relief == true || len == 0)
   b412c:	2b00      	cmp	r3, #0
   b412e:	d136      	bne.n	b419e <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7a>
   b4130:	2900      	cmp	r1, #0
   b4132:	d034      	beq.n	b419e <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7a>
    return;

  relief_count += 1;
   b4134:	4820      	ldr	r0, [pc, #128]	; (b41b8 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x94>)
   b4136:	6803      	ldr	r3, [r0, #0]
   b4138:	3301      	adds	r3, #1

  // 2 commands per 1 sec
  if(relief_count > REFRESH_TIME * 2)
   b413a:	2b0a      	cmp	r3, #10
  relief_count += 1;
   b413c:	6003      	str	r3, [r0, #0]
    ddos_relief = true;
   b413e:	bfc4      	itt	gt
   b4140:	2301      	movgt	r3, #1
   b4142:	7013      	strbgt	r3, [r2, #0]
      if(len == 5){
   b4144:	2905      	cmp	r1, #5
   b4146:	d12a      	bne.n	b419e <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7a>
      Command* cmd = new Command();
   b4148:	2008      	movs	r0, #8
   b414a:	f7ff ffa2 	bl	b4092 <_Znwj>
      cmd->version = data[0]; // not use for now
   b414e:	7823      	ldrb	r3, [r4, #0]
   b4150:	7003      	strb	r3, [r0, #0]
      cmd->command = data[1];
   b4152:	7863      	ldrb	r3, [r4, #1]
        t += data[i];
   b4154:	78e6      	ldrb	r6, [r4, #3]
      cmd->command = data[1];
   b4156:	7043      	strb	r3, [r0, #1]
        t += data[i];
   b4158:	78a3      	ldrb	r3, [r4, #2]
   b415a:	eb06 2303 	add.w	r3, r6, r3, lsl #8
   b415e:	7926      	ldrb	r6, [r4, #4]
          if(cmd->totp == strtoul(code, NULL, 0)){
   b4160:	2200      	movs	r2, #0
        t += data[i];
   b4162:	eb06 2603 	add.w	r6, r6, r3, lsl #8
      Command* cmd = new Command();
   b4166:	4605      	mov	r5, r0
      cmd->totp = (uint32_t)t;
   b4168:	6046      	str	r6, [r0, #4]
          if(cmd->totp == strtoul(code, NULL, 0)){
   b416a:	4611      	mov	r1, r2
   b416c:	4813      	ldr	r0, [pc, #76]	; (b41bc <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>)
   b416e:	f002 ff17 	bl	b6fa0 <strtoul>
   b4172:	42b0      	cmp	r0, r6
            free(cmd);
   b4174:	4628      	mov	r0, r5
          if(cmd->totp == strtoul(code, NULL, 0)){
   b4176:	d10c      	bne.n	b4192 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6e>
            free(cmd);
   b4178:	f000 fdc2 	bl	b4d00 <free>
      switch(package.data[1]){
   b417c:	7863      	ldrb	r3, [r4, #1]
   b417e:	b963      	cbnz	r3, b419a <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x76>
          if(obj_lock->get_lock_status() != 0)
   b4180:	4c0f      	ldr	r4, [pc, #60]	; (b41c0 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x9c>)
   b4182:	6820      	ldr	r0, [r4, #0]
   b4184:	f7ff ff9f 	bl	b40c6 <_ZN4Lock15get_lock_statusEv>
   b4188:	b148      	cbz	r0, b419e <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7a>
            obj_lock->unlock();
   b418a:	6820      	ldr	r0, [r4, #0]
   b418c:	f7ff ffa7 	bl	b40de <_ZN4Lock6unlockEv>
   b4190:	e005      	b.n	b419e <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7a>
  

  BT->unpack(data, len);
}
   b4192:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          free(cmd);
   b4196:	f000 bdb3 	b.w	b4d00 <free>
      switch(package.data[1]){
   b419a:	2b01      	cmp	r3, #1
   b419c:	d000      	beq.n	b41a0 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7c>
}
   b419e:	bd70      	pop	{r4, r5, r6, pc}
          if(obj_lock->get_lock_status() != 3)
   b41a0:	4c07      	ldr	r4, [pc, #28]	; (b41c0 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x9c>)
   b41a2:	6820      	ldr	r0, [r4, #0]
   b41a4:	f7ff ff8f 	bl	b40c6 <_ZN4Lock15get_lock_statusEv>
   b41a8:	2803      	cmp	r0, #3
   b41aa:	d0f8      	beq.n	b419e <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7a>
            obj_lock->lock();
   b41ac:	6820      	ldr	r0, [r4, #0]
   b41ae:	f7ff ffa7 	bl	b4100 <_ZN4Lock4lockEv>
   b41b2:	e7f4      	b.n	b419e <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7a>
   b41b4:	2003e5eb 	.word	0x2003e5eb
   b41b8:	2003e5f0 	.word	0x2003e5f0
   b41bc:	2003e5e4 	.word	0x2003e5e4
   b41c0:	2003e5ec 	.word	0x2003e5ec

000b41c4 <_ZN9BlueToothC1EPKcS1_>:
  BlueTooth(const char* service_uuid, const char* reciver){
   b41c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b41c8:	4614      	mov	r4, r2
   b41ca:	b096      	sub	sp, #88	; 0x58
   b41cc:	460f      	mov	r7, r1
   b41ce:	4605      	mov	r5, r0
   b41d0:	f001 fadf 	bl	b5792 <_ZN8particle18BleAdvertisingDataC1Ev>
    this->locking_command = reciver;
   b41d4:	e9c5 7403 	strd	r7, r4, [r5, #12]
    BleUuid lockingService(service_uuid);
   b41d8:	4639      	mov	r1, r7
   b41da:	a807      	add	r0, sp, #28
   b41dc:	f000 ffcc 	bl	b5178 <_ZN8particle7BleUuidC1EPKc>
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   b41e0:	ae11      	add	r6, sp, #68	; 0x44
        BleUuid cUuid(charUuid);
   b41e2:	4621      	mov	r1, r4
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b41e4:	f04f 0800 	mov.w	r8, #0
   b41e8:	a80c      	add	r0, sp, #48	; 0x30
      constexpr __shared_count() noexcept : _M_pi(0)
   b41ea:	e9cd 8805 	strd	r8, r8, [sp, #20]
   b41ee:	f000 ffc3 	bl	b5178 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   b41f2:	4639      	mov	r1, r7
   b41f4:	4630      	mov	r0, r6
   b41f6:	f000 ffbf 	bl	b5178 <_ZN8particle7BleUuidC1EPKc>
        construct(desc, properties, cUuid, sUuid, callback, context);
   b41fa:	4b25      	ldr	r3, [pc, #148]	; (b4290 <_ZN9BlueToothC1EPKcS1_+0xcc>)
   b41fc:	4925      	ldr	r1, [pc, #148]	; (b4294 <_ZN9BlueToothC1EPKcS1_+0xd0>)
   b41fe:	9402      	str	r4, [sp, #8]
   b4200:	f04f 0204 	mov.w	r2, #4
   b4204:	e9cd 6300 	strd	r6, r3, [sp]
   b4208:	a805      	add	r0, sp, #20
   b420a:	ab0c      	add	r3, sp, #48	; 0x30
   b420c:	f001 fca4 	bl	b5b58 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    BLE.addCharacteristic(commandCharacteristic);
   b4210:	f001 f8a0 	bl	b5354 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4214:	aa05      	add	r2, sp, #20
   b4216:	4601      	mov	r1, r0
   b4218:	4630      	mov	r0, r6
   b421a:	f001 fdc7 	bl	b5dac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b421e:	ac07      	add	r4, sp, #28
   b4220:	4630      	mov	r0, r6
   b4222:	f001 f980 	bl	b5526 <_ZN8particle17BleCharacteristicD1Ev>
    advData.appendServiceUUID(lockingService);
   b4226:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4228:	af0c      	add	r7, sp, #48	; 0x30
   b422a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b422c:	f8d4 c000 	ldr.w	ip, [r4]
   b4230:	f8c7 c000 	str.w	ip, [r7]
        BleUuid tempUUID(uuid);
   b4234:	ac0c      	add	r4, sp, #48	; 0x30
   b4236:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4238:	4637      	mov	r7, r6
   b423a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b423c:	4630      	mov	r0, r6
        BleUuid tempUUID(uuid);
   b423e:	f8c7 c000 	str.w	ip, [r7]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4242:	f000 fefb 	bl	b503c <_ZNK8particle7BleUuid4typeEv>
   b4246:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b4248:	4630      	mov	r0, r6
        if (tempUUID.type() == BleUuidType::SHORT) {
   b424a:	b9c4      	cbnz	r4, b427e <_ZN9BlueToothC1EPKcS1_+0xba>
            uint16_t uuid16 = tempUUID.shorted();
   b424c:	f000 ff12 	bl	b5074 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4250:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b4252:	f8ad 0012 	strh.w	r0, [sp, #18]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4256:	2302      	movs	r3, #2
   b4258:	f10d 0212 	add.w	r2, sp, #18
   b425c:	2103      	movs	r1, #3
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b425e:	4628      	mov	r0, r5
   b4260:	f001 fa8c 	bl	b577c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    BLE.advertise(&advData);
   b4264:	f001 f876 	bl	b5354 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4268:	2200      	movs	r2, #0
   b426a:	4629      	mov	r1, r5
   b426c:	f001 f8ff 	bl	b546e <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    BleCharacteristic commandCharacteristic("command", BleCharacteristicProperty::WRITE_WO_RSP, reciver, service_uuid, onDataReceived, (void*)reciver);
   b4270:	a805      	add	r0, sp, #20
   b4272:	f001 f958 	bl	b5526 <_ZN8particle17BleCharacteristicD1Ev>
  }
   b4276:	4628      	mov	r0, r5
   b4278:	b016      	add	sp, #88	; 0x58
   b427a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b427e:	f000 fefb 	bl	b5078 <_ZNK8particle7BleUuid8rawBytesEv>
   b4282:	f8cd 8000 	str.w	r8, [sp]
   b4286:	4602      	mov	r2, r0
   b4288:	2310      	movs	r3, #16
   b428a:	2107      	movs	r1, #7
   b428c:	e7e7      	b.n	b425e <_ZN9BlueToothC1EPKcS1_+0x9a>
   b428e:	bf00      	nop
   b4290:	000b4125 	.word	0x000b4125
   b4294:	000b7094 	.word	0x000b7094

000b4298 <_Z8wifi_offv>:
} bt_data;

// Static level tracking
static bt_data m_bt_data;

void wifi_off(){
   b4298:	b51f      	push	{r0, r1, r2, r3, r4, lr}
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b429a:	2400      	movs	r4, #0
  // For saving power, since most of the power draw of the device is the Wi-Fi module.

  // call Particle.disconnect() before turning off the Wi-Fi manually, otherwise the cloud connection may turn it back on again.
  Particle.disconnect();
   b429c:	a801      	add	r0, sp, #4
   b429e:	e9cd 4401 	strd	r4, r4, [sp, #4]
        bool clearSession) :
   b42a2:	f8ad 400c 	strh.w	r4, [sp, #12]
   b42a6:	f001 fe91 	bl	b5fcc <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   b42aa:	4805      	ldr	r0, [pc, #20]	; (b42c0 <_Z8wifi_offv+0x28>)
   b42ac:	6840      	ldr	r0, [r0, #4]
   b42ae:	4623      	mov	r3, r4
   b42b0:	4622      	mov	r2, r4
   b42b2:	4621      	mov	r1, r4
  WiFi.off();
}
   b42b4:	b004      	add	sp, #16
   b42b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b42ba:	f000 bce1 	b.w	b4c80 <network_off>
   b42be:	bf00      	nop
   b42c0:	2003e70c 	.word	0x2003e70c

000b42c4 <_Z7led_offv>:

void led_off(){
   b42c4:	b508      	push	{r3, lr}
  RGB.control(true);
   b42c6:	2001      	movs	r0, #1
   b42c8:	f002 f891 	bl	b63ee <_ZN8RGBClass7controlEb>
  RGB.color(0, 0, 0);
   b42cc:	2200      	movs	r2, #0
}
   b42ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  RGB.color(0, 0, 0);
   b42d2:	4611      	mov	r1, r2
   b42d4:	4610      	mov	r0, r2
   b42d6:	f002 b89a 	b.w	b640e <_ZN8RGBClass5colorEiii>

000b42da <_Z7get_rpmv>:

float get_rpm(){
   b42da:	b508      	push	{r3, lr}
  int val = analogRead(RPM_PIN);
   b42dc:	2012      	movs	r0, #18
   b42de:	f002 fba8 	bl	b6a32 <analogRead>
  return val;
}
   b42e2:	ee07 0a90 	vmov	s15, r0
   b42e6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
   b42ea:	bd08      	pop	{r3, pc}

000b42ec <setup>:

// TOTP* timeotp = NULL;
void setup() {
   b42ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  wifi_off();
   b42f0:	f7ff ffd2 	bl	b4298 <_Z8wifi_offv>
  led_off();
   b42f4:	f7ff ffe6 	bl	b42c4 <_Z7led_offv>
  obj_lock = new Lock(LOCK_UP, LOCK_DOWN, LD_SWITCH, RD_SWITCH, LL_SWITCH, RL_SWITCH);
   b42f8:	2018      	movs	r0, #24
   b42fa:	f7ff feca 	bl	b4092 <_Znwj>
   b42fe:	4604      	mov	r4, r0
   b4300:	b358      	cbz	r0, b435a <setup+0x6e>
    this->down_pin = down_pin;
   b4302:	2002      	movs	r0, #2
   b4304:	f04f 0903 	mov.w	r9, #3
    this->rd_switch = rd_switch;
   b4308:	f04f 0804 	mov.w	r8, #4
   b430c:	2705      	movs	r7, #5
    this->rl_switch = rl_switch;
   b430e:	2606      	movs	r6, #6
   b4310:	2508      	movs	r5, #8
    this->down_pin = down_pin;
   b4312:	e9c4 0900 	strd	r0, r9, [r4]
    pinMode(up_pin, OUTPUT);
   b4316:	2101      	movs	r1, #1
    this->rd_switch = rd_switch;
   b4318:	e9c4 8702 	strd	r8, r7, [r4, #8]
    this->rl_switch = rl_switch;
   b431c:	e9c4 6504 	strd	r6, r5, [r4, #16]
    pinMode(up_pin, OUTPUT);
   b4320:	f002 fb4a 	bl	b69b8 <pinMode>
    pinMode(down_pin, OUTPUT);
   b4324:	2101      	movs	r1, #1
   b4326:	4648      	mov	r0, r9
   b4328:	f002 fb46 	bl	b69b8 <pinMode>
    pinMode(ld_switch, INPUT);
   b432c:	2100      	movs	r1, #0
   b432e:	4640      	mov	r0, r8
   b4330:	f002 fb42 	bl	b69b8 <pinMode>
    pinMode(rd_switch, INPUT);
   b4334:	2100      	movs	r1, #0
   b4336:	4638      	mov	r0, r7
   b4338:	f002 fb3e 	bl	b69b8 <pinMode>
    pinMode(ll_switch, INPUT);
   b433c:	2100      	movs	r1, #0
   b433e:	4630      	mov	r0, r6
   b4340:	f002 fb3a 	bl	b69b8 <pinMode>
    pinMode(rl_switch, INPUT);
   b4344:	2100      	movs	r1, #0
   b4346:	4628      	mov	r0, r5
   b4348:	f002 fb36 	bl	b69b8 <pinMode>
    pinMode(JUMPPER, INPUT);
   b434c:	2007      	movs	r0, #7
   b434e:	2100      	movs	r1, #0
   b4350:	f002 fb32 	bl	b69b8 <pinMode>
    this->disconnect();
   b4354:	4620      	mov	r0, r4
   b4356:	f7ff feaa 	bl	b40ae <_ZN4Lock10disconnectEv>
  obj_lock = new Lock(LOCK_UP, LOCK_DOWN, LD_SWITCH, RD_SWITCH, LL_SWITCH, RL_SWITCH);
   b435a:	4b06      	ldr	r3, [pc, #24]	; (b4374 <setup+0x88>)
  // timeotp = new TOTP(hmac_key, 16);

  const char* service_uuid = "ad712cf0-c718-4c19-bef9-f1710c7ced9d"; //service
  const char* reciver = "ad712cf1-c718-4c19-bef9-f1710c7ced9d"; // command

  BlueTooth* BT = new BlueTooth(service_uuid, reciver);
   b435c:	2014      	movs	r0, #20
  obj_lock = new Lock(LOCK_UP, LOCK_DOWN, LD_SWITCH, RD_SWITCH, LL_SWITCH, RL_SWITCH);
   b435e:	601c      	str	r4, [r3, #0]
  BlueTooth* BT = new BlueTooth(service_uuid, reciver);
   b4360:	f7ff fe97 	bl	b4092 <_Znwj>
   b4364:	b118      	cbz	r0, b436e <setup+0x82>
   b4366:	4a04      	ldr	r2, [pc, #16]	; (b4378 <setup+0x8c>)
   b4368:	4904      	ldr	r1, [pc, #16]	; (b437c <setup+0x90>)
   b436a:	f7ff ff2b 	bl	b41c4 <_ZN9BlueToothC1EPKcS1_>
}
   b436e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b4372:	bf00      	nop
   b4374:	2003e5ec 	.word	0x2003e5ec
   b4378:	000b709c 	.word	0x000b709c
   b437c:	000b70c1 	.word	0x000b70c1

000b4380 <loop>:

void loop() {
   b4380:	b570      	push	{r4, r5, r6, lr}
  uint8_t key[] = {0x48, 0x61, 0x4e, 0x73, 0x4f, 0x6d, 0x50, 0x72, 0x4f, 0x4d, 0x65, 0x7a, 0x64, 0x61, 0x31, 0x32, 0x31, 0x4c, 0x53, 0x54, 0x39, 0x37};
   b4382:	4b2c      	ldr	r3, [pc, #176]	; (b4434 <loop+0xb4>)
void loop() {
   b4384:	b092      	sub	sp, #72	; 0x48
  uint8_t key[] = {0x48, 0x61, 0x4e, 0x73, 0x4f, 0x6d, 0x50, 0x72, 0x4f, 0x4d, 0x65, 0x7a, 0x64, 0x61, 0x31, 0x32, 0x31, 0x4c, 0x53, 0x54, 0x39, 0x37};
   b4386:	aa02      	add	r2, sp, #8
   b4388:	f103 0610 	add.w	r6, r3, #16
   b438c:	4615      	mov	r5, r2
   b438e:	6818      	ldr	r0, [r3, #0]
   b4390:	6859      	ldr	r1, [r3, #4]
   b4392:	4614      	mov	r4, r2
   b4394:	c403      	stmia	r4!, {r0, r1}
   b4396:	3308      	adds	r3, #8
   b4398:	42b3      	cmp	r3, r6
   b439a:	4622      	mov	r2, r4
   b439c:	d1f7      	bne.n	b438e <loop+0xe>
   b439e:	6818      	ldr	r0, [r3, #0]
   b43a0:	889b      	ldrh	r3, [r3, #4]
   b43a2:	80a3      	strh	r3, [r4, #4]
  TOTP timeotp = TOTP(key, 22);
   b43a4:	2216      	movs	r2, #22
   b43a6:	4629      	mov	r1, r5
  uint8_t key[] = {0x48, 0x61, 0x4e, 0x73, 0x4f, 0x6d, 0x50, 0x72, 0x4f, 0x4d, 0x65, 0x7a, 0x64, 0x61, 0x31, 0x32, 0x31, 0x4c, 0x53, 0x54, 0x39, 0x37};
   b43a8:	6020      	str	r0, [r4, #0]
  TOTP timeotp = TOTP(key, 22);
   b43aa:	a808      	add	r0, sp, #32
   b43ac:	f000 f856 	bl	b445c <_ZN4TOTPC1EPhi>
  char* new_code = timeotp.getCode(Time.now());
   b43b0:	f002 f8fe 	bl	b65b0 <_ZN9TimeClass3nowEv>
   b43b4:	4601      	mov	r1, r0
   b43b6:	a808      	add	r0, sp, #32
   b43b8:	f000 f892 	bl	b44e0 <_ZN4TOTP7getCodeEl>
   b43bc:	4601      	mov	r1, r0
  if(strcmp(code, new_code) != 0){
   b43be:	9001      	str	r0, [sp, #4]
   b43c0:	481d      	ldr	r0, [pc, #116]	; (b4438 <loop+0xb8>)
   b43c2:	f002 fd55 	bl	b6e70 <strcmp>
   b43c6:	9901      	ldr	r1, [sp, #4]
   b43c8:	b110      	cbz	r0, b43d0 <loop+0x50>
    strcpy(code, new_code);
   b43ca:	481b      	ldr	r0, [pc, #108]	; (b4438 <loop+0xb8>)
   b43cc:	f002 fd5a 	bl	b6e84 <strcpy>
    return digitalRead(JUMPPER);
   b43d0:	2007      	movs	r0, #7
   b43d2:	f002 fb1b 	bl	b6a0c <digitalRead>
  }

  // unlock the car when the jumpper is connected.
  if(obj_lock->get_jumpper_status() == 1){
   b43d6:	2801      	cmp	r0, #1
   b43d8:	d103      	bne.n	b43e2 <loop+0x62>
    obj_lock->unlock();
   b43da:	4b18      	ldr	r3, [pc, #96]	; (b443c <loop+0xbc>)
   b43dc:	6818      	ldr	r0, [r3, #0]
   b43de:	f7ff fe7e 	bl	b40de <_ZN4Lock6unlockEv>
  }
  // lock the door when driving only if all door are closed.
  if(get_rpm() > 2000 && obj_lock->get_door_status() == 3 && obj_lock->get_lock_status() != 3)
   b43e2:	f7ff ff7a 	bl	b42da <_Z7get_rpmv>
   b43e6:	eddf 7a16 	vldr	s15, [pc, #88]	; b4440 <loop+0xc0>
   b43ea:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b43ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b43f2:	dd14      	ble.n	b441e <loop+0x9e>
   b43f4:	4c11      	ldr	r4, [pc, #68]	; (b443c <loop+0xbc>)
   b43f6:	6826      	ldr	r6, [r4, #0]
    int ld = digitalRead(ld_switch);
   b43f8:	8930      	ldrh	r0, [r6, #8]
   b43fa:	f002 fb07 	bl	b6a0c <digitalRead>
   b43fe:	4605      	mov	r5, r0
    int rd = digitalRead(rd_switch);
   b4400:	89b0      	ldrh	r0, [r6, #12]
   b4402:	f002 fb03 	bl	b6a0c <digitalRead>
    return ld | rd;
   b4406:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
  if(get_rpm() > 2000 && obj_lock->get_door_status() == 3 && obj_lock->get_lock_status() != 3)
   b440a:	2803      	cmp	r0, #3
   b440c:	d107      	bne.n	b441e <loop+0x9e>
   b440e:	6820      	ldr	r0, [r4, #0]
   b4410:	f7ff fe59 	bl	b40c6 <_ZN4Lock15get_lock_statusEv>
   b4414:	2803      	cmp	r0, #3
   b4416:	d002      	beq.n	b441e <loop+0x9e>
    // ADD lock sensor so that it will not keep turning the motor.
    obj_lock->lock();
   b4418:	6820      	ldr	r0, [r4, #0]
   b441a:	f7ff fe71 	bl	b4100 <_ZN4Lock4lockEv>

  ddos_relief = false;
   b441e:	4a09      	ldr	r2, [pc, #36]	; (b4444 <loop+0xc4>)
   b4420:	2300      	movs	r3, #0
   b4422:	7013      	strb	r3, [r2, #0]
  relief_count = 0;
   b4424:	4a08      	ldr	r2, [pc, #32]	; (b4448 <loop+0xc8>)
  delay(REFRESH_TIME * 1000);
   b4426:	f241 3088 	movw	r0, #5000	; 0x1388
  relief_count = 0;
   b442a:	6013      	str	r3, [r2, #0]
  delay(REFRESH_TIME * 1000);
   b442c:	f000 fc98 	bl	b4d60 <delay>
   b4430:	b012      	add	sp, #72	; 0x48
   b4432:	bd70      	pop	{r4, r5, r6, pc}
   b4434:	000b70e6 	.word	0x000b70e6
   b4438:	2003e5e4 	.word	0x2003e5e4
   b443c:	2003e5ec 	.word	0x2003e5ec
   b4440:	44fa0000 	.word	0x44fa0000
   b4444:	2003e5eb 	.word	0x2003e5eb
   b4448:	2003e5f0 	.word	0x2003e5f0

000b444c <_GLOBAL__sub_I_code>:
} bt_data;
   b444c:	4901      	ldr	r1, [pc, #4]	; (b4454 <_GLOBAL__sub_I_code+0x8>)
   b444e:	4802      	ldr	r0, [pc, #8]	; (b4458 <_GLOBAL__sub_I_code+0xc>)
   b4450:	f002 b84b 	b.w	b64ea <_ZN6StringC1EPK19__FlashStringHelper>
   b4454:	000b71c7 	.word	0x000b71c7
   b4458:	2003e5d4 	.word	0x2003e5d4

000b445c <_ZN4TOTPC1EPhi>:

// Init the library with the private key, its length and a time step of 30sec (default for Google Authenticator)
TOTP::TOTP(uint8_t* hmacKey, int keyLength) {

	_hmacKey = hmacKey;
	_keyLength = keyLength;
   b445c:	e9c0 1200 	strd	r1, r2, [r0]
	_timeStep = 30;
   b4460:	221e      	movs	r2, #30
   b4462:	6082      	str	r2, [r0, #8]
};
   b4464:	4770      	bx	lr
	...

000b4468 <_ZN4TOTP16getCodeFromStepsEl>:
	long steps = timeStamp / _timeStep;
	return getCodeFromSteps(steps);
}

// Generate a code, using the number of steps provided
char* TOTP::getCodeFromSteps(long steps) {
   b4468:	b570      	push	{r4, r5, r6, lr}
   b446a:	ba09      	rev	r1, r1
	_byteArray[5] = (int)((steps >> 16) & 0xFF);
	_byteArray[6] = (int)((steps >> 8) & 0XFF);
	_byteArray[7] = (int)((steps & 0XFF));
	
	// STEP 1, get the HMAC-SHA1 hash from counter and key
	Sha1.initHmac(_hmacKey, _keyLength);
   b446c:	4606      	mov	r6, r0
	_byteArray[0] = 0x00;
   b446e:	2500      	movs	r5, #0
   b4470:	60c5      	str	r5, [r0, #12]
	_byteArray[4] = (int)((steps >> 24) & 0xFF);
   b4472:	6101      	str	r1, [r0, #16]
	Sha1.initHmac(_hmacKey, _keyLength);
   b4474:	f856 1b0c 	ldr.w	r1, [r6], #12
   b4478:	6842      	ldr	r2, [r0, #4]
char* TOTP::getCodeFromSteps(long steps) {
   b447a:	4604      	mov	r4, r0
	Sha1.initHmac(_hmacKey, _keyLength);
   b447c:	4815      	ldr	r0, [pc, #84]	; (b44d4 <_ZN4TOTP16getCodeFromStepsEl+0x6c>)
   b447e:	f000 f948 	bl	b4712 <_ZN9Sha1Class8initHmacEPKhi>
	Sha1.write(_byteArray, 8);
   b4482:	2208      	movs	r2, #8
   b4484:	4631      	mov	r1, r6
   b4486:	4813      	ldr	r0, [pc, #76]	; (b44d4 <_ZN4TOTP16getCodeFromStepsEl+0x6c>)
   b4488:	f001 ff68 	bl	b635c <_ZN5Print5writeEPKhj>
	_hash = Sha1.resultHmac();
   b448c:	4811      	ldr	r0, [pc, #68]	; (b44d4 <_ZN4TOTP16getCodeFromStepsEl+0x6c>)
   b448e:	f000 f97c 	bl	b478a <_ZN9Sha1Class10resultHmacEv>
   b4492:	6160      	str	r0, [r4, #20]
	
	// STEP 2, apply dynamic truncation to obtain a 4-bytes string
	_offset = _hash[20 - 1] & 0xF; 
   b4494:	7cc3      	ldrb	r3, [r0, #19]
   b4496:	f003 030f 	and.w	r3, r3, #15
	_truncatedHash = 0;
   b449a:	e9c4 3506 	strd	r3, r5, [r4, #24]
	for (int j = 0; j < 4; ++j) {
   b449e:	4418      	add	r0, r3
		_truncatedHash <<= 8;
   b44a0:	69e2      	ldr	r2, [r4, #28]
   b44a2:	0213      	lsls	r3, r2, #8
   b44a4:	61e3      	str	r3, [r4, #28]
		_truncatedHash  |= _hash[_offset + j];
   b44a6:	f810 2b01 	ldrb.w	r2, [r0], #1
	for (int j = 0; j < 4; ++j) {
   b44aa:	3501      	adds	r5, #1
		_truncatedHash  |= _hash[_offset + j];
   b44ac:	431a      	orrs	r2, r3
	for (int j = 0; j < 4; ++j) {
   b44ae:	2d04      	cmp	r5, #4
		_truncatedHash  |= _hash[_offset + j];
   b44b0:	61e2      	str	r2, [r4, #28]
	for (int j = 0; j < 4; ++j) {
   b44b2:	d1f5      	bne.n	b44a0 <_ZN4TOTP16getCodeFromStepsEl+0x38>
	}

	// STEP 3, compute the OTP value
	_truncatedHash &= 0x7FFFFFFF;
	_truncatedHash %= 1000000;
   b44b4:	4b08      	ldr	r3, [pc, #32]	; (b44d8 <_ZN4TOTP16getCodeFromStepsEl+0x70>)
	_truncatedHash &= 0x7FFFFFFF;
   b44b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
	_truncatedHash %= 1000000;
   b44ba:	fbb2 f1f3 	udiv	r1, r2, r3
   b44be:	fb03 2211 	mls	r2, r3, r1, r2
   b44c2:	61e2      	str	r2, [r4, #28]
	
	// convert the value in string, with heading zeroes
	sprintf(_code, "%06ld", _truncatedHash);
   b44c4:	3420      	adds	r4, #32
   b44c6:	4905      	ldr	r1, [pc, #20]	; (b44dc <_ZN4TOTP16getCodeFromStepsEl+0x74>)
   b44c8:	4620      	mov	r0, r4
   b44ca:	f000 fc29 	bl	b4d20 <sprintf>
	return _code;
}
   b44ce:	4620      	mov	r0, r4
   b44d0:	bd70      	pop	{r4, r5, r6, pc}
   b44d2:	bf00      	nop
   b44d4:	2003e5f4 	.word	0x2003e5f4
   b44d8:	000f4240 	.word	0x000f4240
   b44dc:	000b70fd 	.word	0x000b70fd

000b44e0 <_ZN4TOTP7getCodeEl>:
	long steps = timeStamp / _timeStep;
   b44e0:	6883      	ldr	r3, [r0, #8]
	return getCodeFromSteps(steps);
   b44e2:	fb91 f1f3 	sdiv	r1, r1, r3
   b44e6:	f7ff bfbf 	b.w	b4468 <_ZN4TOTP16getCodeFromStepsEl>

000b44ea <_ZN9Sha1ClassD1Ev>:
union _state {
  uint8_t b[HASH_LENGTH];
  uint32_t w[HASH_LENGTH/4];
};

class Sha1Class : public Print
   b44ea:	4770      	bx	lr

000b44ec <_ZN9Sha1ClassD0Ev>:
   b44ec:	b510      	push	{r4, lr}
   b44ee:	21b8      	movs	r1, #184	; 0xb8
   b44f0:	4604      	mov	r4, r0
   b44f2:	f7ff fdd2 	bl	b409a <_ZdlPvj>
   b44f6:	4620      	mov	r0, r4
   b44f8:	bd10      	pop	{r4, pc}
	...

000b44fc <_ZN9Sha1Class4initEv>:
  0xfe,0xdc,0xba,0x98, // H2
  0x76,0x54,0x32,0x10, // H3
  0xf0,0xe1,0xd2,0xc3  // H4
};

void Sha1Class::init(void) {
   b44fc:	b510      	push	{r4, lr}
  memcpy(state.b,sha1InitState,HASH_LENGTH);
   b44fe:	4b08      	ldr	r3, [pc, #32]	; (b4520 <_ZN9Sha1Class4initEv+0x24>)
   b4500:	f100 024c 	add.w	r2, r0, #76	; 0x4c
   b4504:	f103 0114 	add.w	r1, r3, #20
   b4508:	f853 4b04 	ldr.w	r4, [r3], #4
   b450c:	f842 4b04 	str.w	r4, [r2], #4
   b4510:	428b      	cmp	r3, r1
   b4512:	d1f9      	bne.n	b4508 <_ZN9Sha1Class4initEv+0xc>
  byteCount = 0;
   b4514:	2300      	movs	r3, #0
   b4516:	6603      	str	r3, [r0, #96]	; 0x60
  bufferOffset = 0;
   b4518:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
}
   b451c:	bd10      	pop	{r4, pc}
   b451e:	bf00      	nop
   b4520:	000b7103 	.word	0x000b7103

000b4524 <_ZN9Sha1Class9hashBlockEv>:

uint32_t Sha1Class::rol32(uint32_t number, uint8_t bits) {
  return ((number << bits) | (number >> (32-bits)));
}

void Sha1Class::hashBlock() {
   b4524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4528:	b085      	sub	sp, #20
  uint8_t i;
  uint32_t a,b,c,d,e,t;

  a=state.w[0];
  b=state.w[1];
   b452a:	e9d0 8a13 	ldrd	r8, sl, [r0, #76]	; 0x4c
  c=state.w[2];
   b452e:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b4530:	9301      	str	r3, [sp, #4]
  d=state.w[3];
  e=state.w[4];
   b4532:	f8d0 b05c 	ldr.w	fp, [r0, #92]	; 0x5c
  d=state.w[3];
   b4536:	6d83      	ldr	r3, [r0, #88]	; 0x58
  c=state.w[2];
   b4538:	9901      	ldr	r1, [sp, #4]
  d=state.w[3];
   b453a:	9302      	str	r3, [sp, #8]
   b453c:	461a      	mov	r2, r3
  e=state.w[4];
   b453e:	465d      	mov	r5, fp
  b=state.w[1];
   b4540:	4654      	mov	r4, sl
  a=state.w[0];
   b4542:	4647      	mov	r7, r8
  for (i=0; i<80; i++) {
   b4544:	2300      	movs	r3, #0
    if (i>=16) {
      t = buffer.w[(i+13)&15] ^ buffer.w[(i+8)&15] ^ buffer.w[(i+2)&15] ^ buffer.w[i&15];
      buffer.w[i&15] = rol32(t,1);
    }
    if (i<20) {
   b4546:	2b13      	cmp	r3, #19
   b4548:	d85b      	bhi.n	b4602 <_ZN9Sha1Class9hashBlockEv+0xde>
      t = (d ^ (b & (c ^ d))) + SHA1_K0;
   b454a:	ea82 0c01 	eor.w	ip, r2, r1
   b454e:	ea0c 0c04 	and.w	ip, ip, r4
   b4552:	ea8c 0c02 	eor.w	ip, ip, r2
   b4556:	f10c 4cb5 	add.w	ip, ip, #1518338048	; 0x5a800000
   b455a:	f50c 3c1e 	add.w	ip, ip, #161792	; 0x27800
   b455e:	f20c 1c99 	addw	ip, ip, #409	; 0x199
    } else if (i<60) {
      t = ((b & c) | (d & (b | c))) + SHA1_K40;
    } else {
      t = (b ^ c ^ d) + SHA1_K60;
    }
    t+=rol32(a,5) + e + buffer.w[i&15];
   b4562:	f003 060f 	and.w	r6, r3, #15
   b4566:	3602      	adds	r6, #2
  return ((number << bits) | (number >> (32-bits)));
   b4568:	ea4f 04b4 	mov.w	r4, r4, ror #2
   b456c:	f850 6026 	ldr.w	r6, [r0, r6, lsl #2]
   b4570:	9403      	str	r4, [sp, #12]
   b4572:	eb06 66f7 	add.w	r6, r6, r7, ror #27
   b4576:	4466      	add	r6, ip
  for (i=0; i<80; i++) {
   b4578:	f103 0c01 	add.w	ip, r3, #1
   b457c:	fa5f fc8c 	uxtb.w	ip, ip
   b4580:	f1bc 0f50 	cmp.w	ip, #80	; 0x50
    t+=rol32(a,5) + e + buffer.w[i&15];
   b4584:	442e      	add	r6, r5
  for (i=0; i<80; i++) {
   b4586:	d10e      	bne.n	b45a6 <_ZN9Sha1Class9hashBlockEv+0x82>
    b=a;
    a=t;
  }
  state.w[0] += a;
  state.w[1] += b;
  state.w[2] += c;
   b4588:	9b01      	ldr	r3, [sp, #4]
   b458a:	4423      	add	r3, r4
   b458c:	6543      	str	r3, [r0, #84]	; 0x54
  state.w[3] += d;
   b458e:	9b02      	ldr	r3, [sp, #8]
  state.w[0] += a;
   b4590:	4446      	add	r6, r8
  state.w[1] += b;
   b4592:	4457      	add	r7, sl
  state.w[3] += d;
   b4594:	4419      	add	r1, r3
  state.w[4] += e;
   b4596:	445a      	add	r2, fp
  state.w[0] += a;
   b4598:	64c6      	str	r6, [r0, #76]	; 0x4c
  state.w[1] += b;
   b459a:	6507      	str	r7, [r0, #80]	; 0x50
  state.w[3] += d;
   b459c:	6581      	str	r1, [r0, #88]	; 0x58
  state.w[4] += e;
   b459e:	65c2      	str	r2, [r0, #92]	; 0x5c
}
   b45a0:	b005      	add	sp, #20
   b45a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (i>=16) {
   b45a6:	f00c 090f 	and.w	r9, ip, #15
   b45aa:	eb00 0989 	add.w	r9, r0, r9, lsl #2
   b45ae:	f1bc 0f0f 	cmp.w	ip, #15
      t = buffer.w[(i+13)&15] ^ buffer.w[(i+8)&15] ^ buffer.w[(i+2)&15] ^ buffer.w[i&15];
   b45b2:	f8d9 5008 	ldr.w	r5, [r9, #8]
   b45b6:	462c      	mov	r4, r5
    if (i>=16) {
   b45b8:	d91c      	bls.n	b45f4 <_ZN9Sha1Class9hashBlockEv+0xd0>
      t = buffer.w[(i+13)&15] ^ buffer.w[(i+8)&15] ^ buffer.w[(i+2)&15] ^ buffer.w[i&15];
   b45ba:	f103 050e 	add.w	r5, r3, #14
   b45be:	f103 0e09 	add.w	lr, r3, #9
   b45c2:	f005 050f 	and.w	r5, r5, #15
   b45c6:	f00e 0e0f 	and.w	lr, lr, #15
   b45ca:	3502      	adds	r5, #2
   b45cc:	f10e 0e02 	add.w	lr, lr, #2
   b45d0:	3303      	adds	r3, #3
   b45d2:	f003 030f 	and.w	r3, r3, #15
   b45d6:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
   b45da:	f850 e02e 	ldr.w	lr, [r0, lr, lsl #2]
   b45de:	3302      	adds	r3, #2
   b45e0:	ea85 050e 	eor.w	r5, r5, lr
   b45e4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   b45e8:	4065      	eors	r5, r4
   b45ea:	405d      	eors	r5, r3
  return ((number << bits) | (number >> (32-bits)));
   b45ec:	ea4f 75f5 	mov.w	r5, r5, ror #31
      buffer.w[i&15] = rol32(t,1);
   b45f0:	f8c9 5008 	str.w	r5, [r9, #8]
void Sha1Class::hashBlock() {
   b45f4:	4615      	mov	r5, r2
  return ((number << bits) | (number >> (32-bits)));
   b45f6:	463c      	mov	r4, r7
void Sha1Class::hashBlock() {
   b45f8:	460a      	mov	r2, r1
    t+=rol32(a,5) + e + buffer.w[i&15];
   b45fa:	4637      	mov	r7, r6
  return ((number << bits) | (number >> (32-bits)));
   b45fc:	9903      	ldr	r1, [sp, #12]
    t+=rol32(a,5) + e + buffer.w[i&15];
   b45fe:	4663      	mov	r3, ip
   b4600:	e7a1      	b.n	b4546 <_ZN9Sha1Class9hashBlockEv+0x22>
    } else if (i<40) {
   b4602:	2b27      	cmp	r3, #39	; 0x27
   b4604:	d80c      	bhi.n	b4620 <_ZN9Sha1Class9hashBlockEv+0xfc>
      t = (b ^ c ^ d) + SHA1_K20;
   b4606:	ea82 0c01 	eor.w	ip, r2, r1
   b460a:	ea8c 0c04 	eor.w	ip, ip, r4
   b460e:	f10c 4cdd 	add.w	ip, ip, #1853882368	; 0x6e800000
   b4612:	f50c 0cb3 	add.w	ip, ip, #5865472	; 0x598000
   b4616:	f50c 4cd7 	add.w	ip, ip, #27520	; 0x6b80
   b461a:	f10c 0c21 	add.w	ip, ip, #33	; 0x21
   b461e:	e7a0      	b.n	b4562 <_ZN9Sha1Class9hashBlockEv+0x3e>
    } else if (i<60) {
   b4620:	2b3b      	cmp	r3, #59	; 0x3b
   b4622:	d810      	bhi.n	b4646 <_ZN9Sha1Class9hashBlockEv+0x122>
      t = ((b & c) | (d & (b | c))) + SHA1_K40;
   b4624:	ea41 0c04 	orr.w	ip, r1, r4
   b4628:	ea0c 0c02 	and.w	ip, ip, r2
   b462c:	ea01 0604 	and.w	r6, r1, r4
   b4630:	ea4c 0c06 	orr.w	ip, ip, r6
   b4634:	f10c 4c0f 	add.w	ip, ip, #2399141888	; 0x8f000000
   b4638:	f50c 1cdd 	add.w	ip, ip, #1810432	; 0x1ba000
   b463c:	f50c 5ce6 	add.w	ip, ip, #7360	; 0x1cc0
   b4640:	f10c 0c1c 	add.w	ip, ip, #28
   b4644:	e78d      	b.n	b4562 <_ZN9Sha1Class9hashBlockEv+0x3e>
      t = (b ^ c ^ d) + SHA1_K60;
   b4646:	ea82 0c01 	eor.w	ip, r2, r1
   b464a:	ea8c 0c04 	eor.w	ip, ip, r4
   b464e:	f10c 4c4a 	add.w	ip, ip, #3388997632	; 0xca000000
   b4652:	f50c 0cc5 	add.w	ip, ip, #6455296	; 0x628000
   b4656:	f50c 4c83 	add.w	ip, ip, #16768	; 0x4180
   b465a:	f10c 0c56 	add.w	ip, ip, #86	; 0x56
   b465e:	e780      	b.n	b4562 <_ZN9Sha1Class9hashBlockEv+0x3e>

000b4660 <_ZN9Sha1Class12addUncountedEh>:

void Sha1Class::addUncounted(uint8_t data) {
  buffer.b[bufferOffset ^ 3] = data;
   b4660:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
   b4664:	f083 0203 	eor.w	r2, r3, #3
  bufferOffset++;
   b4668:	3301      	adds	r3, #1
   b466a:	b2db      	uxtb	r3, r3
  buffer.b[bufferOffset ^ 3] = data;
   b466c:	4402      	add	r2, r0
  if (bufferOffset == BLOCK_LENGTH) {
   b466e:	2b40      	cmp	r3, #64	; 0x40
void Sha1Class::addUncounted(uint8_t data) {
   b4670:	b510      	push	{r4, lr}
  buffer.b[bufferOffset ^ 3] = data;
   b4672:	7211      	strb	r1, [r2, #8]
  bufferOffset++;
   b4674:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  if (bufferOffset == BLOCK_LENGTH) {
   b4678:	d104      	bne.n	b4684 <_ZN9Sha1Class12addUncountedEh+0x24>
    hashBlock();
   b467a:	f7ff ff53 	bl	b4524 <_ZN9Sha1Class9hashBlockEv>
    bufferOffset = 0;
   b467e:	2300      	movs	r3, #0
   b4680:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  }
}
   b4684:	bd10      	pop	{r4, pc}

000b4686 <_ZN9Sha1Class5writeEh>:

__WRITE_RESULT Sha1Class::write(uint8_t data) {
   b4686:	b508      	push	{r3, lr}
  ++byteCount;
   b4688:	6e02      	ldr	r2, [r0, #96]	; 0x60
   b468a:	3201      	adds	r2, #1
   b468c:	6602      	str	r2, [r0, #96]	; 0x60
  addUncounted(data);
   b468e:	f7ff ffe7 	bl	b4660 <_ZN9Sha1Class12addUncountedEh>

  __WRITE_RETURN(1);
}
   b4692:	2001      	movs	r0, #1
   b4694:	bd08      	pop	{r3, pc}

000b4696 <_ZN9Sha1Class3padEv>:

void Sha1Class::pad() {
   b4696:	b510      	push	{r4, lr}
  // Implement SHA-1 padding (fips180-2 §5.1.1)

  // Pad with 0x80 followed by 0x00 until the end of the block
  addUncounted(0x80);
   b4698:	2180      	movs	r1, #128	; 0x80
void Sha1Class::pad() {
   b469a:	4604      	mov	r4, r0
  addUncounted(0x80);
   b469c:	f7ff ffe0 	bl	b4660 <_ZN9Sha1Class12addUncountedEh>
  while (bufferOffset != 56) addUncounted(0x00);
   b46a0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   b46a4:	2b38      	cmp	r3, #56	; 0x38

  // Append length in the last 8 bytes
  addUncounted(0); // We're only using 32 bit lengths
   b46a6:	f04f 0100 	mov.w	r1, #0
   b46aa:	4620      	mov	r0, r4
  while (bufferOffset != 56) addUncounted(0x00);
   b46ac:	d1f6      	bne.n	b469c <_ZN9Sha1Class3padEv+0x6>
  addUncounted(0); // We're only using 32 bit lengths
   b46ae:	f7ff ffd7 	bl	b4660 <_ZN9Sha1Class12addUncountedEh>
  addUncounted(0); // But SHA-1 supports 64 bit lengths
   b46b2:	2100      	movs	r1, #0
   b46b4:	f7ff ffd4 	bl	b4660 <_ZN9Sha1Class12addUncountedEh>
  addUncounted(0); // So zero pad the top bits
   b46b8:	2100      	movs	r1, #0
   b46ba:	f7ff ffd1 	bl	b4660 <_ZN9Sha1Class12addUncountedEh>
  addUncounted(byteCount >> 29); // Shifting to multiply by 8
   b46be:	6e21      	ldr	r1, [r4, #96]	; 0x60
   b46c0:	0f49      	lsrs	r1, r1, #29
   b46c2:	f7ff ffcd 	bl	b4660 <_ZN9Sha1Class12addUncountedEh>
  addUncounted(byteCount >> 21); // as SHA-1 supports bitstreams as well as
   b46c6:	6e21      	ldr	r1, [r4, #96]	; 0x60
   b46c8:	f3c1 5147 	ubfx	r1, r1, #21, #8
   b46cc:	f7ff ffc8 	bl	b4660 <_ZN9Sha1Class12addUncountedEh>
  addUncounted(byteCount >> 13); // byte.
   b46d0:	6e21      	ldr	r1, [r4, #96]	; 0x60
   b46d2:	f3c1 3147 	ubfx	r1, r1, #13, #8
   b46d6:	f7ff ffc3 	bl	b4660 <_ZN9Sha1Class12addUncountedEh>
  addUncounted(byteCount >> 5);
   b46da:	6e21      	ldr	r1, [r4, #96]	; 0x60
   b46dc:	f3c1 1147 	ubfx	r1, r1, #5, #8
   b46e0:	f7ff ffbe 	bl	b4660 <_ZN9Sha1Class12addUncountedEh>
  addUncounted(byteCount << 3);
   b46e4:	6e21      	ldr	r1, [r4, #96]	; 0x60
   b46e6:	00c9      	lsls	r1, r1, #3
}
   b46e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  addUncounted(byteCount << 3);
   b46ec:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
   b46f0:	f7ff bfb6 	b.w	b4660 <_ZN9Sha1Class12addUncountedEh>

000b46f4 <_ZN9Sha1Class6resultEv>:


uint8_t* Sha1Class::result(void) {
   b46f4:	b510      	push	{r4, lr}
   b46f6:	4604      	mov	r4, r0
  // Pad to complete the last block
  pad();
   b46f8:	f7ff ffcd 	bl	b4696 <_ZN9Sha1Class3padEv>
  
  // Swap byte order back
  for (int i=0; i<5; i++) {
   b46fc:	f104 034c 	add.w	r3, r4, #76	; 0x4c
   b4700:	4618      	mov	r0, r3
   b4702:	3460      	adds	r4, #96	; 0x60
    uint32_t a,b;
    a=state.w[i];
   b4704:	681a      	ldr	r2, [r3, #0]
   b4706:	ba12      	rev	r2, r2
    b=a<<24;
    b|=(a<<8) & 0x00ff0000;
    b|=(a>>8) & 0x0000ff00;
    b|=a>>24;
    state.w[i]=b;
   b4708:	f843 2b04 	str.w	r2, [r3], #4
  for (int i=0; i<5; i++) {
   b470c:	42a3      	cmp	r3, r4
   b470e:	d1f9      	bne.n	b4704 <_ZN9Sha1Class6resultEv+0x10>
  }
  
  // Return pointer to hash (20 characters)
  return state.b;
}
   b4710:	bd10      	pop	{r4, pc}

000b4712 <_ZN9Sha1Class8initHmacEPKhi>:

#define HMAC_IPAD 0x36
#define HMAC_OPAD 0x5c

void Sha1Class::initHmac(const uint8_t* key, int keyLength) {
   b4712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t i;
  memset(keyBuffer,0,BLOCK_LENGTH);
   b4714:	f100 0564 	add.w	r5, r0, #100	; 0x64
void Sha1Class::initHmac(const uint8_t* key, int keyLength) {
   b4718:	4617      	mov	r7, r2
   b471a:	4604      	mov	r4, r0
   b471c:	460e      	mov	r6, r1
  memset(keyBuffer,0,BLOCK_LENGTH);
   b471e:	2240      	movs	r2, #64	; 0x40
   b4720:	2100      	movs	r1, #0
   b4722:	4628      	mov	r0, r5
   b4724:	f002 fb6e 	bl	b6e04 <memset>
  if (keyLength > BLOCK_LENGTH) {
   b4728:	2f40      	cmp	r7, #64	; 0x40
   b472a:	dd28      	ble.n	b477e <_ZN9Sha1Class8initHmacEPKhi+0x6c>
    // Hash long keys
    init();
   b472c:	4620      	mov	r0, r4
   b472e:	f7ff fee5 	bl	b44fc <_ZN9Sha1Class4initEv>
   b4732:	4437      	add	r7, r6
    for (;keyLength--;) write(*key++);
   b4734:	42be      	cmp	r6, r7
   b4736:	d006      	beq.n	b4746 <_ZN9Sha1Class8initHmacEPKhi+0x34>
   b4738:	6823      	ldr	r3, [r4, #0]
   b473a:	f816 1b01 	ldrb.w	r1, [r6], #1
   b473e:	689b      	ldr	r3, [r3, #8]
   b4740:	4620      	mov	r0, r4
   b4742:	4798      	blx	r3
   b4744:	e7f6      	b.n	b4734 <_ZN9Sha1Class8initHmacEPKhi+0x22>
    memcpy(keyBuffer,result(),HASH_LENGTH);
   b4746:	4620      	mov	r0, r4
   b4748:	f7ff ffd4 	bl	b46f4 <_ZN9Sha1Class6resultEv>
   b474c:	462b      	mov	r3, r5
   b474e:	f100 0214 	add.w	r2, r0, #20
   b4752:	f850 1b04 	ldr.w	r1, [r0], #4
   b4756:	f843 1b04 	str.w	r1, [r3], #4
   b475a:	4290      	cmp	r0, r2
   b475c:	d1f9      	bne.n	b4752 <_ZN9Sha1Class8initHmacEPKhi+0x40>
  } else {
    // Block length keys are used as is
    memcpy(keyBuffer,key,keyLength);
  }
  // Start inner hash
  init();
   b475e:	4620      	mov	r0, r4
   b4760:	f7ff fecc 	bl	b44fc <_ZN9Sha1Class4initEv>
  for (i=0; i<BLOCK_LENGTH; i++) {
   b4764:	f104 06a4 	add.w	r6, r4, #164	; 0xa4
    write(keyBuffer[i] ^ HMAC_IPAD);
   b4768:	f815 1b01 	ldrb.w	r1, [r5], #1
   b476c:	6823      	ldr	r3, [r4, #0]
   b476e:	f081 0136 	eor.w	r1, r1, #54	; 0x36
   b4772:	689b      	ldr	r3, [r3, #8]
   b4774:	4620      	mov	r0, r4
   b4776:	4798      	blx	r3
  for (i=0; i<BLOCK_LENGTH; i++) {
   b4778:	42b5      	cmp	r5, r6
   b477a:	d1f5      	bne.n	b4768 <_ZN9Sha1Class8initHmacEPKhi+0x56>
  }
}
   b477c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    memcpy(keyBuffer,key,keyLength);
   b477e:	463a      	mov	r2, r7
   b4780:	4631      	mov	r1, r6
   b4782:	4628      	mov	r0, r5
   b4784:	f002 fb16 	bl	b6db4 <memcpy>
   b4788:	e7e9      	b.n	b475e <_ZN9Sha1Class8initHmacEPKhi+0x4c>

000b478a <_ZN9Sha1Class10resultHmacEv>:

uint8_t* Sha1Class::resultHmac(void) {
   b478a:	b570      	push	{r4, r5, r6, lr}
   b478c:	4604      	mov	r4, r0
  uint8_t i;
  // Complete inner hash
  memcpy(innerHash,result(),HASH_LENGTH);
   b478e:	f7ff ffb1 	bl	b46f4 <_ZN9Sha1Class6resultEv>
   b4792:	f104 06a4 	add.w	r6, r4, #164	; 0xa4
   b4796:	4633      	mov	r3, r6
   b4798:	f100 0214 	add.w	r2, r0, #20
   b479c:	f850 1b04 	ldr.w	r1, [r0], #4
   b47a0:	f843 1b04 	str.w	r1, [r3], #4
   b47a4:	4290      	cmp	r0, r2
   b47a6:	d1f9      	bne.n	b479c <_ZN9Sha1Class10resultHmacEv+0x12>
  // Calculate outer hash
  init();
   b47a8:	4620      	mov	r0, r4
   b47aa:	f7ff fea7 	bl	b44fc <_ZN9Sha1Class4initEv>
  for (i=0; i<BLOCK_LENGTH; i++) write(keyBuffer[i] ^ HMAC_OPAD);
   b47ae:	f104 0564 	add.w	r5, r4, #100	; 0x64
   b47b2:	f815 1b01 	ldrb.w	r1, [r5], #1
   b47b6:	6823      	ldr	r3, [r4, #0]
   b47b8:	f081 015c 	eor.w	r1, r1, #92	; 0x5c
   b47bc:	689b      	ldr	r3, [r3, #8]
   b47be:	4620      	mov	r0, r4
   b47c0:	4798      	blx	r3
   b47c2:	42b5      	cmp	r5, r6
   b47c4:	d1f5      	bne.n	b47b2 <_ZN9Sha1Class10resultHmacEv+0x28>
   b47c6:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
  for (i=0; i<HASH_LENGTH; i++) write(innerHash[i]);
   b47ca:	6823      	ldr	r3, [r4, #0]
   b47cc:	f815 1b01 	ldrb.w	r1, [r5], #1
   b47d0:	689b      	ldr	r3, [r3, #8]
   b47d2:	4620      	mov	r0, r4
   b47d4:	4798      	blx	r3
   b47d6:	42b5      	cmp	r5, r6
   b47d8:	d1f7      	bne.n	b47ca <_ZN9Sha1Class10resultHmacEv+0x40>
  return result();
   b47da:	4620      	mov	r0, r4
}
   b47dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return result();
   b47e0:	f7ff bf88 	b.w	b46f4 <_ZN9Sha1Class6resultEv>

000b47e4 <_GLOBAL__sub_I__ZN9Sha1Class4initEv>:
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }

  public:
    Print() : write_error(0) {}
   b47e4:	4b02      	ldr	r3, [pc, #8]	; (b47f0 <_GLOBAL__sub_I__ZN9Sha1Class4initEv+0xc>)
   b47e6:	2200      	movs	r2, #0
   b47e8:	605a      	str	r2, [r3, #4]
   b47ea:	4a02      	ldr	r2, [pc, #8]	; (b47f4 <_GLOBAL__sub_I__ZN9Sha1Class4initEv+0x10>)
   b47ec:	601a      	str	r2, [r3, #0]
Sha1Class Sha1;
   b47ee:	4770      	bx	lr
   b47f0:	2003e5f4 	.word	0x2003e5f4
   b47f4:	000b7120 	.word	0x000b7120

000b47f8 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b47f8:	b508      	push	{r3, lr}
   b47fa:	4b02      	ldr	r3, [pc, #8]	; (b4804 <hal_ble_stack_init+0xc>)
   b47fc:	681b      	ldr	r3, [r3, #0]
   b47fe:	689b      	ldr	r3, [r3, #8]
   b4800:	9301      	str	r3, [sp, #4]
   b4802:	bd08      	pop	{r3, pc}
   b4804:	00030278 	.word	0x00030278

000b4808 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b4808:	b508      	push	{r3, lr}
   b480a:	4b02      	ldr	r3, [pc, #8]	; (b4814 <hal_ble_gap_set_advertising_data+0xc>)
   b480c:	681b      	ldr	r3, [r3, #0]
   b480e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4810:	9301      	str	r3, [sp, #4]
   b4812:	bd08      	pop	{r3, pc}
   b4814:	00030278 	.word	0x00030278

000b4818 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b4818:	b508      	push	{r3, lr}
   b481a:	4b02      	ldr	r3, [pc, #8]	; (b4824 <hal_ble_gap_set_scan_response_data+0xc>)
   b481c:	681b      	ldr	r3, [r3, #0]
   b481e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b4820:	9301      	str	r3, [sp, #4]
   b4822:	bd08      	pop	{r3, pc}
   b4824:	00030278 	.word	0x00030278

000b4828 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b4828:	b508      	push	{r3, lr}
   b482a:	4b02      	ldr	r3, [pc, #8]	; (b4834 <hal_ble_gap_start_advertising+0xc>)
   b482c:	681b      	ldr	r3, [r3, #0]
   b482e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b4830:	9301      	str	r3, [sp, #4]
   b4832:	bd08      	pop	{r3, pc}
   b4834:	00030278 	.word	0x00030278

000b4838 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b4838:	b508      	push	{r3, lr}
   b483a:	4b03      	ldr	r3, [pc, #12]	; (b4848 <hal_ble_gap_disconnect+0x10>)
   b483c:	681b      	ldr	r3, [r3, #0]
   b483e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b4842:	9301      	str	r3, [sp, #4]
   b4844:	bd08      	pop	{r3, pc}
   b4846:	0000      	.short	0x0000
   b4848:	00030278 	.word	0x00030278

000b484c <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b484c:	b508      	push	{r3, lr}
   b484e:	4b03      	ldr	r3, [pc, #12]	; (b485c <hal_ble_gatt_server_add_service+0x10>)
   b4850:	681b      	ldr	r3, [r3, #0]
   b4852:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b4856:	9301      	str	r3, [sp, #4]
   b4858:	bd08      	pop	{r3, pc}
   b485a:	0000      	.short	0x0000
   b485c:	00030278 	.word	0x00030278

000b4860 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b4860:	b508      	push	{r3, lr}
   b4862:	4b03      	ldr	r3, [pc, #12]	; (b4870 <hal_ble_gatt_server_add_characteristic+0x10>)
   b4864:	681b      	ldr	r3, [r3, #0]
   b4866:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b486a:	9301      	str	r3, [sp, #4]
   b486c:	bd08      	pop	{r3, pc}
   b486e:	0000      	.short	0x0000
   b4870:	00030278 	.word	0x00030278

000b4874 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b4874:	b508      	push	{r3, lr}
   b4876:	4b03      	ldr	r3, [pc, #12]	; (b4884 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b4878:	681b      	ldr	r3, [r3, #0]
   b487a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b487e:	9301      	str	r3, [sp, #4]
   b4880:	bd08      	pop	{r3, pc}
   b4882:	0000      	.short	0x0000
   b4884:	00030278 	.word	0x00030278

000b4888 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4888:	b508      	push	{r3, lr}
   b488a:	4b02      	ldr	r3, [pc, #8]	; (b4894 <os_mutex_recursive_create+0xc>)
   b488c:	681b      	ldr	r3, [r3, #0]
   b488e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4890:	9301      	str	r3, [sp, #4]
   b4892:	bd08      	pop	{r3, pc}
   b4894:	00030248 	.word	0x00030248

000b4898 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b4898:	b508      	push	{r3, lr}
   b489a:	4b02      	ldr	r3, [pc, #8]	; (b48a4 <os_mutex_recursive_lock+0xc>)
   b489c:	681b      	ldr	r3, [r3, #0]
   b489e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b48a0:	9301      	str	r3, [sp, #4]
   b48a2:	bd08      	pop	{r3, pc}
   b48a4:	00030248 	.word	0x00030248

000b48a8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b48a8:	b508      	push	{r3, lr}
   b48aa:	4b02      	ldr	r3, [pc, #8]	; (b48b4 <os_mutex_recursive_unlock+0xc>)
   b48ac:	681b      	ldr	r3, [r3, #0]
   b48ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b48b0:	9301      	str	r3, [sp, #4]
   b48b2:	bd08      	pop	{r3, pc}
   b48b4:	00030248 	.word	0x00030248

000b48b8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b48b8:	b508      	push	{r3, lr}
   b48ba:	4b02      	ldr	r3, [pc, #8]	; (b48c4 <HAL_RNG_GetRandomNumber+0xc>)
   b48bc:	681b      	ldr	r3, [r3, #0]
   b48be:	685b      	ldr	r3, [r3, #4]
   b48c0:	9301      	str	r3, [sp, #4]
   b48c2:	bd08      	pop	{r3, pc}
   b48c4:	00030218 	.word	0x00030218

000b48c8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b48c8:	b508      	push	{r3, lr}
   b48ca:	4b02      	ldr	r3, [pc, #8]	; (b48d4 <HAL_Delay_Microseconds+0xc>)
   b48cc:	681b      	ldr	r3, [r3, #0]
   b48ce:	68db      	ldr	r3, [r3, #12]
   b48d0:	9301      	str	r3, [sp, #4]
   b48d2:	bd08      	pop	{r3, pc}
   b48d4:	00030218 	.word	0x00030218

000b48d8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b48d8:	b508      	push	{r3, lr}
   b48da:	4b02      	ldr	r3, [pc, #8]	; (b48e4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b48dc:	681b      	ldr	r3, [r3, #0]
   b48de:	695b      	ldr	r3, [r3, #20]
   b48e0:	9301      	str	r3, [sp, #4]
   b48e2:	bd08      	pop	{r3, pc}
   b48e4:	00030218 	.word	0x00030218

000b48e8 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b48e8:	b508      	push	{r3, lr}
   b48ea:	4b02      	ldr	r3, [pc, #8]	; (b48f4 <hal_rtc_time_is_valid+0xc>)
   b48ec:	681b      	ldr	r3, [r3, #0]
   b48ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b48f0:	9301      	str	r3, [sp, #4]
   b48f2:	bd08      	pop	{r3, pc}
   b48f4:	00030218 	.word	0x00030218

000b48f8 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b48f8:	b508      	push	{r3, lr}
   b48fa:	4b02      	ldr	r3, [pc, #8]	; (b4904 <hal_rtc_get_time+0xc>)
   b48fc:	681b      	ldr	r3, [r3, #0]
   b48fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b4900:	9301      	str	r3, [sp, #4]
   b4902:	bd08      	pop	{r3, pc}
   b4904:	00030218 	.word	0x00030218

000b4908 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b4908:	b508      	push	{r3, lr}
   b490a:	4b02      	ldr	r3, [pc, #8]	; (b4914 <HAL_Validate_Pin_Function+0xc>)
   b490c:	681b      	ldr	r3, [r3, #0]
   b490e:	685b      	ldr	r3, [r3, #4]
   b4910:	9301      	str	r3, [sp, #4]
   b4912:	bd08      	pop	{r3, pc}
   b4914:	0003022c 	.word	0x0003022c

000b4918 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4918:	b508      	push	{r3, lr}
   b491a:	4b02      	ldr	r3, [pc, #8]	; (b4924 <HAL_Pin_Mode+0xc>)
   b491c:	681b      	ldr	r3, [r3, #0]
   b491e:	689b      	ldr	r3, [r3, #8]
   b4920:	9301      	str	r3, [sp, #4]
   b4922:	bd08      	pop	{r3, pc}
   b4924:	0003022c 	.word	0x0003022c

000b4928 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4928:	b508      	push	{r3, lr}
   b492a:	4b02      	ldr	r3, [pc, #8]	; (b4934 <HAL_Get_Pin_Mode+0xc>)
   b492c:	681b      	ldr	r3, [r3, #0]
   b492e:	68db      	ldr	r3, [r3, #12]
   b4930:	9301      	str	r3, [sp, #4]
   b4932:	bd08      	pop	{r3, pc}
   b4934:	0003022c 	.word	0x0003022c

000b4938 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4938:	b508      	push	{r3, lr}
   b493a:	4b02      	ldr	r3, [pc, #8]	; (b4944 <HAL_GPIO_Write+0xc>)
   b493c:	681b      	ldr	r3, [r3, #0]
   b493e:	691b      	ldr	r3, [r3, #16]
   b4940:	9301      	str	r3, [sp, #4]
   b4942:	bd08      	pop	{r3, pc}
   b4944:	0003022c 	.word	0x0003022c

000b4948 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b4948:	b508      	push	{r3, lr}
   b494a:	4b02      	ldr	r3, [pc, #8]	; (b4954 <HAL_GPIO_Read+0xc>)
   b494c:	681b      	ldr	r3, [r3, #0]
   b494e:	695b      	ldr	r3, [r3, #20]
   b4950:	9301      	str	r3, [sp, #4]
   b4952:	bd08      	pop	{r3, pc}
   b4954:	0003022c 	.word	0x0003022c

000b4958 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b4958:	b508      	push	{r3, lr}
   b495a:	4b02      	ldr	r3, [pc, #8]	; (b4964 <hal_adc_read+0xc>)
   b495c:	681b      	ldr	r3, [r3, #0]
   b495e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4960:	9301      	str	r3, [sp, #4]
   b4962:	bd08      	pop	{r3, pc}
   b4964:	0003022c 	.word	0x0003022c

000b4968 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4968:	b508      	push	{r3, lr}
   b496a:	4b02      	ldr	r3, [pc, #8]	; (b4974 <hal_i2c_write+0xc>)
   b496c:	681b      	ldr	r3, [r3, #0]
   b496e:	6a1b      	ldr	r3, [r3, #32]
   b4970:	9301      	str	r3, [sp, #4]
   b4972:	bd08      	pop	{r3, pc}
   b4974:	00030228 	.word	0x00030228

000b4978 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4978:	b508      	push	{r3, lr}
   b497a:	4b02      	ldr	r3, [pc, #8]	; (b4984 <hal_i2c_available+0xc>)
   b497c:	681b      	ldr	r3, [r3, #0]
   b497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4980:	9301      	str	r3, [sp, #4]
   b4982:	bd08      	pop	{r3, pc}
   b4984:	00030228 	.word	0x00030228

000b4988 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4988:	b508      	push	{r3, lr}
   b498a:	4b02      	ldr	r3, [pc, #8]	; (b4994 <hal_i2c_read+0xc>)
   b498c:	681b      	ldr	r3, [r3, #0]
   b498e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4990:	9301      	str	r3, [sp, #4]
   b4992:	bd08      	pop	{r3, pc}
   b4994:	00030228 	.word	0x00030228

000b4998 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4998:	b508      	push	{r3, lr}
   b499a:	4b02      	ldr	r3, [pc, #8]	; (b49a4 <hal_i2c_peek+0xc>)
   b499c:	681b      	ldr	r3, [r3, #0]
   b499e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b49a0:	9301      	str	r3, [sp, #4]
   b49a2:	bd08      	pop	{r3, pc}
   b49a4:	00030228 	.word	0x00030228

000b49a8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b49a8:	b508      	push	{r3, lr}
   b49aa:	4b02      	ldr	r3, [pc, #8]	; (b49b4 <hal_i2c_flush+0xc>)
   b49ac:	681b      	ldr	r3, [r3, #0]
   b49ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b49b0:	9301      	str	r3, [sp, #4]
   b49b2:	bd08      	pop	{r3, pc}
   b49b4:	00030228 	.word	0x00030228

000b49b8 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b49b8:	b508      	push	{r3, lr}
   b49ba:	4b02      	ldr	r3, [pc, #8]	; (b49c4 <hal_i2c_is_enabled+0xc>)
   b49bc:	681b      	ldr	r3, [r3, #0]
   b49be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b49c0:	9301      	str	r3, [sp, #4]
   b49c2:	bd08      	pop	{r3, pc}
   b49c4:	00030228 	.word	0x00030228

000b49c8 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b49c8:	b508      	push	{r3, lr}
   b49ca:	4b02      	ldr	r3, [pc, #8]	; (b49d4 <hal_i2c_init+0xc>)
   b49cc:	681b      	ldr	r3, [r3, #0]
   b49ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b49d0:	9301      	str	r3, [sp, #4]
   b49d2:	bd08      	pop	{r3, pc}
   b49d4:	00030228 	.word	0x00030228

000b49d8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b49d8:	b508      	push	{r3, lr}
   b49da:	4b02      	ldr	r3, [pc, #8]	; (b49e4 <inet_inet_ntop+0xc>)
   b49dc:	681b      	ldr	r3, [r3, #0]
   b49de:	695b      	ldr	r3, [r3, #20]
   b49e0:	9301      	str	r3, [sp, #4]
   b49e2:	bd08      	pop	{r3, pc}
   b49e4:	00030264 	.word	0x00030264

000b49e8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b49e8:	b508      	push	{r3, lr}
   b49ea:	4b02      	ldr	r3, [pc, #8]	; (b49f4 <netdb_freeaddrinfo+0xc>)
   b49ec:	681b      	ldr	r3, [r3, #0]
   b49ee:	689b      	ldr	r3, [r3, #8]
   b49f0:	9301      	str	r3, [sp, #4]
   b49f2:	bd08      	pop	{r3, pc}
   b49f4:	00030268 	.word	0x00030268

000b49f8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b49f8:	b508      	push	{r3, lr}
   b49fa:	4b02      	ldr	r3, [pc, #8]	; (b4a04 <netdb_getaddrinfo+0xc>)
   b49fc:	681b      	ldr	r3, [r3, #0]
   b49fe:	68db      	ldr	r3, [r3, #12]
   b4a00:	9301      	str	r3, [sp, #4]
   b4a02:	bd08      	pop	{r3, pc}
   b4a04:	00030268 	.word	0x00030268

000b4a08 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4a08:	b508      	push	{r3, lr}
   b4a0a:	4b02      	ldr	r3, [pc, #8]	; (b4a14 <hal_spi_init+0xc>)
   b4a0c:	681b      	ldr	r3, [r3, #0]
   b4a0e:	69db      	ldr	r3, [r3, #28]
   b4a10:	9301      	str	r3, [sp, #4]
   b4a12:	bd08      	pop	{r3, pc}
   b4a14:	00030230 	.word	0x00030230

000b4a18 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4a18:	b508      	push	{r3, lr}
   b4a1a:	4b02      	ldr	r3, [pc, #8]	; (b4a24 <hal_spi_is_enabled+0xc>)
   b4a1c:	681b      	ldr	r3, [r3, #0]
   b4a1e:	6a1b      	ldr	r3, [r3, #32]
   b4a20:	9301      	str	r3, [sp, #4]
   b4a22:	bd08      	pop	{r3, pc}
   b4a24:	00030230 	.word	0x00030230

000b4a28 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4a28:	b508      	push	{r3, lr}
   b4a2a:	4b02      	ldr	r3, [pc, #8]	; (b4a34 <hal_usart_write+0xc>)
   b4a2c:	681b      	ldr	r3, [r3, #0]
   b4a2e:	68db      	ldr	r3, [r3, #12]
   b4a30:	9301      	str	r3, [sp, #4]
   b4a32:	bd08      	pop	{r3, pc}
   b4a34:	0003023c 	.word	0x0003023c

000b4a38 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4a38:	b508      	push	{r3, lr}
   b4a3a:	4b02      	ldr	r3, [pc, #8]	; (b4a44 <hal_usart_available+0xc>)
   b4a3c:	681b      	ldr	r3, [r3, #0]
   b4a3e:	691b      	ldr	r3, [r3, #16]
   b4a40:	9301      	str	r3, [sp, #4]
   b4a42:	bd08      	pop	{r3, pc}
   b4a44:	0003023c 	.word	0x0003023c

000b4a48 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4a48:	b508      	push	{r3, lr}
   b4a4a:	4b02      	ldr	r3, [pc, #8]	; (b4a54 <hal_usart_read+0xc>)
   b4a4c:	681b      	ldr	r3, [r3, #0]
   b4a4e:	695b      	ldr	r3, [r3, #20]
   b4a50:	9301      	str	r3, [sp, #4]
   b4a52:	bd08      	pop	{r3, pc}
   b4a54:	0003023c 	.word	0x0003023c

000b4a58 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4a58:	b508      	push	{r3, lr}
   b4a5a:	4b02      	ldr	r3, [pc, #8]	; (b4a64 <hal_usart_peek+0xc>)
   b4a5c:	681b      	ldr	r3, [r3, #0]
   b4a5e:	699b      	ldr	r3, [r3, #24]
   b4a60:	9301      	str	r3, [sp, #4]
   b4a62:	bd08      	pop	{r3, pc}
   b4a64:	0003023c 	.word	0x0003023c

000b4a68 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4a68:	b508      	push	{r3, lr}
   b4a6a:	4b02      	ldr	r3, [pc, #8]	; (b4a74 <hal_usart_flush+0xc>)
   b4a6c:	681b      	ldr	r3, [r3, #0]
   b4a6e:	69db      	ldr	r3, [r3, #28]
   b4a70:	9301      	str	r3, [sp, #4]
   b4a72:	bd08      	pop	{r3, pc}
   b4a74:	0003023c 	.word	0x0003023c

000b4a78 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4a78:	b508      	push	{r3, lr}
   b4a7a:	4b02      	ldr	r3, [pc, #8]	; (b4a84 <hal_usart_is_enabled+0xc>)
   b4a7c:	681b      	ldr	r3, [r3, #0]
   b4a7e:	6a1b      	ldr	r3, [r3, #32]
   b4a80:	9301      	str	r3, [sp, #4]
   b4a82:	bd08      	pop	{r3, pc}
   b4a84:	0003023c 	.word	0x0003023c

000b4a88 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4a88:	b508      	push	{r3, lr}
   b4a8a:	4b02      	ldr	r3, [pc, #8]	; (b4a94 <hal_usart_available_data_for_write+0xc>)
   b4a8c:	681b      	ldr	r3, [r3, #0]
   b4a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4a90:	9301      	str	r3, [sp, #4]
   b4a92:	bd08      	pop	{r3, pc}
   b4a94:	0003023c 	.word	0x0003023c

000b4a98 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4a98:	b508      	push	{r3, lr}
   b4a9a:	4b02      	ldr	r3, [pc, #8]	; (b4aa4 <hal_usart_init_ex+0xc>)
   b4a9c:	681b      	ldr	r3, [r3, #0]
   b4a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4aa0:	9301      	str	r3, [sp, #4]
   b4aa2:	bd08      	pop	{r3, pc}
   b4aa4:	0003023c 	.word	0x0003023c

000b4aa8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4aa8:	b508      	push	{r3, lr}
   b4aaa:	4b02      	ldr	r3, [pc, #8]	; (b4ab4 <HAL_USB_USART_Init+0xc>)
   b4aac:	681b      	ldr	r3, [r3, #0]
   b4aae:	681b      	ldr	r3, [r3, #0]
   b4ab0:	9301      	str	r3, [sp, #4]
   b4ab2:	bd08      	pop	{r3, pc}
   b4ab4:	0003024c 	.word	0x0003024c

000b4ab8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4ab8:	b508      	push	{r3, lr}
   b4aba:	4b02      	ldr	r3, [pc, #8]	; (b4ac4 <HAL_USB_USART_Available_Data+0xc>)
   b4abc:	681b      	ldr	r3, [r3, #0]
   b4abe:	691b      	ldr	r3, [r3, #16]
   b4ac0:	9301      	str	r3, [sp, #4]
   b4ac2:	bd08      	pop	{r3, pc}
   b4ac4:	0003024c 	.word	0x0003024c

000b4ac8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4ac8:	b508      	push	{r3, lr}
   b4aca:	4b02      	ldr	r3, [pc, #8]	; (b4ad4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4acc:	681b      	ldr	r3, [r3, #0]
   b4ace:	695b      	ldr	r3, [r3, #20]
   b4ad0:	9301      	str	r3, [sp, #4]
   b4ad2:	bd08      	pop	{r3, pc}
   b4ad4:	0003024c 	.word	0x0003024c

000b4ad8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4ad8:	b508      	push	{r3, lr}
   b4ada:	4b02      	ldr	r3, [pc, #8]	; (b4ae4 <HAL_USB_USART_Receive_Data+0xc>)
   b4adc:	681b      	ldr	r3, [r3, #0]
   b4ade:	699b      	ldr	r3, [r3, #24]
   b4ae0:	9301      	str	r3, [sp, #4]
   b4ae2:	bd08      	pop	{r3, pc}
   b4ae4:	0003024c 	.word	0x0003024c

000b4ae8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4ae8:	b508      	push	{r3, lr}
   b4aea:	4b02      	ldr	r3, [pc, #8]	; (b4af4 <HAL_USB_USART_Send_Data+0xc>)
   b4aec:	681b      	ldr	r3, [r3, #0]
   b4aee:	69db      	ldr	r3, [r3, #28]
   b4af0:	9301      	str	r3, [sp, #4]
   b4af2:	bd08      	pop	{r3, pc}
   b4af4:	0003024c 	.word	0x0003024c

000b4af8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4af8:	b508      	push	{r3, lr}
   b4afa:	4b02      	ldr	r3, [pc, #8]	; (b4b04 <HAL_USB_USART_Flush_Data+0xc>)
   b4afc:	681b      	ldr	r3, [r3, #0]
   b4afe:	6a1b      	ldr	r3, [r3, #32]
   b4b00:	9301      	str	r3, [sp, #4]
   b4b02:	bd08      	pop	{r3, pc}
   b4b04:	0003024c 	.word	0x0003024c

000b4b08 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   b4b08:	b508      	push	{r3, lr}
   b4b0a:	4b02      	ldr	r3, [pc, #8]	; (b4b14 <LED_SetSignalingColor+0xc>)
   b4b0c:	681b      	ldr	r3, [r3, #0]
   b4b0e:	685b      	ldr	r3, [r3, #4]
   b4b10:	9301      	str	r3, [sp, #4]
   b4b12:	bd08      	pop	{r3, pc}
   b4b14:	00030260 	.word	0x00030260

000b4b18 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   b4b18:	b508      	push	{r3, lr}
   b4b1a:	4b02      	ldr	r3, [pc, #8]	; (b4b24 <LED_Signaling_Start+0xc>)
   b4b1c:	681b      	ldr	r3, [r3, #0]
   b4b1e:	689b      	ldr	r3, [r3, #8]
   b4b20:	9301      	str	r3, [sp, #4]
   b4b22:	bd08      	pop	{r3, pc}
   b4b24:	00030260 	.word	0x00030260

000b4b28 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   b4b28:	b508      	push	{r3, lr}
   b4b2a:	4b02      	ldr	r3, [pc, #8]	; (b4b34 <LED_Signaling_Stop+0xc>)
   b4b2c:	681b      	ldr	r3, [r3, #0]
   b4b2e:	68db      	ldr	r3, [r3, #12]
   b4b30:	9301      	str	r3, [sp, #4]
   b4b32:	bd08      	pop	{r3, pc}
   b4b34:	00030260 	.word	0x00030260

000b4b38 <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   b4b38:	b508      	push	{r3, lr}
   b4b3a:	4b02      	ldr	r3, [pc, #8]	; (b4b44 <LED_RGB_IsOverRidden+0xc>)
   b4b3c:	681b      	ldr	r3, [r3, #0]
   b4b3e:	699b      	ldr	r3, [r3, #24]
   b4b40:	9301      	str	r3, [sp, #4]
   b4b42:	bd08      	pop	{r3, pc}
   b4b44:	00030260 	.word	0x00030260

000b4b48 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   b4b48:	b508      	push	{r3, lr}
   b4b4a:	4b02      	ldr	r3, [pc, #8]	; (b4b54 <LED_On+0xc>)
   b4b4c:	681b      	ldr	r3, [r3, #0]
   b4b4e:	69db      	ldr	r3, [r3, #28]
   b4b50:	9301      	str	r3, [sp, #4]
   b4b52:	bd08      	pop	{r3, pc}
   b4b54:	00030260 	.word	0x00030260

000b4b58 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b4b58:	b508      	push	{r3, lr}
   b4b5a:	4b02      	ldr	r3, [pc, #8]	; (b4b64 <panic_+0xc>)
   b4b5c:	681b      	ldr	r3, [r3, #0]
   b4b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4b60:	9301      	str	r3, [sp, #4]
   b4b62:	bd08      	pop	{r3, pc}
   b4b64:	00030260 	.word	0x00030260

000b4b68 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b4b68:	b508      	push	{r3, lr}
   b4b6a:	4b02      	ldr	r3, [pc, #8]	; (b4b74 <log_message+0xc>)
   b4b6c:	681b      	ldr	r3, [r3, #0]
   b4b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4b70:	9301      	str	r3, [sp, #4]
   b4b72:	bd08      	pop	{r3, pc}
   b4b74:	00030260 	.word	0x00030260

000b4b78 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b4b78:	b508      	push	{r3, lr}
   b4b7a:	4b02      	ldr	r3, [pc, #8]	; (b4b84 <system_mode+0xc>)
   b4b7c:	681b      	ldr	r3, [r3, #0]
   b4b7e:	681b      	ldr	r3, [r3, #0]
   b4b80:	9301      	str	r3, [sp, #4]
   b4b82:	bd08      	pop	{r3, pc}
   b4b84:	00030220 	.word	0x00030220

000b4b88 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4b88:	b508      	push	{r3, lr}
   b4b8a:	4b02      	ldr	r3, [pc, #8]	; (b4b94 <set_system_mode+0xc>)
   b4b8c:	681b      	ldr	r3, [r3, #0]
   b4b8e:	685b      	ldr	r3, [r3, #4]
   b4b90:	9301      	str	r3, [sp, #4]
   b4b92:	bd08      	pop	{r3, pc}
   b4b94:	00030220 	.word	0x00030220

000b4b98 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4b98:	b508      	push	{r3, lr}
   b4b9a:	4b02      	ldr	r3, [pc, #8]	; (b4ba4 <system_delay_ms+0xc>)
   b4b9c:	681b      	ldr	r3, [r3, #0]
   b4b9e:	695b      	ldr	r3, [r3, #20]
   b4ba0:	9301      	str	r3, [sp, #4]
   b4ba2:	bd08      	pop	{r3, pc}
   b4ba4:	00030220 	.word	0x00030220

000b4ba8 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b4ba8:	b508      	push	{r3, lr}
   b4baa:	4b02      	ldr	r3, [pc, #8]	; (b4bb4 <system_thread_get_state+0xc>)
   b4bac:	681b      	ldr	r3, [r3, #0]
   b4bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b4bb0:	9301      	str	r3, [sp, #4]
   b4bb2:	bd08      	pop	{r3, pc}
   b4bb4:	00030220 	.word	0x00030220

000b4bb8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4bb8:	b508      	push	{r3, lr}
   b4bba:	4b03      	ldr	r3, [pc, #12]	; (b4bc8 <system_ctrl_set_app_request_handler+0x10>)
   b4bbc:	681b      	ldr	r3, [r3, #0]
   b4bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4bc2:	9301      	str	r3, [sp, #4]
   b4bc4:	bd08      	pop	{r3, pc}
   b4bc6:	0000      	.short	0x0000
   b4bc8:	00030220 	.word	0x00030220

000b4bcc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4bcc:	b508      	push	{r3, lr}
   b4bce:	4b03      	ldr	r3, [pc, #12]	; (b4bdc <system_ctrl_set_result+0x10>)
   b4bd0:	681b      	ldr	r3, [r3, #0]
   b4bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4bd6:	9301      	str	r3, [sp, #4]
   b4bd8:	bd08      	pop	{r3, pc}
   b4bda:	0000      	.short	0x0000
   b4bdc:	00030220 	.word	0x00030220

000b4be0 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b4be0:	b508      	push	{r3, lr}
   b4be2:	4b02      	ldr	r3, [pc, #8]	; (b4bec <spark_process+0xc>)
   b4be4:	681b      	ldr	r3, [r3, #0]
   b4be6:	689b      	ldr	r3, [r3, #8]
   b4be8:	9301      	str	r3, [sp, #4]
   b4bea:	bd08      	pop	{r3, pc}
   b4bec:	00030244 	.word	0x00030244

000b4bf0 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b4bf0:	b508      	push	{r3, lr}
   b4bf2:	4b02      	ldr	r3, [pc, #8]	; (b4bfc <spark_cloud_flag_connected+0xc>)
   b4bf4:	681b      	ldr	r3, [r3, #0]
   b4bf6:	695b      	ldr	r3, [r3, #20]
   b4bf8:	9301      	str	r3, [sp, #4]
   b4bfa:	bd08      	pop	{r3, pc}
   b4bfc:	00030244 	.word	0x00030244

000b4c00 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b4c00:	b508      	push	{r3, lr}
   b4c02:	4b02      	ldr	r3, [pc, #8]	; (b4c0c <spark_sync_time_pending+0xc>)
   b4c04:	681b      	ldr	r3, [r3, #0]
   b4c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4c08:	9301      	str	r3, [sp, #4]
   b4c0a:	bd08      	pop	{r3, pc}
   b4c0c:	00030244 	.word	0x00030244

000b4c10 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4c10:	b508      	push	{r3, lr}
   b4c12:	4b02      	ldr	r3, [pc, #8]	; (b4c1c <spark_set_random_seed_from_cloud_handler+0xc>)
   b4c14:	681b      	ldr	r3, [r3, #0]
   b4c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4c18:	9301      	str	r3, [sp, #4]
   b4c1a:	bd08      	pop	{r3, pc}
   b4c1c:	00030244 	.word	0x00030244

000b4c20 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   b4c20:	b508      	push	{r3, lr}
   b4c22:	4b02      	ldr	r3, [pc, #8]	; (b4c2c <spark_cloud_disconnect+0xc>)
   b4c24:	681b      	ldr	r3, [r3, #0]
   b4c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4c28:	9301      	str	r3, [sp, #4]
   b4c2a:	bd08      	pop	{r3, pc}
   b4c2c:	00030244 	.word	0x00030244

000b4c30 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4c30:	b508      	push	{r3, lr}
   b4c32:	4b02      	ldr	r3, [pc, #8]	; (b4c3c <network_connect+0xc>)
   b4c34:	681b      	ldr	r3, [r3, #0]
   b4c36:	685b      	ldr	r3, [r3, #4]
   b4c38:	9301      	str	r3, [sp, #4]
   b4c3a:	bd08      	pop	{r3, pc}
   b4c3c:	00030240 	.word	0x00030240

000b4c40 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4c40:	b508      	push	{r3, lr}
   b4c42:	4b02      	ldr	r3, [pc, #8]	; (b4c4c <network_connecting+0xc>)
   b4c44:	681b      	ldr	r3, [r3, #0]
   b4c46:	689b      	ldr	r3, [r3, #8]
   b4c48:	9301      	str	r3, [sp, #4]
   b4c4a:	bd08      	pop	{r3, pc}
   b4c4c:	00030240 	.word	0x00030240

000b4c50 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4c50:	b508      	push	{r3, lr}
   b4c52:	4b02      	ldr	r3, [pc, #8]	; (b4c5c <network_disconnect+0xc>)
   b4c54:	681b      	ldr	r3, [r3, #0]
   b4c56:	68db      	ldr	r3, [r3, #12]
   b4c58:	9301      	str	r3, [sp, #4]
   b4c5a:	bd08      	pop	{r3, pc}
   b4c5c:	00030240 	.word	0x00030240

000b4c60 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4c60:	b508      	push	{r3, lr}
   b4c62:	4b02      	ldr	r3, [pc, #8]	; (b4c6c <network_ready+0xc>)
   b4c64:	681b      	ldr	r3, [r3, #0]
   b4c66:	691b      	ldr	r3, [r3, #16]
   b4c68:	9301      	str	r3, [sp, #4]
   b4c6a:	bd08      	pop	{r3, pc}
   b4c6c:	00030240 	.word	0x00030240

000b4c70 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4c70:	b508      	push	{r3, lr}
   b4c72:	4b02      	ldr	r3, [pc, #8]	; (b4c7c <network_on+0xc>)
   b4c74:	681b      	ldr	r3, [r3, #0]
   b4c76:	695b      	ldr	r3, [r3, #20]
   b4c78:	9301      	str	r3, [sp, #4]
   b4c7a:	bd08      	pop	{r3, pc}
   b4c7c:	00030240 	.word	0x00030240

000b4c80 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4c80:	b508      	push	{r3, lr}
   b4c82:	4b02      	ldr	r3, [pc, #8]	; (b4c8c <network_off+0xc>)
   b4c84:	681b      	ldr	r3, [r3, #0]
   b4c86:	699b      	ldr	r3, [r3, #24]
   b4c88:	9301      	str	r3, [sp, #4]
   b4c8a:	bd08      	pop	{r3, pc}
   b4c8c:	00030240 	.word	0x00030240

000b4c90 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4c90:	b508      	push	{r3, lr}
   b4c92:	4b02      	ldr	r3, [pc, #8]	; (b4c9c <network_listen+0xc>)
   b4c94:	681b      	ldr	r3, [r3, #0]
   b4c96:	69db      	ldr	r3, [r3, #28]
   b4c98:	9301      	str	r3, [sp, #4]
   b4c9a:	bd08      	pop	{r3, pc}
   b4c9c:	00030240 	.word	0x00030240

000b4ca0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4ca0:	b508      	push	{r3, lr}
   b4ca2:	4b02      	ldr	r3, [pc, #8]	; (b4cac <network_listening+0xc>)
   b4ca4:	681b      	ldr	r3, [r3, #0]
   b4ca6:	6a1b      	ldr	r3, [r3, #32]
   b4ca8:	9301      	str	r3, [sp, #4]
   b4caa:	bd08      	pop	{r3, pc}
   b4cac:	00030240 	.word	0x00030240

000b4cb0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4cb0:	b508      	push	{r3, lr}
   b4cb2:	4b02      	ldr	r3, [pc, #8]	; (b4cbc <network_set_listen_timeout+0xc>)
   b4cb4:	681b      	ldr	r3, [r3, #0]
   b4cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4cb8:	9301      	str	r3, [sp, #4]
   b4cba:	bd08      	pop	{r3, pc}
   b4cbc:	00030240 	.word	0x00030240

000b4cc0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4cc0:	b508      	push	{r3, lr}
   b4cc2:	4b02      	ldr	r3, [pc, #8]	; (b4ccc <network_get_listen_timeout+0xc>)
   b4cc4:	681b      	ldr	r3, [r3, #0]
   b4cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4cc8:	9301      	str	r3, [sp, #4]
   b4cca:	bd08      	pop	{r3, pc}
   b4ccc:	00030240 	.word	0x00030240

000b4cd0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4cd0:	b508      	push	{r3, lr}
   b4cd2:	4b02      	ldr	r3, [pc, #8]	; (b4cdc <network_is_on+0xc>)
   b4cd4:	681b      	ldr	r3, [r3, #0]
   b4cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4cd8:	9301      	str	r3, [sp, #4]
   b4cda:	bd08      	pop	{r3, pc}
   b4cdc:	00030240 	.word	0x00030240

000b4ce0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4ce0:	b508      	push	{r3, lr}
   b4ce2:	4b02      	ldr	r3, [pc, #8]	; (b4cec <network_is_off+0xc>)
   b4ce4:	681b      	ldr	r3, [r3, #0]
   b4ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4ce8:	9301      	str	r3, [sp, #4]
   b4cea:	bd08      	pop	{r3, pc}
   b4cec:	00030240 	.word	0x00030240

000b4cf0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4cf0:	b508      	push	{r3, lr}
   b4cf2:	4b02      	ldr	r3, [pc, #8]	; (b4cfc <malloc+0xc>)
   b4cf4:	681b      	ldr	r3, [r3, #0]
   b4cf6:	681b      	ldr	r3, [r3, #0]
   b4cf8:	9301      	str	r3, [sp, #4]
   b4cfa:	bd08      	pop	{r3, pc}
   b4cfc:	0003021c 	.word	0x0003021c

000b4d00 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4d00:	b508      	push	{r3, lr}
   b4d02:	4b02      	ldr	r3, [pc, #8]	; (b4d0c <free+0xc>)
   b4d04:	681b      	ldr	r3, [r3, #0]
   b4d06:	685b      	ldr	r3, [r3, #4]
   b4d08:	9301      	str	r3, [sp, #4]
   b4d0a:	bd08      	pop	{r3, pc}
   b4d0c:	0003021c 	.word	0x0003021c

000b4d10 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4d10:	b508      	push	{r3, lr}
   b4d12:	4b02      	ldr	r3, [pc, #8]	; (b4d1c <realloc+0xc>)
   b4d14:	681b      	ldr	r3, [r3, #0]
   b4d16:	689b      	ldr	r3, [r3, #8]
   b4d18:	9301      	str	r3, [sp, #4]
   b4d1a:	bd08      	pop	{r3, pc}
   b4d1c:	0003021c 	.word	0x0003021c

000b4d20 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b4d20:	b508      	push	{r3, lr}
   b4d22:	4b02      	ldr	r3, [pc, #8]	; (b4d2c <sprintf+0xc>)
   b4d24:	681b      	ldr	r3, [r3, #0]
   b4d26:	68db      	ldr	r3, [r3, #12]
   b4d28:	9301      	str	r3, [sp, #4]
   b4d2a:	bd08      	pop	{r3, pc}
   b4d2c:	0003021c 	.word	0x0003021c

000b4d30 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b4d30:	b508      	push	{r3, lr}
   b4d32:	4b02      	ldr	r3, [pc, #8]	; (b4d3c <abort+0xc>)
   b4d34:	681b      	ldr	r3, [r3, #0]
   b4d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4d38:	9301      	str	r3, [sp, #4]
   b4d3a:	bd08      	pop	{r3, pc}
   b4d3c:	0003021c 	.word	0x0003021c

000b4d40 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4d40:	b508      	push	{r3, lr}
   b4d42:	4b02      	ldr	r3, [pc, #8]	; (b4d4c <__assert_func+0xc>)
   b4d44:	681b      	ldr	r3, [r3, #0]
   b4d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4d48:	9301      	str	r3, [sp, #4]
   b4d4a:	bd08      	pop	{r3, pc}
   b4d4c:	0003021c 	.word	0x0003021c

000b4d50 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4d50:	b508      	push	{r3, lr}
   b4d52:	4b02      	ldr	r3, [pc, #8]	; (b4d5c <newlib_impure_ptr_callback+0xc>)
   b4d54:	681b      	ldr	r3, [r3, #0]
   b4d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4d58:	9301      	str	r3, [sp, #4]
   b4d5a:	bd08      	pop	{r3, pc}
   b4d5c:	0003021c 	.word	0x0003021c

000b4d60 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4d60:	2100      	movs	r1, #0
   b4d62:	f7ff bf19 	b.w	b4b98 <system_delay_ms>

000b4d66 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b4d66:	4770      	bx	lr

000b4d68 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b4d68:	4770      	bx	lr

000b4d6a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b4d6a:	4770      	bx	lr

000b4d6c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b4d6c:	4770      	bx	lr
	...

000b4d70 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b4d70:	4b06      	ldr	r3, [pc, #24]	; (b4d8c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b4d72:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b4d74:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b4d76:	f100 040c 	add.w	r4, r0, #12
	    ||
   b4d7a:	d005      	beq.n	b4d88 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b4d7c:	4608      	mov	r0, r1
   b4d7e:	f001 fef1 	bl	b6b64 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b4d82:	2800      	cmp	r0, #0
   b4d84:	bf08      	it	eq
   b4d86:	2400      	moveq	r4, #0
      }
   b4d88:	4620      	mov	r0, r4
   b4d8a:	bd10      	pop	{r4, pc}
   b4d8c:	000b72d0 	.word	0x000b72d0

000b4d90 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b4d90:	4b06      	ldr	r3, [pc, #24]	; (b4dac <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b4d92:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b4d94:	b510      	push	{r4, lr}
   b4d96:	f100 040c 	add.w	r4, r0, #12
	    ||
   b4d9a:	d005      	beq.n	b4da8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b4d9c:	4608      	mov	r0, r1
   b4d9e:	f001 fee1 	bl	b6b64 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b4da2:	2800      	cmp	r0, #0
   b4da4:	bf08      	it	eq
   b4da6:	2400      	moveq	r4, #0
      }
   b4da8:	4620      	mov	r0, r4
   b4daa:	bd10      	pop	{r4, pc}
   b4dac:	000b72d0 	.word	0x000b72d0

000b4db0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b4db0:	4b06      	ldr	r3, [pc, #24]	; (b4dcc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b4db2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b4db4:	b510      	push	{r4, lr}
   b4db6:	f100 040c 	add.w	r4, r0, #12
	    ||
   b4dba:	d005      	beq.n	b4dc8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b4dbc:	4608      	mov	r0, r1
   b4dbe:	f001 fed1 	bl	b6b64 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b4dc2:	2800      	cmp	r0, #0
   b4dc4:	bf08      	it	eq
   b4dc6:	2400      	moveq	r4, #0
      }
   b4dc8:	4620      	mov	r0, r4
   b4dca:	bd10      	pop	{r4, pc}
   b4dcc:	000b72d0 	.word	0x000b72d0

000b4dd0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b4dd0:	b510      	push	{r4, lr}
   b4dd2:	2168      	movs	r1, #104	; 0x68
   b4dd4:	4604      	mov	r4, r0
   b4dd6:	f7ff f960 	bl	b409a <_ZdlPvj>
   b4dda:	4620      	mov	r0, r4
   b4ddc:	bd10      	pop	{r4, pc}

000b4dde <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b4dde:	b510      	push	{r4, lr}
   b4de0:	2128      	movs	r1, #40	; 0x28
   b4de2:	4604      	mov	r4, r0
   b4de4:	f7ff f959 	bl	b409a <_ZdlPvj>
   b4de8:	4620      	mov	r0, r4
   b4dea:	bd10      	pop	{r4, pc}

000b4dec <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b4dec:	b510      	push	{r4, lr}
   b4dee:	2130      	movs	r1, #48	; 0x30
   b4df0:	4604      	mov	r4, r0
   b4df2:	f7ff f952 	bl	b409a <_ZdlPvj>
   b4df6:	4620      	mov	r0, r4
   b4df8:	bd10      	pop	{r4, pc}

000b4dfa <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b4dfa:	2168      	movs	r1, #104	; 0x68
   b4dfc:	f7ff b94d 	b.w	b409a <_ZdlPvj>

000b4e00 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b4e00:	2128      	movs	r1, #40	; 0x28
   b4e02:	f7ff b94a 	b.w	b409a <_ZdlPvj>

000b4e06 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b4e06:	2130      	movs	r1, #48	; 0x30
   b4e08:	f7ff b947 	b.w	b409a <_ZdlPvj>

000b4e0c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b4e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b4e0e:	2500      	movs	r5, #0
   b4e10:	1cec      	adds	r4, r5, #3
   b4e12:	428c      	cmp	r4, r1
   b4e14:	d80d      	bhi.n	b4e32 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b4e16:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b4e18:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b4e1a:	5d87      	ldrb	r7, [r0, r6]
   b4e1c:	4297      	cmp	r7, r2
   b4e1e:	d105      	bne.n	b4e2c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b4e20:	4426      	add	r6, r4
   b4e22:	42b1      	cmp	r1, r6
   b4e24:	d305      	bcc.n	b4e32 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b4e26:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b4e28:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b4e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b4e2c:	3401      	adds	r4, #1
   b4e2e:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b4e30:	e7ee      	b.n	b4e10 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b4e32:	2000      	movs	r0, #0
   b4e34:	e7f9      	b.n	b4e2a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b4e38 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b4e38:	4a02      	ldr	r2, [pc, #8]	; (b4e44 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b4e3a:	4903      	ldr	r1, [pc, #12]	; (b4e48 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b4e3c:	200a      	movs	r0, #10
   b4e3e:	f7ff be8b 	b.w	b4b58 <panic_>
   b4e42:	bf00      	nop
   b4e44:	000b48c9 	.word	0x000b48c9
   b4e48:	000b7130 	.word	0x000b7130

000b4e4c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4e4c:	b430      	push	{r4, r5}
   b4e4e:	460d      	mov	r5, r1
   b4e50:	4611      	mov	r1, r2
   b4e52:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b4e54:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4e56:	6809      	ldr	r1, [r1, #0]
   b4e58:	6828      	ldr	r0, [r5, #0]
   b4e5a:	e9d3 4300 	ldrd	r4, r3, [r3]
   b4e5e:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b4e60:	bc30      	pop	{r4, r5}
   b4e62:	4760      	bx	ip

000b4e64 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b4e64:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4e66:	b538      	push	{r3, r4, r5, lr}
   b4e68:	4604      	mov	r4, r0
	switch (__op)
   b4e6a:	d102      	bne.n	b4e72 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b4e6c:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b4e6e:	6023      	str	r3, [r4, #0]
	}
   b4e70:	e003      	b.n	b4e7a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b4e72:	2a02      	cmp	r2, #2
   b4e74:	d003      	beq.n	b4e7e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b4e76:	2a03      	cmp	r2, #3
   b4e78:	d00d      	beq.n	b4e96 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b4e7a:	2000      	movs	r0, #0
   b4e7c:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b4e7e:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b4e80:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4e82:	f7ff f906 	bl	b4092 <_Znwj>
   b4e86:	4603      	mov	r3, r0
   b4e88:	2800      	cmp	r0, #0
   b4e8a:	d0f0      	beq.n	b4e6e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b4e8c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b4e90:	e883 0003 	stmia.w	r3, {r0, r1}
   b4e94:	e7eb      	b.n	b4e6e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b4e96:	6800      	ldr	r0, [r0, #0]
   b4e98:	2800      	cmp	r0, #0
   b4e9a:	d0ee      	beq.n	b4e7a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b4e9c:	2108      	movs	r1, #8
   b4e9e:	f7ff f8fc 	bl	b409a <_ZdlPvj>
   b4ea2:	e7ea      	b.n	b4e7a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b4ea4 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4ea4:	b510      	push	{r4, lr}
      if (_M_manager)
   b4ea6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4ea8:	4604      	mov	r4, r0
      if (_M_manager)
   b4eaa:	b113      	cbz	r3, b4eb2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4eac:	2203      	movs	r2, #3
   b4eae:	4601      	mov	r1, r0
   b4eb0:	4798      	blx	r3
    }
   b4eb2:	4620      	mov	r0, r4
   b4eb4:	bd10      	pop	{r4, pc}

000b4eb6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b4eb6:	b510      	push	{r4, lr}
   b4eb8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b4eba:	3058      	adds	r0, #88	; 0x58
   b4ebc:	f7ff fff2 	bl	b4ea4 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b4ec0:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b4ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b4ec8:	f001 bac4 	b.w	b6454 <_ZN6StringD1Ev>

000b4ecc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b4ecc:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b4ece:	6843      	ldr	r3, [r0, #4]
   b4ed0:	3b01      	subs	r3, #1
    {
   b4ed2:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b4ed4:	6043      	str	r3, [r0, #4]
   b4ed6:	b963      	cbnz	r3, b4ef2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b4ed8:	6803      	ldr	r3, [r0, #0]
   b4eda:	689b      	ldr	r3, [r3, #8]
   b4edc:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4ede:	68a3      	ldr	r3, [r4, #8]
   b4ee0:	3b01      	subs	r3, #1
   b4ee2:	60a3      	str	r3, [r4, #8]
   b4ee4:	b92b      	cbnz	r3, b4ef2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b4ee6:	6823      	ldr	r3, [r4, #0]
   b4ee8:	4620      	mov	r0, r4
   b4eea:	68db      	ldr	r3, [r3, #12]
    }
   b4eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b4ef0:	4718      	bx	r3
    }
   b4ef2:	bd10      	pop	{r4, pc}

000b4ef4 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b4ef4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b4ef8:	b2da      	uxtb	r2, r3
   b4efa:	2a09      	cmp	r2, #9
   b4efc:	d801      	bhi.n	b4f02 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b4efe:	4618      	mov	r0, r3
   b4f00:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b4f02:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b4f06:	2b05      	cmp	r3, #5
   b4f08:	d801      	bhi.n	b4f0e <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b4f0a:	3857      	subs	r0, #87	; 0x57
   b4f0c:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b4f0e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b4f12:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b4f14:	bf94      	ite	ls
   b4f16:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b4f18:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b4f1c:	4770      	bx	lr
	...

000b4f20 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b4f20:	b510      	push	{r4, lr}
            locked_(false) {
   b4f22:	2300      	movs	r3, #0
   b4f24:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b4f26:	4b04      	ldr	r3, [pc, #16]	; (b4f38 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b4f28:	4604      	mov	r4, r0
   b4f2a:	6818      	ldr	r0, [r3, #0]
   b4f2c:	f7ff fcb4 	bl	b4898 <os_mutex_recursive_lock>
        locked_ = true;
   b4f30:	2301      	movs	r3, #1
   b4f32:	7023      	strb	r3, [r4, #0]
    }
   b4f34:	4620      	mov	r0, r4
   b4f36:	bd10      	pop	{r4, pc}
   b4f38:	2003e6b4 	.word	0x2003e6b4

000b4f3c <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b4f3c:	b510      	push	{r4, lr}
        if (locked_) {
   b4f3e:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b4f40:	4604      	mov	r4, r0
        if (locked_) {
   b4f42:	b11b      	cbz	r3, b4f4c <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b4f44:	4b02      	ldr	r3, [pc, #8]	; (b4f50 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b4f46:	6818      	ldr	r0, [r3, #0]
   b4f48:	f7ff fcae 	bl	b48a8 <os_mutex_recursive_unlock>
    }
   b4f4c:	4620      	mov	r0, r4
   b4f4e:	bd10      	pop	{r4, pc}
   b4f50:	2003e6b4 	.word	0x2003e6b4

000b4f54 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b4f54:	b082      	sub	sp, #8
   b4f56:	4603      	mov	r3, r0
    address_ = addr;
   b4f58:	6808      	ldr	r0, [r1, #0]
   b4f5a:	6849      	ldr	r1, [r1, #4]
   b4f5c:	466a      	mov	r2, sp
   b4f5e:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b4f60:	466a      	mov	r2, sp
   b4f62:	ca03      	ldmia	r2!, {r0, r1}
   b4f64:	6018      	str	r0, [r3, #0]
}
   b4f66:	4618      	mov	r0, r3
    address_ = addr.address_;
   b4f68:	6059      	str	r1, [r3, #4]
}
   b4f6a:	b002      	add	sp, #8
   b4f6c:	4770      	bx	lr

000b4f6e <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b4f6e:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b4f70:	7982      	ldrb	r2, [r0, #6]
   b4f72:	798b      	ldrb	r3, [r1, #6]
   b4f74:	429a      	cmp	r2, r3
   b4f76:	d106      	bne.n	b4f86 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b4f78:	2206      	movs	r2, #6
   b4f7a:	f001 ff0b 	bl	b6d94 <memcmp>
   b4f7e:	fab0 f080 	clz	r0, r0
   b4f82:	0940      	lsrs	r0, r0, #5
}
   b4f84:	bd08      	pop	{r3, pc}
    return false;
   b4f86:	2000      	movs	r0, #0
   b4f88:	e7fc      	b.n	b4f84 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b4f8a <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b4f8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4f8e:	6003      	str	r3, [r0, #0]
   b4f90:	8083      	strh	r3, [r0, #4]
}
   b4f92:	2000      	movs	r0, #0
   b4f94:	4770      	bx	lr

000b4f96 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b4f96:	b508      	push	{r3, lr}
   b4f98:	4602      	mov	r2, r0
        : address_{} {
   b4f9a:	2100      	movs	r1, #0
   b4f9c:	6001      	str	r1, [r0, #0]
   b4f9e:	6041      	str	r1, [r0, #4]
    clear();
   b4fa0:	f7ff fff3 	bl	b4f8a <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b4fa4:	7191      	strb	r1, [r2, #6]
}
   b4fa6:	4610      	mov	r0, r2
   b4fa8:	bd08      	pop	{r3, pc}
	...

000b4fac <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b4fac:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b4fae:	2301      	movs	r3, #1
   b4fb0:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b4fb2:	4b05      	ldr	r3, [pc, #20]	; (b4fc8 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b4fb4:	4602      	mov	r2, r0
   b4fb6:	f103 0110 	add.w	r1, r3, #16
   b4fba:	f853 4b04 	ldr.w	r4, [r3], #4
   b4fbe:	f842 4b04 	str.w	r4, [r2], #4
   b4fc2:	428b      	cmp	r3, r1
   b4fc4:	d1f9      	bne.n	b4fba <_ZN8particle7BleUuidC1Ev+0xe>
}
   b4fc6:	bd10      	pop	{r4, pc}
   b4fc8:	000b72de 	.word	0x000b72de

000b4fcc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b4fcc:	b510      	push	{r4, lr}
    if (uuid128) {
   b4fce:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b4fd0:	4604      	mov	r4, r0
    if (uuid128) {
   b4fd2:	b1b1      	cbz	r1, b5002 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b4fd4:	2a01      	cmp	r2, #1
   b4fd6:	f101 0210 	add.w	r2, r1, #16
   b4fda:	d10a      	bne.n	b4ff2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b4fdc:	4601      	mov	r1, r0
   b4fde:	f853 0b04 	ldr.w	r0, [r3], #4
   b4fe2:	f841 0b04 	str.w	r0, [r1], #4
   b4fe6:	4293      	cmp	r3, r2
   b4fe8:	d1f9      	bne.n	b4fde <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b4fea:	2301      	movs	r3, #1
   b4fec:	6123      	str	r3, [r4, #16]
}
   b4fee:	4620      	mov	r0, r4
   b4ff0:	bd10      	pop	{r4, pc}
   b4ff2:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b4ff4:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b4ff8:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b4ffc:	429a      	cmp	r2, r3
   b4ffe:	d1f9      	bne.n	b4ff4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b5000:	e7f3      	b.n	b4fea <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b5002:	2210      	movs	r2, #16
   b5004:	f001 fefe 	bl	b6e04 <memset>
   b5008:	e7f1      	b.n	b4fee <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b500a <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b500a:	b538      	push	{r3, r4, r5, lr}
   b500c:	4604      	mov	r4, r0
   b500e:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b5010:	461a      	mov	r2, r3
   b5012:	f7ff ffdb 	bl	b4fcc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b5016:	81a5      	strh	r5, [r4, #12]
}
   b5018:	4620      	mov	r0, r4
   b501a:	bd38      	pop	{r3, r4, r5, pc}

000b501c <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b501c:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b501e:	6902      	ldr	r2, [r0, #16]
   b5020:	b922      	cbnz	r2, b502c <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b5022:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b5024:	3800      	subs	r0, #0
   b5026:	bf18      	it	ne
   b5028:	2001      	movne	r0, #1
}
   b502a:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b502c:	4902      	ldr	r1, [pc, #8]	; (b5038 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b502e:	2210      	movs	r2, #16
   b5030:	f001 feb0 	bl	b6d94 <memcmp>
   b5034:	e7f6      	b.n	b5024 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b5036:	bf00      	nop
   b5038:	000b72fe 	.word	0x000b72fe

000b503c <_ZNK8particle7BleUuid4typeEv>:
}
   b503c:	6900      	ldr	r0, [r0, #16]
   b503e:	4770      	bx	lr

000b5040 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b5040:	b538      	push	{r3, r4, r5, lr}
   b5042:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b5044:	2214      	movs	r2, #20
   b5046:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b5048:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b504a:	f001 fedb 	bl	b6e04 <memset>
    if (type_ == BleUuidType::SHORT) {
   b504e:	6923      	ldr	r3, [r4, #16]
   b5050:	b91b      	cbnz	r3, b505a <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b5052:	89a3      	ldrh	r3, [r4, #12]
   b5054:	802b      	strh	r3, [r5, #0]
}
   b5056:	4628      	mov	r0, r5
   b5058:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b505a:	2301      	movs	r3, #1
   b505c:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b505e:	4621      	mov	r1, r4
   b5060:	462b      	mov	r3, r5
   b5062:	f104 0210 	add.w	r2, r4, #16
   b5066:	f851 0b04 	ldr.w	r0, [r1], #4
   b506a:	f843 0b04 	str.w	r0, [r3], #4
   b506e:	4291      	cmp	r1, r2
   b5070:	d1f9      	bne.n	b5066 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b5072:	e7f0      	b.n	b5056 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b5074 <_ZNK8particle7BleUuid7shortedEv>:
}
   b5074:	8980      	ldrh	r0, [r0, #12]
   b5076:	4770      	bx	lr

000b5078 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b5078:	4770      	bx	lr

000b507a <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b507a:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b507c:	6902      	ldr	r2, [r0, #16]
   b507e:	690b      	ldr	r3, [r1, #16]
   b5080:	429a      	cmp	r2, r3
   b5082:	d106      	bne.n	b5092 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b5084:	2210      	movs	r2, #16
   b5086:	f001 fe85 	bl	b6d94 <memcmp>
   b508a:	fab0 f080 	clz	r0, r0
   b508e:	0940      	lsrs	r0, r0, #5
}
   b5090:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b5092:	2000      	movs	r0, #0
   b5094:	e7fc      	b.n	b5090 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b5098 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b5098:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b509a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b509e:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b50a0:	4b34      	ldr	r3, [pc, #208]	; (b5174 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b50a2:	460c      	mov	r4, r1
   b50a4:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b50a6:	4602      	mov	r2, r0
   b50a8:	f103 0110 	add.w	r1, r3, #16
   b50ac:	f853 0b04 	ldr.w	r0, [r3], #4
   b50b0:	f842 0b04 	str.w	r0, [r2], #4
   b50b4:	428b      	cmp	r3, r1
   b50b6:	d1f9      	bne.n	b50ac <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b50b8:	b344      	cbz	r4, b510c <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b50ba:	2124      	movs	r1, #36	; 0x24
   b50bc:	4620      	mov	r0, r4
   b50be:	f001 fef1 	bl	b6ea4 <strnlen>
   b50c2:	2804      	cmp	r0, #4
   b50c4:	f04f 0500 	mov.w	r5, #0
   b50c8:	d123      	bne.n	b5112 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b50ca:	f8ad 5004 	strh.w	r5, [sp, #4]
   b50ce:	af01      	add	r7, sp, #4
   b50d0:	1ca5      	adds	r5, r4, #2
   b50d2:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b50d4:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b50d8:	f7ff ff0c 	bl	b4ef4 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b50dc:	f1b0 0800 	subs.w	r8, r0, #0
   b50e0:	db12      	blt.n	b5108 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b50e2:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b50e6:	f7ff ff05 	bl	b4ef4 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b50ea:	2800      	cmp	r0, #0
   b50ec:	db0c      	blt.n	b5108 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b50ee:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b50f0:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b50f4:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b50f6:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b50fa:	d1eb      	bne.n	b50d4 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b50fc:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b5100:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b5102:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b5106:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b5108:	2300      	movs	r3, #0
   b510a:	6133      	str	r3, [r6, #16]
}
   b510c:	b002      	add	sp, #8
   b510e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b5112:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b5116:	2124      	movs	r1, #36	; 0x24
   b5118:	4620      	mov	r0, r4
   b511a:	f001 fec3 	bl	b6ea4 <strnlen>
   b511e:	42a8      	cmp	r0, r5
   b5120:	d807      	bhi.n	b5132 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b5122:	4642      	mov	r2, r8
   b5124:	2100      	movs	r1, #0
   b5126:	4630      	mov	r0, r6
}
   b5128:	b002      	add	sp, #8
   b512a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b512e:	f001 be69 	b.w	b6e04 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b5132:	f1b8 0f00 	cmp.w	r8, #0
   b5136:	d0e9      	beq.n	b510c <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b5138:	5d60      	ldrb	r0, [r4, r5]
   b513a:	f7ff fedb 	bl	b4ef4 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b513e:	0603      	lsls	r3, r0, #24
   b5140:	d415      	bmi.n	b516e <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b5142:	0100      	lsls	r0, r0, #4
   b5144:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b5148:	b2c7      	uxtb	r7, r0
   b514a:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b514e:	2124      	movs	r1, #36	; 0x24
   b5150:	4620      	mov	r0, r4
   b5152:	f001 fea7 	bl	b6ea4 <strnlen>
   b5156:	3501      	adds	r5, #1
   b5158:	42a8      	cmp	r0, r5
   b515a:	d908      	bls.n	b516e <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b515c:	5d60      	ldrb	r0, [r4, r5]
   b515e:	f7ff fec9 	bl	b4ef4 <_ZN8particle11hexToNibbleEc>
   b5162:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b5164:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b5166:	bfa4      	itt	ge
   b5168:	4338      	orrge	r0, r7
   b516a:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b516e:	3501      	adds	r5, #1
   b5170:	e7d1      	b.n	b5116 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b5172:	bf00      	nop
   b5174:	000b72de 	.word	0x000b72de

000b5178 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b5178:	b513      	push	{r0, r1, r4, lr}
   b517a:	4604      	mov	r4, r0
   b517c:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b517e:	f7ff ff15 	bl	b4fac <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b5182:	4620      	mov	r0, r4
   b5184:	9901      	ldr	r1, [sp, #4]
   b5186:	f7ff ff87 	bl	b5098 <_ZN8particle7BleUuid9constructEPKc>
}
   b518a:	4620      	mov	r0, r4
   b518c:	b002      	add	sp, #8
   b518e:	bd10      	pop	{r4, pc}

000b5190 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b5190:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b5192:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5196:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b5198:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b519a:	8043      	strh	r3, [r0, #2]
   b519c:	220e      	movs	r2, #14
   b519e:	4629      	mov	r1, r5
   b51a0:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b51a2:	7105      	strb	r5, [r0, #4]
   b51a4:	3006      	adds	r0, #6
   b51a6:	f001 fe2d 	bl	b6e04 <memset>
   b51aa:	f104 0014 	add.w	r0, r4, #20
   b51ae:	f7ff fefd 	bl	b4fac <_ZN8particle7BleUuidC1Ev>
   b51b2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b51b6:	f7ff fef9 	bl	b4fac <_ZN8particle7BleUuidC1Ev>
   b51ba:	4904      	ldr	r1, [pc, #16]	; (b51cc <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b51bc:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b51c0:	f001 f993 	bl	b64ea <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b51c4:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b51c6:	4620      	mov	r0, r4
   b51c8:	bd38      	pop	{r3, r4, r5, pc}
   b51ca:	bf00      	nop
   b51cc:	000b71c7 	.word	0x000b71c7

000b51d0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b51d0:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b51d2:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b51d6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b51da:	4293      	cmp	r3, r2
   b51dc:	4618      	mov	r0, r3
   b51de:	d006      	beq.n	b51ee <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b51e0:	6804      	ldr	r4, [r0, #0]
   b51e2:	8824      	ldrh	r4, [r4, #0]
   b51e4:	428c      	cmp	r4, r1
   b51e6:	f103 0308 	add.w	r3, r3, #8
   b51ea:	d1f6      	bne.n	b51da <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b51ec:	bd10      	pop	{r4, pc}
        return nullptr;
   b51ee:	2000      	movs	r0, #0
   b51f0:	e7fc      	b.n	b51ec <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b51f4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b51f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b51f8:	2600      	movs	r6, #0
   b51fa:	6006      	str	r6, [r0, #0]
   b51fc:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b51fe:	2028      	movs	r0, #40	; 0x28
   b5200:	460c      	mov	r4, r1
   b5202:	f7fe ff46 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b5206:	1e05      	subs	r5, r0, #0
   b5208:	f105 080c 	add.w	r8, r5, #12
   b520c:	d00f      	beq.n	b522e <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b520e:	2301      	movs	r3, #1
   b5210:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b5214:	4b08      	ldr	r3, [pc, #32]	; (b5238 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b5216:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b5218:	4640      	mov	r0, r8
   b521a:	f7ff fec7 	bl	b4fac <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b521e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b5220:	622e      	str	r6, [r5, #32]
   b5222:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b5226:	4646      	mov	r6, r8
   b5228:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b522a:	6823      	ldr	r3, [r4, #0]
   b522c:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b522e:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b5232:	4638      	mov	r0, r7
   b5234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5238:	000b72a0 	.word	0x000b72a0

000b523c <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b523c:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b523e:	2500      	movs	r5, #0
   b5240:	6005      	str	r5, [r0, #0]
   b5242:	4606      	mov	r6, r0
   b5244:	2030      	movs	r0, #48	; 0x30
   b5246:	f7fe ff24 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b524a:	4604      	mov	r4, r0
   b524c:	b188      	cbz	r0, b5272 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b524e:	2301      	movs	r3, #1
   b5250:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b5254:	4b09      	ldr	r3, [pc, #36]	; (b527c <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b5256:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b5258:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b525c:	8183      	strh	r3, [r0, #12]
   b525e:	300e      	adds	r0, #14
   b5260:	f7ff fe99 	bl	b4f96 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b5264:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b5268:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b526c:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b5270:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b5272:	6074      	str	r4, [r6, #4]
   b5274:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b5276:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b5278:	4630      	mov	r0, r6
   b527a:	bd70      	pop	{r4, r5, r6, pc}
   b527c:	000b72bc 	.word	0x000b72bc

000b5280 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b5280:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5282:	460d      	mov	r5, r1
   b5284:	4604      	mov	r4, r0
    WiringBleLock lk;
   b5286:	a801      	add	r0, sp, #4
   b5288:	f7ff fe4a 	bl	b4f20 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b528c:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b528e:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b5292:	6023      	str	r3, [r4, #0]
   b5294:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b5298:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b529a:	a801      	add	r0, sp, #4
   b529c:	f7ff fe4e 	bl	b4f3c <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b52a0:	4620      	mov	r0, r4
   b52a2:	b003      	add	sp, #12
   b52a4:	bd30      	pop	{r4, r5, pc}

000b52a6 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b52a6:	b530      	push	{r4, r5, lr}
   b52a8:	4605      	mov	r5, r0
   b52aa:	b087      	sub	sp, #28
   b52ac:	460c      	mov	r4, r1
    WiringBleLock lk;
   b52ae:	a801      	add	r0, sp, #4
   b52b0:	f7ff fe36 	bl	b4f20 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b52b4:	682a      	ldr	r2, [r5, #0]
   b52b6:	6823      	ldr	r3, [r4, #0]
   b52b8:	8812      	ldrh	r2, [r2, #0]
   b52ba:	881b      	ldrh	r3, [r3, #0]
   b52bc:	429a      	cmp	r2, r3
   b52be:	d10d      	bne.n	b52dc <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b52c0:	4629      	mov	r1, r5
   b52c2:	a802      	add	r0, sp, #8
   b52c4:	f7ff ffdc 	bl	b5280 <_ZNK8particle13BlePeerDevice7addressEv>
   b52c8:	4621      	mov	r1, r4
   b52ca:	a804      	add	r0, sp, #16
   b52cc:	f7ff ffd8 	bl	b5280 <_ZNK8particle13BlePeerDevice7addressEv>
   b52d0:	a904      	add	r1, sp, #16
   b52d2:	a802      	add	r0, sp, #8
   b52d4:	f7ff fe4b 	bl	b4f6e <_ZNK8particle10BleAddresseqERKS0_>
   b52d8:	4604      	mov	r4, r0
   b52da:	b900      	cbnz	r0, b52de <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b52dc:	2400      	movs	r4, #0
    WiringBleLock lk;
   b52de:	a801      	add	r0, sp, #4
   b52e0:	f7ff fe2c 	bl	b4f3c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b52e4:	4620      	mov	r0, r4
   b52e6:	b007      	add	sp, #28
   b52e8:	bd30      	pop	{r4, r5, pc}
	...

000b52ec <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b52ec:	b510      	push	{r4, lr}
   b52ee:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b52f0:	2064      	movs	r0, #100	; 0x64
   b52f2:	f7fe fece 	bl	b4092 <_Znwj>
   b52f6:	b168      	cbz	r0, b5314 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b52f8:	2300      	movs	r3, #0
   b52fa:	e9c0 3300 	strd	r3, r3, [r0]
   b52fe:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b5302:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b5306:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b530a:	6203      	str	r3, [r0, #32]
   b530c:	62c3      	str	r3, [r0, #44]	; 0x2c
   b530e:	63c3      	str	r3, [r0, #60]	; 0x3c
   b5310:	64c3      	str	r3, [r0, #76]	; 0x4c
   b5312:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b5314:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b5316:	b920      	cbnz	r0, b5322 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b5318:	4a0a      	ldr	r2, [pc, #40]	; (b5344 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b531a:	490b      	ldr	r1, [pc, #44]	; (b5348 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b531c:	200a      	movs	r0, #10
   b531e:	f7ff fc1b 	bl	b4b58 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b5322:	2000      	movs	r0, #0
   b5324:	f7ff fa68 	bl	b47f8 <hal_ble_stack_init>
   b5328:	b120      	cbz	r0, b5334 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b532a:	4a06      	ldr	r2, [pc, #24]	; (b5344 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b532c:	4907      	ldr	r1, [pc, #28]	; (b534c <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b532e:	200a      	movs	r0, #10
   b5330:	f7ff fc12 	bl	b4b58 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b5334:	6821      	ldr	r1, [r4, #0]
   b5336:	4806      	ldr	r0, [pc, #24]	; (b5350 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b5338:	2200      	movs	r2, #0
   b533a:	f7ff fa9b 	bl	b4874 <hal_ble_set_callback_on_periph_link_events>
}
   b533e:	4620      	mov	r0, r4
   b5340:	bd10      	pop	{r4, pc}
   b5342:	bf00      	nop
   b5344:	000b48c9 	.word	0x000b48c9
   b5348:	000b7130 	.word	0x000b7130
   b534c:	000b716e 	.word	0x000b716e
   b5350:	000b58c5 	.word	0x000b58c5

000b5354 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b5354:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b5356:	4c0a      	ldr	r4, [pc, #40]	; (b5380 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b5358:	7823      	ldrb	r3, [r4, #0]
   b535a:	f3bf 8f5b 	dmb	ish
   b535e:	07db      	lsls	r3, r3, #31
   b5360:	d40c      	bmi.n	b537c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b5362:	4620      	mov	r0, r4
   b5364:	f7fe fe9b 	bl	b409e <__cxa_guard_acquire>
   b5368:	b140      	cbz	r0, b537c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b536a:	4806      	ldr	r0, [pc, #24]	; (b5384 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b536c:	f7ff ffbe 	bl	b52ec <_ZN8particle14BleLocalDeviceC1Ev>
   b5370:	4620      	mov	r0, r4
   b5372:	f7fe fe99 	bl	b40a8 <__cxa_guard_release>
   b5376:	4804      	ldr	r0, [pc, #16]	; (b5388 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b5378:	f001 fd06 	bl	b6d88 <atexit>
    return instance;
}
   b537c:	4801      	ldr	r0, [pc, #4]	; (b5384 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b537e:	bd10      	pop	{r4, pc}
   b5380:	2003e6ac 	.word	0x2003e6ac
   b5384:	2003e6b8 	.word	0x2003e6b8
   b5388:	000b5591 	.word	0x000b5591

000b538c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b538c:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b538e:	6803      	ldr	r3, [r0, #0]
   b5390:	3b09      	subs	r3, #9
   b5392:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b5394:	b08d      	sub	sp, #52	; 0x34
   b5396:	4604      	mov	r4, r0
   b5398:	460d      	mov	r5, r1
    switch (event->type) {
   b539a:	d811      	bhi.n	b53c0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b539c:	f7ff ffda 	bl	b5354 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b53a0:	88a1      	ldrh	r1, [r4, #4]
   b53a2:	6800      	ldr	r0, [r0, #0]
   b53a4:	f7ff ff14 	bl	b51d0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b53a8:	4603      	mov	r3, r0
   b53aa:	b958      	cbnz	r0, b53c4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b53ac:	2220      	movs	r2, #32
   b53ae:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b53b2:	4a0b      	ldr	r2, [pc, #44]	; (b53e0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b53b4:	9200      	str	r2, [sp, #0]
   b53b6:	490b      	ldr	r1, [pc, #44]	; (b53e4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b53b8:	aa04      	add	r2, sp, #16
   b53ba:	2032      	movs	r0, #50	; 0x32
   b53bc:	f7ff fbd4 	bl	b4b68 <log_message>
}
   b53c0:	b00d      	add	sp, #52	; 0x34
   b53c2:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b53c4:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b53c6:	2a00      	cmp	r2, #0
   b53c8:	d0fa      	beq.n	b53c0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b53ca:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b53ce:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b53d2:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b53d6:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b53d8:	aa04      	add	r2, sp, #16
   b53da:	a903      	add	r1, sp, #12
   b53dc:	47a0      	blx	r4
}
   b53de:	e7ef      	b.n	b53c0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b53e0:	000b71b0 	.word	0x000b71b0
   b53e4:	000b7147 	.word	0x000b7147

000b53e8 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b53e8:	b919      	cbnz	r1, b53f2 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b53ea:	460a      	mov	r2, r1
   b53ec:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b53ee:	f7ff ba0b 	b.w	b4808 <hal_ble_gap_set_advertising_data>
   b53f2:	e9d1 0100 	ldrd	r0, r1, [r1]
   b53f6:	2200      	movs	r2, #0
   b53f8:	e7f9      	b.n	b53ee <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b53fa <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b53fa:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b53fc:	1e14      	subs	r4, r2, #0
   b53fe:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b5400:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b5402:	db02      	blt.n	b540a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b5404:	1862      	adds	r2, r4, r1
   b5406:	429a      	cmp	r2, r3
   b5408:	dd00      	ble.n	b540c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b540a:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b540c:	682a      	ldr	r2, [r5, #0]
   b540e:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b5410:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b5412:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5414:	1a52      	subs	r2, r2, r1
   b5416:	f001 fcdb 	bl	b6dd0 <memmove>
    size_ -= n;
   b541a:	686a      	ldr	r2, [r5, #4]
   b541c:	1b12      	subs	r2, r2, r4
   b541e:	606a      	str	r2, [r5, #4]
}
   b5420:	bd38      	pop	{r3, r4, r5, pc}

000b5422 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b5422:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b5424:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b5426:	4604      	mov	r4, r0
   b5428:	460d      	mov	r5, r1
   b542a:	ab01      	add	r3, sp, #4
   b542c:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5430:	f7ff fcec 	bl	b4e0c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b5434:	4602      	mov	r2, r0
   b5436:	b138      	cbz	r0, b5448 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b5438:	9901      	ldr	r1, [sp, #4]
   b543a:	4620      	mov	r0, r4
   b543c:	f7ff ffdd 	bl	b53fa <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b5440:	4629      	mov	r1, r5
   b5442:	4620      	mov	r0, r4
   b5444:	f7ff ffed 	bl	b5422 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b5448:	b003      	add	sp, #12
   b544a:	bd30      	pop	{r4, r5, pc}

000b544c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b544c:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b544e:	460c      	mov	r4, r1
   b5450:	b929      	cbnz	r1, b545e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b5452:	460a      	mov	r2, r1
   b5454:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b5456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b545a:	f7ff b9dd 	b.w	b4818 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b545e:	2101      	movs	r1, #1
   b5460:	4620      	mov	r0, r4
   b5462:	f7ff ffde 	bl	b5422 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b5466:	e9d4 0100 	ldrd	r0, r1, [r4]
   b546a:	2200      	movs	r2, #0
   b546c:	e7f3      	b.n	b5456 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b546e <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b546e:	b538      	push	{r3, r4, r5, lr}
   b5470:	4604      	mov	r4, r0
   b5472:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b5474:	f7ff ffb8 	bl	b53e8 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b5478:	2800      	cmp	r0, #0
   b547a:	db0a      	blt.n	b5492 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b547c:	4629      	mov	r1, r5
   b547e:	4620      	mov	r0, r4
   b5480:	f7ff ffe4 	bl	b544c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b5484:	2800      	cmp	r0, #0
   b5486:	db04      	blt.n	b5492 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b5488:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b548c:	2000      	movs	r0, #0
   b548e:	f7ff b9cb 	b.w	b4828 <hal_ble_gap_start_advertising>
}
   b5492:	bd38      	pop	{r3, r4, r5, pc}

000b5494 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b5494:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5496:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b5498:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b549a:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b549c:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b549e:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b54a0:	f7fe fdf7 	bl	b4092 <_Znwj>
   b54a4:	b118      	cbz	r0, b54ae <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b54a6:	682b      	ldr	r3, [r5, #0]
   b54a8:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b54aa:	686b      	ldr	r3, [r5, #4]
   b54ac:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b54ae:	4b03      	ldr	r3, [pc, #12]	; (b54bc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b54b0:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b54b2:	4b03      	ldr	r3, [pc, #12]	; (b54c0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b54b4:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b54b6:	60a3      	str	r3, [r4, #8]
      }
   b54b8:	4620      	mov	r0, r4
   b54ba:	bd38      	pop	{r3, r4, r5, pc}
   b54bc:	000b4e4d 	.word	0x000b4e4d
   b54c0:	000b4e65 	.word	0x000b4e65

000b54c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b54c4:	680b      	ldr	r3, [r1, #0]
   b54c6:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b54c8:	b113      	cbz	r3, b54d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b54ca:	685a      	ldr	r2, [r3, #4]
   b54cc:	3201      	adds	r2, #1
   b54ce:	605a      	str	r2, [r3, #4]
      }
   b54d0:	4770      	bx	lr

000b54d2 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b54d2:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b54d4:	f851 3b04 	ldr.w	r3, [r1], #4
   b54d8:	4604      	mov	r4, r0
   b54da:	f840 3b04 	str.w	r3, [r0], #4
   b54de:	f7ff fff1 	bl	b54c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b54e2:	6823      	ldr	r3, [r4, #0]
   b54e4:	b90b      	cbnz	r3, b54ea <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b54e6:	f7ff fca7 	bl	b4e38 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b54ea:	4620      	mov	r0, r4
   b54ec:	bd10      	pop	{r4, pc}

000b54ee <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b54ee:	b510      	push	{r4, lr}
   b54f0:	f851 3b04 	ldr.w	r3, [r1], #4
   b54f4:	4604      	mov	r4, r0
   b54f6:	f840 3b04 	str.w	r3, [r0], #4
   b54fa:	f7ff ffe3 	bl	b54c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b54fe:	4620      	mov	r0, r4
   b5500:	bd10      	pop	{r4, pc}

000b5502 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b5502:	b510      	push	{r4, lr}
   b5504:	f851 3b04 	ldr.w	r3, [r1], #4
   b5508:	4604      	mov	r4, r0
   b550a:	f840 3b04 	str.w	r3, [r0], #4
   b550e:	f7ff ffd9 	bl	b54c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b5512:	4620      	mov	r0, r4
   b5514:	bd10      	pop	{r4, pc}

000b5516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b5516:	b510      	push	{r4, lr}
   b5518:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b551a:	6800      	ldr	r0, [r0, #0]
   b551c:	b108      	cbz	r0, b5522 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b551e:	f7ff fcd5 	bl	b4ecc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b5522:	4620      	mov	r0, r4
   b5524:	bd10      	pop	{r4, pc}

000b5526 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b5526:	b510      	push	{r4, lr}
   b5528:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b552a:	3004      	adds	r0, #4
   b552c:	f7ff fff3 	bl	b5516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5530:	4620      	mov	r0, r4
   b5532:	bd10      	pop	{r4, pc}

000b5534 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5534:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5536:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b553a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b553c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b5540:	42ae      	cmp	r6, r5
   b5542:	d004      	beq.n	b554e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b5544:	1d28      	adds	r0, r5, #4
   b5546:	f7ff ffe6 	bl	b5516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b554a:	3508      	adds	r5, #8
   b554c:	e7f8      	b.n	b5540 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b554e:	6820      	ldr	r0, [r4, #0]
   b5550:	f7ff fbd6 	bl	b4d00 <free>
}
   b5554:	4620      	mov	r0, r4
   b5556:	bd70      	pop	{r4, r5, r6, pc}

000b5558 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5558:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b555a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b555e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5560:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b5564:	42ae      	cmp	r6, r5
   b5566:	d004      	beq.n	b5572 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b5568:	1d28      	adds	r0, r5, #4
   b556a:	f7ff ffd4 	bl	b5516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b556e:	3508      	adds	r5, #8
   b5570:	e7f8      	b.n	b5564 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b5572:	6820      	ldr	r0, [r4, #0]
   b5574:	f7ff fbc4 	bl	b4d00 <free>
}
   b5578:	4620      	mov	r0, r4
   b557a:	bd70      	pop	{r4, r5, r6, pc}

000b557c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b557c:	b510      	push	{r4, lr}
   b557e:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b5580:	3024      	adds	r0, #36	; 0x24
   b5582:	f7ff ffe9 	bl	b5558 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b5586:	f104 0018 	add.w	r0, r4, #24
   b558a:	f7ff ffd3 	bl	b5534 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b558e:	bd10      	pop	{r4, pc}

000b5590 <__tcf_0>:
    static BleLocalDevice instance;
   b5590:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b5592:	4b17      	ldr	r3, [pc, #92]	; (b55f0 <__tcf_0+0x60>)
   b5594:	681c      	ldr	r4, [r3, #0]
   b5596:	b354      	cbz	r4, b55ee <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b5598:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b559c:	f7ff fc82 	bl	b4ea4 <_ZNSt14_Function_baseD1Ev>
   b55a0:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b55a4:	f7ff fc7e 	bl	b4ea4 <_ZNSt14_Function_baseD1Ev>
   b55a8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b55ac:	f7ff fc7a 	bl	b4ea4 <_ZNSt14_Function_baseD1Ev>
   b55b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b55b4:	f7ff fc76 	bl	b4ea4 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b55b8:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b55bc:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b55c0:	42ae      	cmp	r6, r5
   b55c2:	d004      	beq.n	b55ce <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b55c4:	1d28      	adds	r0, r5, #4
   b55c6:	f7ff ffa6 	bl	b5516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b55ca:	3508      	adds	r5, #8
   b55cc:	e7f8      	b.n	b55c0 <__tcf_0+0x30>
    ::free(ptr);
   b55ce:	69a0      	ldr	r0, [r4, #24]
   b55d0:	f7ff fb96 	bl	b4d00 <free>
    ~BleLocalDeviceImpl() = default;
   b55d4:	f104 000c 	add.w	r0, r4, #12
   b55d8:	f7ff ffbe 	bl	b5558 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b55dc:	4620      	mov	r0, r4
   b55de:	f7ff ffa9 	bl	b5534 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b55e2:	4620      	mov	r0, r4
   b55e4:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b55e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b55ea:	f7fe bd56 	b.w	b409a <_ZdlPvj>
   b55ee:	bd70      	pop	{r4, r5, r6, pc}
   b55f0:	2003e6b8 	.word	0x2003e6b8

000b55f4 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b55f4:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b55f6:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b55f8:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b55fc:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b5600:	6803      	ldr	r3, [r0, #0]
   b5602:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5604:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5606:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b5608:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b560a:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b560c:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b560e:	f7ff ff82 	bl	b5516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b5612:	b002      	add	sp, #8
   b5614:	bd10      	pop	{r4, pc}

000b5616 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b5616:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5618:	b510      	push	{r4, lr}
      if (_M_empty())
   b561a:	b90a      	cbnz	r2, b5620 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b561c:	f001 fa9e 	bl	b6b5c <_ZSt25__throw_bad_function_callv>
    }
   b5620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5624:	68c3      	ldr	r3, [r0, #12]
   b5626:	4718      	bx	r3

000b5628 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b5628:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b562a:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b562c:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b562e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b5630:	dd03      	ble.n	b563a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b5632:	f7ff fb6d 	bl	b4d10 <realloc>
            if (!d) {
   b5636:	b918      	cbnz	r0, b5640 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b5638:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b563a:	f7ff fb61 	bl	b4d00 <free>
        T* d = nullptr;
   b563e:	2000      	movs	r0, #0
        data_ = d;
   b5640:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b5642:	60a5      	str	r5, [r4, #8]
        return true;
   b5644:	2001      	movs	r0, #1
   b5646:	e7f7      	b.n	b5638 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b5648 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b5648:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b564a:	6883      	ldr	r3, [r0, #8]
   b564c:	428b      	cmp	r3, r1
   b564e:	da02      	bge.n	b5656 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b5650:	f7ff ffea 	bl	b5628 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b5654:	bd08      	pop	{r3, pc}
    return true;
   b5656:	2001      	movs	r0, #1
   b5658:	e7fc      	b.n	b5654 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b565a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b565a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b565e:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5660:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b5662:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5664:	4419      	add	r1, r3
   b5666:	6883      	ldr	r3, [r0, #8]
   b5668:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b566a:	4604      	mov	r4, r0
   b566c:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b566e:	dc12      	bgt.n	b5696 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b5670:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5672:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5674:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5676:	1bd2      	subs	r2, r2, r7
   b5678:	4631      	mov	r1, r6
   b567a:	1970      	adds	r0, r6, r5
   b567c:	f001 fba8 	bl	b6dd0 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b5680:	462a      	mov	r2, r5
   b5682:	4641      	mov	r1, r8
   b5684:	4630      	mov	r0, r6
   b5686:	f001 fb95 	bl	b6db4 <memcpy>
    size_ += n;
   b568a:	6863      	ldr	r3, [r4, #4]
   b568c:	442b      	add	r3, r5
   b568e:	6063      	str	r3, [r4, #4]
    return true;
   b5690:	2001      	movs	r0, #1
}
   b5692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5696:	f7ff ffc7 	bl	b5628 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b569a:	2800      	cmp	r0, #0
   b569c:	d1e8      	bne.n	b5670 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b569e:	e7f8      	b.n	b5692 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b56a0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b56a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b56a2:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b56a4:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b56a8:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b56aa:	4604      	mov	r4, r0
   b56ac:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b56ae:	da0b      	bge.n	b56c8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b56b0:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b56b2:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b56b4:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b56b6:	1b52      	subs	r2, r2, r5
   b56b8:	1c48      	adds	r0, r1, #1
   b56ba:	f001 fb89 	bl	b6dd0 <memmove>
    new(p) T(std::move(value));
   b56be:	557e      	strb	r6, [r7, r5]
    ++size_;
   b56c0:	6863      	ldr	r3, [r4, #4]
   b56c2:	3301      	adds	r3, #1
   b56c4:	6063      	str	r3, [r4, #4]
}
   b56c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b56c8:	3101      	adds	r1, #1
   b56ca:	f7ff ffad 	bl	b5628 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b56ce:	2800      	cmp	r0, #0
   b56d0:	d1ee      	bne.n	b56b0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b56d2:	e7f8      	b.n	b56c6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b56d4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b56d4:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b56d6:	6841      	ldr	r1, [r0, #4]
   b56d8:	f7ff bfe2 	b.w	b56a0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b56dc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b56dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b56e0:	4604      	mov	r4, r0
   b56e2:	461d      	mov	r5, r3
   b56e4:	460f      	mov	r7, r1
   b56e6:	ab01      	add	r3, sp, #4
   b56e8:	4690      	mov	r8, r2
   b56ea:	460a      	mov	r2, r1
   b56ec:	e9d0 0100 	ldrd	r0, r1, [r0]
   b56f0:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b56f4:	f7ff fb8a 	bl	b4e0c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b56f8:	1cae      	adds	r6, r5, #2
   b56fa:	6863      	ldr	r3, [r4, #4]
   b56fc:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b56fe:	f1b9 0f00 	cmp.w	r9, #0
   b5702:	d126      	bne.n	b5752 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b5704:	b328      	cbz	r0, b5752 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b5706:	4433      	add	r3, r6
   b5708:	1a1b      	subs	r3, r3, r0
   b570a:	2bff      	cmp	r3, #255	; 0xff
   b570c:	d809      	bhi.n	b5722 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b570e:	9901      	ldr	r1, [sp, #4]
   b5710:	4620      	mov	r0, r4
   b5712:	f7ff fe72 	bl	b53fa <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b5716:	6861      	ldr	r1, [r4, #4]
   b5718:	4620      	mov	r0, r4
   b571a:	4431      	add	r1, r6
   b571c:	f7ff ff94 	bl	b5648 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b5720:	b918      	cbnz	r0, b572a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b5722:	6860      	ldr	r0, [r4, #4]
}
   b5724:	b003      	add	sp, #12
   b5726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b572a:	1c6a      	adds	r2, r5, #1
   b572c:	9901      	ldr	r1, [sp, #4]
   b572e:	b2d2      	uxtb	r2, r2
   b5730:	4620      	mov	r0, r4
   b5732:	f7ff ffb5 	bl	b56a0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b5736:	9901      	ldr	r1, [sp, #4]
   b5738:	463a      	mov	r2, r7
   b573a:	3101      	adds	r1, #1
   b573c:	4620      	mov	r0, r4
   b573e:	f7ff ffaf 	bl	b56a0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b5742:	9901      	ldr	r1, [sp, #4]
   b5744:	462b      	mov	r3, r5
   b5746:	4642      	mov	r2, r8
   b5748:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b574a:	4620      	mov	r0, r4
   b574c:	f7ff ff85 	bl	b565a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b5750:	e7e7      	b.n	b5722 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b5752:	18f1      	adds	r1, r6, r3
   b5754:	29ff      	cmp	r1, #255	; 0xff
   b5756:	d8e4      	bhi.n	b5722 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b5758:	4620      	mov	r0, r4
   b575a:	f7ff ff75 	bl	b5648 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b575e:	2800      	cmp	r0, #0
   b5760:	d0df      	beq.n	b5722 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b5762:	1c69      	adds	r1, r5, #1
   b5764:	b2c9      	uxtb	r1, r1
   b5766:	4620      	mov	r0, r4
   b5768:	f7ff ffb4 	bl	b56d4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b576c:	4639      	mov	r1, r7
   b576e:	4620      	mov	r0, r4
   b5770:	f7ff ffb0 	bl	b56d4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b5774:	6861      	ldr	r1, [r4, #4]
   b5776:	462b      	mov	r3, r5
   b5778:	4642      	mov	r2, r8
   b577a:	e7e6      	b.n	b574a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b577c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b577c:	b430      	push	{r4, r5}
   b577e:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b5782:	b11a      	cbz	r2, b578c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b5784:	9502      	str	r5, [sp, #8]
}
   b5786:	bc30      	pop	{r4, r5}
   b5788:	f7ff bfa8 	b.w	b56dc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b578c:	6840      	ldr	r0, [r0, #4]
}
   b578e:	bc30      	pop	{r4, r5}
   b5790:	4770      	bx	lr

000b5792 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b5792:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b5794:	2300      	movs	r3, #0
   b5796:	e9c0 3300 	strd	r3, r3, [r0]
   b579a:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b579c:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b579e:	9300      	str	r3, [sp, #0]
   b57a0:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b57a2:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b57a6:	4619      	mov	r1, r3
   b57a8:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b57ac:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b57ae:	f7ff ffe5 	bl	b577c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b57b2:	4620      	mov	r0, r4
   b57b4:	b004      	add	sp, #16
   b57b6:	bd10      	pop	{r4, pc}

000b57b8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b57b8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b57ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b57bc:	4604      	mov	r4, r0
   b57be:	460d      	mov	r5, r1
   b57c0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b57c2:	d914      	bls.n	b57ee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b57c4:	4290      	cmp	r0, r2
   b57c6:	d213      	bcs.n	b57f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b57c8:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b57cc:	1a75      	subs	r5, r6, r1
   b57ce:	f1a1 0708 	sub.w	r7, r1, #8
   b57d2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b57d4:	42b7      	cmp	r7, r6
   b57d6:	d018      	beq.n	b580a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b57d8:	b11c      	cbz	r4, b57e2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b57da:	4631      	mov	r1, r6
   b57dc:	4620      	mov	r0, r4
   b57de:	f7ff fe90 	bl	b5502 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b57e2:	1d30      	adds	r0, r6, #4
   b57e4:	f7ff fe97 	bl	b5516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b57e8:	3e08      	subs	r6, #8
   b57ea:	3c08      	subs	r4, #8
   b57ec:	e7f2      	b.n	b57d4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b57ee:	d00c      	beq.n	b580a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b57f0:	42b5      	cmp	r5, r6
   b57f2:	d00a      	beq.n	b580a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b57f4:	b11c      	cbz	r4, b57fe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b57f6:	4629      	mov	r1, r5
   b57f8:	4620      	mov	r0, r4
   b57fa:	f7ff fe82 	bl	b5502 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b57fe:	1d28      	adds	r0, r5, #4
   b5800:	f7ff fe89 	bl	b5516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b5804:	3508      	adds	r5, #8
   b5806:	3408      	adds	r4, #8
   b5808:	e7f2      	b.n	b57f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b580a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b580c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b580c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b580e:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b5810:	6846      	ldr	r6, [r0, #4]
   b5812:	4668      	mov	r0, sp
   b5814:	f7ff fe75 	bl	b5502 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5818:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b581c:	429f      	cmp	r7, r3
   b581e:	db12      	blt.n	b5846 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b5820:	3701      	adds	r7, #1
        if (n > 0) {
   b5822:	2f00      	cmp	r7, #0
   b5824:	dd29      	ble.n	b587a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b5826:	00f8      	lsls	r0, r7, #3
   b5828:	f7ff fa62 	bl	b4cf0 <malloc>
            if (!d) {
   b582c:	4605      	mov	r5, r0
   b582e:	b1f0      	cbz	r0, b586e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b5830:	e9d4 1200 	ldrd	r1, r2, [r4]
   b5834:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b5838:	f7ff ffbe 	bl	b57b8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b583c:	6820      	ldr	r0, [r4, #0]
   b583e:	f7ff fa5f 	bl	b4d00 <free>
        data_ = d;
   b5842:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b5844:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b5846:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b5848:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b584a:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b584e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b5852:	4631      	mov	r1, r6
   b5854:	f106 0008 	add.w	r0, r6, #8
   b5858:	f7ff ffae 	bl	b57b8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b585c:	b11e      	cbz	r6, b5866 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b585e:	4669      	mov	r1, sp
   b5860:	4630      	mov	r0, r6
   b5862:	f7ff fe4e 	bl	b5502 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b5866:	6863      	ldr	r3, [r4, #4]
   b5868:	3301      	adds	r3, #1
   b586a:	6063      	str	r3, [r4, #4]
    return true;
   b586c:	2501      	movs	r5, #1
   b586e:	a801      	add	r0, sp, #4
   b5870:	f7ff fe51 	bl	b5516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5874:	4628      	mov	r0, r5
   b5876:	b003      	add	sp, #12
   b5878:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b587a:	2500      	movs	r5, #0
   b587c:	e7de      	b.n	b583c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b587e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b587e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b5880:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5884:	4605      	mov	r5, r0
   b5886:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b5888:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b588c:	42a6      	cmp	r6, r4
   b588e:	d005      	beq.n	b589c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b5890:	4639      	mov	r1, r7
   b5892:	4620      	mov	r0, r4
   b5894:	f7ff fd07 	bl	b52a6 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b5898:	b108      	cbz	r0, b589e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b589a:	b914      	cbnz	r4, b58a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b589c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b589e:	3408      	adds	r4, #8
   b58a0:	e7f4      	b.n	b588c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b58a2:	1d20      	adds	r0, r4, #4
   b58a4:	f7ff fe37 	bl	b5516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b58a8:	e9d5 3200 	ldrd	r3, r2, [r5]
   b58ac:	f104 0108 	add.w	r1, r4, #8
   b58b0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b58b4:	4620      	mov	r0, r4
   b58b6:	f7ff ff7f 	bl	b57b8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b58ba:	686b      	ldr	r3, [r5, #4]
   b58bc:	3b01      	subs	r3, #1
   b58be:	606b      	str	r3, [r5, #4]
    return true;
   b58c0:	e7ec      	b.n	b589c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b58c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b58c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b58c8:	4605      	mov	r5, r0
   b58ca:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b58cc:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b58ce:	460c      	mov	r4, r1
        WiringBleLock lk;
   b58d0:	f7ff fb26 	bl	b4f20 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b58d4:	682e      	ldr	r6, [r5, #0]
   b58d6:	1ef3      	subs	r3, r6, #3
   b58d8:	2b0d      	cmp	r3, #13
   b58da:	d83c      	bhi.n	b5956 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b58dc:	e8df f013 	tbh	[pc, r3, lsl #1]
   b58e0:	0053000e 	.word	0x0053000e
   b58e4:	00d1003b 	.word	0x00d1003b
   b58e8:	003b003b 	.word	0x003b003b
   b58ec:	003b003b 	.word	0x003b003b
   b58f0:	009b003b 	.word	0x009b003b
   b58f4:	009b009b 	.word	0x009b009b
   b58f8:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b58fc:	a804      	add	r0, sp, #16
   b58fe:	f7ff fc9d 	bl	b523c <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b5902:	9b04      	ldr	r3, [sp, #16]
   b5904:	89aa      	ldrh	r2, [r5, #12]
   b5906:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b5908:	6869      	ldr	r1, [r5, #4]
   b590a:	9804      	ldr	r0, [sp, #16]
   b590c:	3108      	adds	r1, #8
   b590e:	3002      	adds	r0, #2
   b5910:	f7ff fb20 	bl	b4f54 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b5914:	a904      	add	r1, sp, #16
   b5916:	a806      	add	r0, sp, #24
   b5918:	f7ff fdf3 	bl	b5502 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b591c:	a906      	add	r1, sp, #24
   b591e:	f104 0018 	add.w	r0, r4, #24
   b5922:	f7ff ff73 	bl	b580c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b5926:	4605      	mov	r5, r0
   b5928:	a807      	add	r0, sp, #28
   b592a:	f7ff fdf4 	bl	b5516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b592e:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b5930:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b5932:	b9b5      	cbnz	r5, b5962 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b5934:	4b5d      	ldr	r3, [pc, #372]	; (b5aac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b5936:	495e      	ldr	r1, [pc, #376]	; (b5ab0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b5938:	9300      	str	r3, [sp, #0]
   b593a:	2032      	movs	r0, #50	; 0x32
   b593c:	462b      	mov	r3, r5
   b593e:	aa06      	add	r2, sp, #24
   b5940:	9507      	str	r5, [sp, #28]
   b5942:	f7ff f911 	bl	b4b68 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b5946:	9b04      	ldr	r3, [sp, #16]
   b5948:	4629      	mov	r1, r5
   b594a:	8818      	ldrh	r0, [r3, #0]
   b594c:	f7fe ff74 	bl	b4838 <hal_ble_gap_disconnect>
   b5950:	a805      	add	r0, sp, #20
   b5952:	f7ff fde0 	bl	b5516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b5956:	a803      	add	r0, sp, #12
   b5958:	f7ff faf0 	bl	b4f3c <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b595c:	b00e      	add	sp, #56	; 0x38
   b595e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b5962:	4a54      	ldr	r2, [pc, #336]	; (b5ab4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b5964:	9200      	str	r2, [sp, #0]
   b5966:	2300      	movs	r3, #0
   b5968:	4951      	ldr	r1, [pc, #324]	; (b5ab0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b596a:	9307      	str	r3, [sp, #28]
   b596c:	aa06      	add	r2, sp, #24
   b596e:	2001      	movs	r0, #1
   b5970:	f7ff f8fa 	bl	b4b68 <log_message>
                if (impl->connectedCallback_) {
   b5974:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b5976:	2b00      	cmp	r3, #0
   b5978:	d0ea      	beq.n	b5950 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b597a:	a904      	add	r1, sp, #16
   b597c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b5980:	f7ff fe49 	bl	b5616 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b5984:	e7e4      	b.n	b5950 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b5986:	89a9      	ldrh	r1, [r5, #12]
   b5988:	4620      	mov	r0, r4
   b598a:	f7ff fc21 	bl	b51d0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b598e:	4606      	mov	r6, r0
   b5990:	2800      	cmp	r0, #0
   b5992:	d0e0      	beq.n	b5956 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b5994:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b5996:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b599a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b599e:	8029      	strh	r1, [r5, #0]
   b59a0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b59a4:	429a      	cmp	r2, r3
   b59a6:	d003      	beq.n	b59b0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b59a8:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b59ac:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b59ae:	e7f9      	b.n	b59a4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b59b0:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b59b4:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b59b8:	45b8      	cmp	r8, r7
   b59ba:	d004      	beq.n	b59c6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b59bc:	1d38      	adds	r0, r7, #4
   b59be:	f7ff fdaa 	bl	b5516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b59c2:	3708      	adds	r7, #8
   b59c4:	e7f8      	b.n	b59b8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b59c6:	2300      	movs	r3, #0
   b59c8:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b59ca:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b59ce:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b59d2:	45b8      	cmp	r8, r7
   b59d4:	d004      	beq.n	b59e0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b59d6:	1d38      	adds	r0, r7, #4
   b59d8:	f7ff fd9d 	bl	b5516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b59dc:	3708      	adds	r7, #8
   b59de:	e7f8      	b.n	b59d2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b59e0:	2300      	movs	r3, #0
   b59e2:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b59e4:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b59e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b59e8:	b123      	cbz	r3, b59f4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b59ea:	4631      	mov	r1, r6
   b59ec:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b59f0:	f7ff fe11 	bl	b5616 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b59f4:	2300      	movs	r3, #0
   b59f6:	2220      	movs	r2, #32
   b59f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b59fc:	4a2e      	ldr	r2, [pc, #184]	; (b5ab8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b59fe:	9200      	str	r2, [sp, #0]
   b5a00:	492b      	ldr	r1, [pc, #172]	; (b5ab0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b5a02:	aa06      	add	r2, sp, #24
   b5a04:	2001      	movs	r0, #1
   b5a06:	f7ff f8af 	bl	b4b68 <log_message>
                    impl->peers_.removeOne(*peer);
   b5a0a:	4631      	mov	r1, r6
   b5a0c:	f104 0018 	add.w	r0, r4, #24
   b5a10:	f7ff ff35 	bl	b587e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b5a14:	e79f      	b.n	b5956 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b5a16:	89a9      	ldrh	r1, [r5, #12]
   b5a18:	4620      	mov	r0, r4
   b5a1a:	f7ff fbd9 	bl	b51d0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b5a1e:	2800      	cmp	r0, #0
   b5a20:	d099      	beq.n	b5956 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b5a22:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b5a24:	2b00      	cmp	r3, #0
   b5a26:	d096      	beq.n	b5956 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b5a28:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b5a2a:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b5a2c:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b5a30:	d001      	beq.n	b5a36 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b5a32:	2e10      	cmp	r6, #16
   b5a34:	d117      	bne.n	b5a66 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b5a36:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b5a38:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b5a3a:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b5a3c:	2506      	movs	r5, #6
                        };
   b5a3e:	f88d 3015 	strb.w	r3, [sp, #21]
   b5a42:	9104      	str	r1, [sp, #16]
   b5a44:	f88d 2014 	strb.w	r2, [sp, #20]
   b5a48:	9006      	str	r0, [sp, #24]
   b5a4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b5a4e:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b5a50:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b5a54:	9508      	str	r5, [sp, #32]
   b5a56:	e883 0003 	stmia.w	r3, {r0, r1}
   b5a5a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b5a5c:	a906      	add	r1, sp, #24
   b5a5e:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b5a62:	4798      	blx	r3
   b5a64:	e777      	b.n	b5956 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b5a66:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b5a68:	bf01      	itttt	eq
   b5a6a:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b5a6c:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b5a6e:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b5a72:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b5a74:	bf0f      	iteee	eq
   b5a76:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b5a7a:	461a      	movne	r2, r3
   b5a7c:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b5a7e:	461d      	movne	r5, r3
   b5a80:	e7dd      	b.n	b5a3e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b5a82:	89a9      	ldrh	r1, [r5, #12]
   b5a84:	4620      	mov	r0, r4
   b5a86:	f7ff fba3 	bl	b51d0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b5a8a:	4601      	mov	r1, r0
   b5a8c:	2800      	cmp	r0, #0
   b5a8e:	f43f af62 	beq.w	b5956 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b5a92:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b5a94:	2b00      	cmp	r3, #0
   b5a96:	f43f af5e 	beq.w	b5956 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b5a9a:	686b      	ldr	r3, [r5, #4]
   b5a9c:	9306      	str	r3, [sp, #24]
   b5a9e:	aa06      	add	r2, sp, #24
   b5aa0:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b5aa2:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b5aa6:	4798      	blx	r3
   b5aa8:	e755      	b.n	b5956 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b5aaa:	bf00      	nop
   b5aac:	000b71c8 	.word	0x000b71c8
   b5ab0:	000b7147 	.word	0x000b7147
   b5ab4:	000b71ee 	.word	0x000b71ee
   b5ab8:	000b720b 	.word	0x000b720b

000b5abc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b5abc:	b513      	push	{r0, r1, r4, lr}
   b5abe:	460b      	mov	r3, r1
   b5ac0:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5ac2:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5ac6:	466c      	mov	r4, sp
   b5ac8:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5acc:	e893 0003 	ldmia.w	r3, {r0, r1}
   b5ad0:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5ad4:	e894 0003 	ldmia.w	r4, {r0, r1}
   b5ad8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b5adc:	b002      	add	sp, #8
   b5ade:	bd10      	pop	{r4, pc}

000b5ae0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b5ae0:	b538      	push	{r3, r4, r5, lr}
   b5ae2:	4605      	mov	r5, r0
   b5ae4:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b5ae6:	f7ff ffe9 	bl	b5abc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5aea:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b5aec:	68a2      	ldr	r2, [r4, #8]
   b5aee:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5af0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5af2:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5af4:	68e2      	ldr	r2, [r4, #12]
   b5af6:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5af8:	60e3      	str	r3, [r4, #12]
      }
   b5afa:	bd38      	pop	{r3, r4, r5, pc}

000b5afc <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b5afc:	b570      	push	{r4, r5, r6, lr}
   b5afe:	4604      	mov	r4, r0
   b5b00:	b08c      	sub	sp, #48	; 0x30
   b5b02:	460e      	mov	r6, r1
   b5b04:	9201      	str	r2, [sp, #4]
   b5b06:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b5b08:	f7ff fb42 	bl	b5190 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b5b0c:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b5b0e:	9901      	ldr	r1, [sp, #4]
   b5b10:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b5b14:	f000 fcfd 	bl	b6512 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b5b18:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b5b1c:	b1cd      	cbz	r5, b5b52 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b5b1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5b20:	9502      	str	r5, [sp, #8]
   b5b22:	a902      	add	r1, sp, #8
   b5b24:	a804      	add	r0, sp, #16
   b5b26:	9303      	str	r3, [sp, #12]
   b5b28:	f7ff fcb4 	bl	b5494 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b5b2c:	2300      	movs	r3, #0
	__x.swap(*this);
   b5b2e:	a908      	add	r1, sp, #32
   b5b30:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b5b32:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b5b34:	f7ff ffd4 	bl	b5ae0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b5b38:	4631      	mov	r1, r6
   b5b3a:	a808      	add	r0, sp, #32
   b5b3c:	f7ff ffd0 	bl	b5ae0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b5b40:	a808      	add	r0, sp, #32
   b5b42:	f7ff f9af 	bl	b4ea4 <_ZNSt14_Function_baseD1Ev>
   b5b46:	a804      	add	r0, sp, #16
   b5b48:	f7ff f9ac 	bl	b4ea4 <_ZNSt14_Function_baseD1Ev>
    }
   b5b4c:	4620      	mov	r0, r4
   b5b4e:	b00c      	add	sp, #48	; 0x30
   b5b50:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b5b52:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b5b54:	e7ea      	b.n	b5b2c <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b5b58 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b5b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5b5c:	b087      	sub	sp, #28
   b5b5e:	461d      	mov	r5, r3
   b5b60:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b5b64:	4680      	mov	r8, r0
   b5b66:	468b      	mov	fp, r1
   b5b68:	4692      	mov	sl, r2
   b5b6a:	9912      	ldr	r1, [sp, #72]	; 0x48
   b5b6c:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5b6e:	2200      	movs	r2, #0
   b5b70:	2068      	movs	r0, #104	; 0x68
   b5b72:	9102      	str	r1, [sp, #8]
   b5b74:	9204      	str	r2, [sp, #16]
   b5b76:	f7fe fa8c 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b5b7a:	1e06      	subs	r6, r0, #0
   b5b7c:	f106 090c 	add.w	r9, r6, #12
   b5b80:	d018      	beq.n	b5bb4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b5b82:	2201      	movs	r2, #1
	: _M_impl(__a)
   b5b84:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b5b86:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b5b8a:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b5b8c:	4a15      	ldr	r2, [pc, #84]	; (b5be4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b5b8e:	f847 2b20 	str.w	r2, [r7], #32
   b5b92:	9b03      	ldr	r3, [sp, #12]
   b5b94:	9100      	str	r1, [sp, #0]
   b5b96:	465a      	mov	r2, fp
   b5b98:	4651      	mov	r1, sl
   b5b9a:	4648      	mov	r0, r9
   b5b9c:	f7ff ffae 	bl	b5afc <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b5ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5ba2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b5ba4:	682b      	ldr	r3, [r5, #0]
   b5ba6:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b5ba8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5baa:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b5bae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5bb0:	6823      	ldr	r3, [r4, #0]
   b5bb2:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b5bb4:	a904      	add	r1, sp, #16
   b5bb6:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b5bb8:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b5bbc:	f7ff fd1a 	bl	b55f4 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b5bc0:	a805      	add	r0, sp, #20
   b5bc2:	f7ff fca8 	bl	b5516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b5bc6:	f8d8 3000 	ldr.w	r3, [r8]
   b5bca:	b93b      	cbnz	r3, b5bdc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b5bcc:	4a06      	ldr	r2, [pc, #24]	; (b5be8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b5bce:	4907      	ldr	r1, [pc, #28]	; (b5bec <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b5bd0:	200a      	movs	r0, #10
}
   b5bd2:	b007      	add	sp, #28
   b5bd4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b5bd8:	f7fe bfbe 	b.w	b4b58 <panic_>
}
   b5bdc:	b007      	add	sp, #28
   b5bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5be2:	bf00      	nop
   b5be4:	000b7284 	.word	0x000b7284
   b5be8:	000b48c9 	.word	0x000b48c9
   b5bec:	000b7130 	.word	0x000b7130

000b5bf0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b5bf0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5bf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5bf4:	4604      	mov	r4, r0
   b5bf6:	460d      	mov	r5, r1
   b5bf8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5bfa:	d914      	bls.n	b5c26 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b5bfc:	4290      	cmp	r0, r2
   b5bfe:	d213      	bcs.n	b5c28 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b5c00:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b5c04:	1a75      	subs	r5, r6, r1
   b5c06:	f1a1 0708 	sub.w	r7, r1, #8
   b5c0a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5c0c:	42b7      	cmp	r7, r6
   b5c0e:	d018      	beq.n	b5c42 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b5c10:	b11c      	cbz	r4, b5c1a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b5c12:	4631      	mov	r1, r6
   b5c14:	4620      	mov	r0, r4
   b5c16:	f7ff fc6a 	bl	b54ee <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b5c1a:	1d30      	adds	r0, r6, #4
   b5c1c:	f7ff fc7b 	bl	b5516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b5c20:	3e08      	subs	r6, #8
   b5c22:	3c08      	subs	r4, #8
   b5c24:	e7f2      	b.n	b5c0c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b5c26:	d00c      	beq.n	b5c42 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b5c28:	42b5      	cmp	r5, r6
   b5c2a:	d00a      	beq.n	b5c42 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b5c2c:	b11c      	cbz	r4, b5c36 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b5c2e:	4629      	mov	r1, r5
   b5c30:	4620      	mov	r0, r4
   b5c32:	f7ff fc5c 	bl	b54ee <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b5c36:	1d28      	adds	r0, r5, #4
   b5c38:	f7ff fc6d 	bl	b5516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b5c3c:	3508      	adds	r5, #8
   b5c3e:	3408      	adds	r4, #8
   b5c40:	e7f2      	b.n	b5c28 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b5c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5c44 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b5c44:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b5c46:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b5c48:	4605      	mov	r5, r0
        if (n > 0) {
   b5c4a:	dd11      	ble.n	b5c70 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b5c4c:	00f0      	lsls	r0, r6, #3
   b5c4e:	f7ff f84f 	bl	b4cf0 <malloc>
            if (!d) {
   b5c52:	4604      	mov	r4, r0
   b5c54:	b158      	cbz	r0, b5c6e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b5c56:	e9d5 1200 	ldrd	r1, r2, [r5]
   b5c5a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b5c5e:	f7ff ffc7 	bl	b5bf0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b5c62:	6828      	ldr	r0, [r5, #0]
   b5c64:	f7ff f84c 	bl	b4d00 <free>
        data_ = d;
   b5c68:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b5c6a:	60ae      	str	r6, [r5, #8]
        return true;
   b5c6c:	2001      	movs	r0, #1
    }
   b5c6e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b5c70:	2400      	movs	r4, #0
   b5c72:	e7f6      	b.n	b5c62 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b5c74 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5c74:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5c76:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b5c78:	6845      	ldr	r5, [r0, #4]
   b5c7a:	4668      	mov	r0, sp
   b5c7c:	f7ff fc37 	bl	b54ee <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5c80:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b5c84:	4299      	cmp	r1, r3
   b5c86:	da10      	bge.n	b5caa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b5c88:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b5c8a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5c8c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b5c90:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b5c94:	4629      	mov	r1, r5
   b5c96:	f105 0008 	add.w	r0, r5, #8
   b5c9a:	f7ff ffa9 	bl	b5bf0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b5c9e:	b98d      	cbnz	r5, b5cc4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b5ca0:	6863      	ldr	r3, [r4, #4]
   b5ca2:	3301      	adds	r3, #1
   b5ca4:	6063      	str	r3, [r4, #4]
    return true;
   b5ca6:	2601      	movs	r6, #1
   b5ca8:	e006      	b.n	b5cb8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5caa:	3101      	adds	r1, #1
   b5cac:	4620      	mov	r0, r4
   b5cae:	f7ff ffc9 	bl	b5c44 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b5cb2:	4606      	mov	r6, r0
   b5cb4:	2800      	cmp	r0, #0
   b5cb6:	d1e7      	bne.n	b5c88 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b5cb8:	a801      	add	r0, sp, #4
   b5cba:	f7ff fc2c 	bl	b5516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5cbe:	4630      	mov	r0, r6
   b5cc0:	b002      	add	sp, #8
   b5cc2:	bd70      	pop	{r4, r5, r6, pc}
   b5cc4:	4669      	mov	r1, sp
   b5cc6:	4628      	mov	r0, r5
   b5cc8:	f7ff fc11 	bl	b54ee <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b5ccc:	e7e8      	b.n	b5ca0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b5cce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b5cce:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5cd2:	4604      	mov	r4, r0
   b5cd4:	460d      	mov	r5, r1
   b5cd6:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5cd8:	d914      	bls.n	b5d04 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b5cda:	4290      	cmp	r0, r2
   b5cdc:	d213      	bcs.n	b5d06 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b5cde:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b5ce2:	1a75      	subs	r5, r6, r1
   b5ce4:	f1a1 0708 	sub.w	r7, r1, #8
   b5ce8:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5cea:	42b7      	cmp	r7, r6
   b5cec:	d018      	beq.n	b5d20 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b5cee:	b11c      	cbz	r4, b5cf8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b5cf0:	4631      	mov	r1, r6
   b5cf2:	4620      	mov	r0, r4
   b5cf4:	f7ff fbed 	bl	b54d2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b5cf8:	1d30      	adds	r0, r6, #4
   b5cfa:	f7ff fc0c 	bl	b5516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b5cfe:	3e08      	subs	r6, #8
   b5d00:	3c08      	subs	r4, #8
   b5d02:	e7f2      	b.n	b5cea <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b5d04:	d00c      	beq.n	b5d20 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b5d06:	42b5      	cmp	r5, r6
   b5d08:	d00a      	beq.n	b5d20 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b5d0a:	b11c      	cbz	r4, b5d14 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b5d0c:	4629      	mov	r1, r5
   b5d0e:	4620      	mov	r0, r4
   b5d10:	f7ff fbdf 	bl	b54d2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b5d14:	1d28      	adds	r0, r5, #4
   b5d16:	f7ff fbfe 	bl	b5516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b5d1a:	3508      	adds	r5, #8
   b5d1c:	3408      	adds	r4, #8
   b5d1e:	e7f2      	b.n	b5d06 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b5d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5d22 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b5d22:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b5d24:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b5d26:	4605      	mov	r5, r0
        if (n > 0) {
   b5d28:	dd11      	ble.n	b5d4e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b5d2a:	00f0      	lsls	r0, r6, #3
   b5d2c:	f7fe ffe0 	bl	b4cf0 <malloc>
            if (!d) {
   b5d30:	4604      	mov	r4, r0
   b5d32:	b158      	cbz	r0, b5d4c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b5d34:	e9d5 1200 	ldrd	r1, r2, [r5]
   b5d38:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b5d3c:	f7ff ffc7 	bl	b5cce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b5d40:	6828      	ldr	r0, [r5, #0]
   b5d42:	f7fe ffdd 	bl	b4d00 <free>
        data_ = d;
   b5d46:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b5d48:	60ae      	str	r6, [r5, #8]
        return true;
   b5d4a:	2001      	movs	r0, #1
    }
   b5d4c:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b5d4e:	2400      	movs	r4, #0
   b5d50:	e7f6      	b.n	b5d40 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b5d52 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5d52:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5d54:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b5d56:	6845      	ldr	r5, [r0, #4]
   b5d58:	4668      	mov	r0, sp
   b5d5a:	f7ff fbba 	bl	b54d2 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5d5e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b5d62:	4299      	cmp	r1, r3
   b5d64:	da10      	bge.n	b5d88 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b5d66:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b5d68:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5d6a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b5d6e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b5d72:	4629      	mov	r1, r5
   b5d74:	f105 0008 	add.w	r0, r5, #8
   b5d78:	f7ff ffa9 	bl	b5cce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b5d7c:	b98d      	cbnz	r5, b5da2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b5d7e:	6863      	ldr	r3, [r4, #4]
   b5d80:	3301      	adds	r3, #1
   b5d82:	6063      	str	r3, [r4, #4]
    return true;
   b5d84:	2601      	movs	r6, #1
   b5d86:	e006      	b.n	b5d96 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5d88:	3101      	adds	r1, #1
   b5d8a:	4620      	mov	r0, r4
   b5d8c:	f7ff ffc9 	bl	b5d22 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b5d90:	4606      	mov	r6, r0
   b5d92:	2800      	cmp	r0, #0
   b5d94:	d1e7      	bne.n	b5d66 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b5d96:	a801      	add	r0, sp, #4
   b5d98:	f7ff fbbd 	bl	b5516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5d9c:	4630      	mov	r0, r6
   b5d9e:	b002      	add	sp, #8
   b5da0:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b5da2:	4669      	mov	r1, sp
   b5da4:	4628      	mov	r0, r5
   b5da6:	f7ff fb94 	bl	b54d2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b5daa:	e7e8      	b.n	b5d7e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b5dac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b5dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5db0:	4617      	mov	r7, r2
   b5db2:	b0a1      	sub	sp, #132	; 0x84
   b5db4:	4680      	mov	r8, r0
    WiringBleLock lk;
   b5db6:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b5db8:	460e      	mov	r6, r1
    WiringBleLock lk;
   b5dba:	f7ff f8b1 	bl	b4f20 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b5dbe:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b5dc0:	7923      	ldrb	r3, [r4, #4]
   b5dc2:	b953      	cbnz	r3, b5dda <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b5dc4:	4639      	mov	r1, r7
   b5dc6:	4640      	mov	r0, r8
   b5dc8:	f7ff fb83 	bl	b54d2 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b5dcc:	a80a      	add	r0, sp, #40	; 0x28
   b5dce:	f7ff f8b5 	bl	b4f3c <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b5dd2:	4640      	mov	r0, r8
   b5dd4:	b021      	add	sp, #132	; 0x84
   b5dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b5dda:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b5ddc:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b5de0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b5de4:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b5de6:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b5dea:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b5dee:	9b03      	ldr	r3, [sp, #12]
   b5df0:	429d      	cmp	r5, r3
   b5df2:	d021      	beq.n	b5e38 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b5df4:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b5df8:	4658      	mov	r0, fp
   b5dfa:	f109 0114 	add.w	r1, r9, #20
   b5dfe:	f7ff f93c 	bl	b507a <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b5e02:	b1b8      	cbz	r0, b5e34 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b5e04:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b5e08:	4650      	mov	r0, sl
   b5e0a:	f7ff f936 	bl	b507a <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b5e0e:	b188      	cbz	r0, b5e34 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b5e10:	6823      	ldr	r3, [r4, #0]
   b5e12:	f8d9 2000 	ldr.w	r2, [r9]
   b5e16:	4053      	eors	r3, r2
   b5e18:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b5e1c:	d10a      	bne.n	b5e34 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b5e1e:	2220      	movs	r2, #32
   b5e20:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b5e24:	4a5e      	ldr	r2, [pc, #376]	; (b5fa0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b5e26:	9200      	str	r2, [sp, #0]
   b5e28:	aa15      	add	r2, sp, #84	; 0x54
   b5e2a:	495e      	ldr	r1, [pc, #376]	; (b5fa4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b5e2c:	2032      	movs	r0, #50	; 0x32
   b5e2e:	f7fe fe9b 	bl	b4b68 <log_message>
   b5e32:	e7c7      	b.n	b5dc4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b5e34:	3508      	adds	r5, #8
   b5e36:	e7da      	b.n	b5dee <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b5e38:	4650      	mov	r0, sl
   b5e3a:	f7ff f8ef 	bl	b501c <_ZNK8particle7BleUuid7isValidEv>
   b5e3e:	b960      	cbnz	r0, b5e5a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b5e40:	4959      	ldr	r1, [pc, #356]	; (b5fa8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b5e42:	2201      	movs	r2, #1
   b5e44:	a815      	add	r0, sp, #84	; 0x54
   b5e46:	ad15      	add	r5, sp, #84	; 0x54
   b5e48:	f7ff f8c0 	bl	b4fcc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b5e4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5e4e:	46d4      	mov	ip, sl
   b5e50:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5e54:	682b      	ldr	r3, [r5, #0]
   b5e56:	f8cc 3000 	str.w	r3, [ip]
   b5e5a:	6833      	ldr	r3, [r6, #0]
   b5e5c:	e9d3 5300 	ldrd	r5, r3, [r3]
   b5e60:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b5e64:	455d      	cmp	r5, fp
   b5e66:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b5e68:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b5e6a:	d06e      	beq.n	b5f4a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b5e6c:	f855 0b08 	ldr.w	r0, [r5], #8
   b5e70:	f7ff f903 	bl	b507a <_ZNK8particle7BleUuideqERKS0_>
   b5e74:	2800      	cmp	r0, #0
   b5e76:	d0f5      	beq.n	b5e64 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b5e78:	f104 0a14 	add.w	sl, r4, #20
   b5e7c:	4650      	mov	r0, sl
   b5e7e:	f7ff f8cd 	bl	b501c <_ZNK8particle7BleUuid7isValidEv>
   b5e82:	b988      	cbnz	r0, b5ea8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b5e84:	4b49      	ldr	r3, [pc, #292]	; (b5fac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b5e86:	4948      	ldr	r1, [pc, #288]	; (b5fa8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b5e88:	881a      	ldrh	r2, [r3, #0]
   b5e8a:	3201      	adds	r2, #1
   b5e8c:	b292      	uxth	r2, r2
   b5e8e:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b5e90:	a815      	add	r0, sp, #84	; 0x54
   b5e92:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b5e94:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b5e96:	f7ff f8b8 	bl	b500a <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b5e9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5e9c:	46d4      	mov	ip, sl
   b5e9e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5ea2:	682b      	ldr	r3, [r5, #0]
   b5ea4:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b5ea8:	4b41      	ldr	r3, [pc, #260]	; (b5fb0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b5eaa:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b5eac:	2228      	movs	r2, #40	; 0x28
   b5eae:	2100      	movs	r1, #0
   b5eb0:	a816      	add	r0, sp, #88	; 0x58
   b5eb2:	f000 ffa7 	bl	b6e04 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b5eb6:	4651      	mov	r1, sl
   b5eb8:	a804      	add	r0, sp, #16
   b5eba:	f7ff f8c1 	bl	b5040 <_ZN8particle7BleUuid7halUUIDEv>
   b5ebe:	ab04      	add	r3, sp, #16
   b5ec0:	aa18      	add	r2, sp, #96	; 0x60
   b5ec2:	f10d 0c20 	add.w	ip, sp, #32
   b5ec6:	6818      	ldr	r0, [r3, #0]
   b5ec8:	6859      	ldr	r1, [r3, #4]
   b5eca:	4615      	mov	r5, r2
   b5ecc:	c503      	stmia	r5!, {r0, r1}
   b5ece:	3308      	adds	r3, #8
   b5ed0:	4563      	cmp	r3, ip
   b5ed2:	462a      	mov	r2, r5
   b5ed4:	d1f7      	bne.n	b5ec6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b5ed6:	6818      	ldr	r0, [r3, #0]
   b5ed8:	6028      	str	r0, [r5, #0]
    return *this;
}

template<typename T>
inline typename std::underlying_type_t<T> particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::value() const {
    return value_;
   b5eda:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b5edc:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b5ee0:	f8d9 3000 	ldr.w	r3, [r9]
   b5ee4:	8a9b      	ldrh	r3, [r3, #20]
   b5ee6:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b5eea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b5eec:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b5eee:	4b31      	ldr	r3, [pc, #196]	; (b5fb4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b5ef0:	2200      	movs	r2, #0
   b5ef2:	1da1      	adds	r1, r4, #6
   b5ef4:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b5ef6:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b5efa:	f7fe fcb1 	bl	b4860 <hal_ble_gatt_server_add_characteristic>
   b5efe:	2800      	cmp	r0, #0
   b5f00:	f47f af60 	bne.w	b5dc4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b5f04:	2301      	movs	r3, #1
   b5f06:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b5f08:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b5f0a:	4639      	mov	r1, r7
        return characteristics_;
   b5f0c:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b5f0e:	a80d      	add	r0, sp, #52	; 0x34
   b5f10:	f7ff fadf 	bl	b54d2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b5f14:	4620      	mov	r0, r4
   b5f16:	a90d      	add	r1, sp, #52	; 0x34
   b5f18:	f7ff ff1b 	bl	b5d52 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b5f1c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b5f1e:	a80e      	add	r0, sp, #56	; 0x38
   b5f20:	f7ff faf9 	bl	b5516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5f24:	2c00      	cmp	r4, #0
   b5f26:	f47f af4d 	bne.w	b5dc4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b5f2a:	2320      	movs	r3, #32
   b5f2c:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b5f30:	4b21      	ldr	r3, [pc, #132]	; (b5fb8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b5f32:	9300      	str	r3, [sp, #0]
   b5f34:	aa0d      	add	r2, sp, #52	; 0x34
   b5f36:	4623      	mov	r3, r4
   b5f38:	e777      	b.n	b5e2a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b5f3a:	4639      	mov	r1, r7
   b5f3c:	4640      	mov	r0, r8
   b5f3e:	f7ff fac8 	bl	b54d2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b5f42:	a80c      	add	r0, sp, #48	; 0x30
   b5f44:	f7ff fae7 	bl	b5516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5f48:	e740      	b.n	b5dcc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b5f4a:	a80b      	add	r0, sp, #44	; 0x2c
   b5f4c:	f7ff f952 	bl	b51f4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b5f50:	4651      	mov	r1, sl
   b5f52:	a815      	add	r0, sp, #84	; 0x54
   b5f54:	f7ff f874 	bl	b5040 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b5f58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b5f5a:	2300      	movs	r3, #0
   b5f5c:	3214      	adds	r2, #20
   b5f5e:	a915      	add	r1, sp, #84	; 0x54
   b5f60:	2001      	movs	r0, #1
   b5f62:	f7fe fc73 	bl	b484c <hal_ble_gatt_server_add_service>
   b5f66:	2800      	cmp	r0, #0
   b5f68:	d1e7      	bne.n	b5f3a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b5f6a:	6835      	ldr	r5, [r6, #0]
   b5f6c:	a90b      	add	r1, sp, #44	; 0x2c
   b5f6e:	a80d      	add	r0, sp, #52	; 0x34
   b5f70:	f7ff fabd 	bl	b54ee <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b5f74:	4628      	mov	r0, r5
   b5f76:	a90d      	add	r1, sp, #52	; 0x34
   b5f78:	f7ff fe7c 	bl	b5c74 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b5f7c:	4605      	mov	r5, r0
   b5f7e:	a80e      	add	r0, sp, #56	; 0x38
   b5f80:	f7ff fac9 	bl	b5516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5f84:	2d00      	cmp	r5, #0
   b5f86:	d0d8      	beq.n	b5f3a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b5f88:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b5f8a:	6853      	ldr	r3, [r2, #4]
   b5f8c:	6812      	ldr	r2, [r2, #0]
   b5f8e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b5f92:	3b01      	subs	r3, #1
   b5f94:	a80c      	add	r0, sp, #48	; 0x30
   b5f96:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b5f9a:	f7ff fabc 	bl	b5516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5f9e:	e76b      	b.n	b5e78 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b5fa0:	000b722a 	.word	0x000b722a
   b5fa4:	000b7147 	.word	0x000b7147
   b5fa8:	000b72ee 	.word	0x000b72ee
   b5fac:	2003e6b0 	.word	0x2003e6b0
   b5fb0:	002c0003 	.word	0x002c0003
   b5fb4:	000b538d 	.word	0x000b538d
   b5fb8:	000b7255 	.word	0x000b7255

000b5fbc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b5fbc:	4802      	ldr	r0, [pc, #8]	; (b5fc8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5fbe:	2300      	movs	r3, #0
   b5fc0:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b5fc2:	f7fe bc61 	b.w	b4888 <os_mutex_recursive_create>
   b5fc6:	bf00      	nop
   b5fc8:	2003e6b4 	.word	0x2003e6b4

000b5fcc <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   b5fcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   b5fce:	230c      	movs	r3, #12
   b5fd0:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   b5fd4:	6803      	ldr	r3, [r0, #0]
   b5fd6:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   b5fda:	7a03      	ldrb	r3, [r0, #8]
   b5fdc:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   b5fe0:	6843      	ldr	r3, [r0, #4]
   b5fe2:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   b5fe4:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   b5fe6:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   b5fe8:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b5fec:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   b5fee:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   b5ff2:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b5ff6:	f7fe fe13 	bl	b4c20 <spark_cloud_disconnect>
}
   b5ffa:	b005      	add	sp, #20
   b5ffc:	f85d fb04 	ldr.w	pc, [sp], #4

000b6000 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6000:	2200      	movs	r2, #0
   b6002:	6840      	ldr	r0, [r0, #4]
   b6004:	4611      	mov	r1, r2
   b6006:	f7fe be4b 	b.w	b4ca0 <network_listening>

000b600a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b600a:	2200      	movs	r2, #0
   b600c:	6840      	ldr	r0, [r0, #4]
   b600e:	4611      	mov	r1, r2
   b6010:	f7fe be56 	b.w	b4cc0 <network_get_listen_timeout>

000b6014 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6014:	6840      	ldr	r0, [r0, #4]
   b6016:	2200      	movs	r2, #0
   b6018:	f7fe be4a 	b.w	b4cb0 <network_set_listen_timeout>

000b601c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b601c:	6840      	ldr	r0, [r0, #4]
   b601e:	2200      	movs	r2, #0
   b6020:	f081 0101 	eor.w	r1, r1, #1
   b6024:	f7fe be34 	b.w	b4c90 <network_listen>

000b6028 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6028:	2300      	movs	r3, #0
   b602a:	6840      	ldr	r0, [r0, #4]
   b602c:	461a      	mov	r2, r3
   b602e:	4619      	mov	r1, r3
   b6030:	f7fe be26 	b.w	b4c80 <network_off>

000b6034 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6034:	2300      	movs	r3, #0
   b6036:	6840      	ldr	r0, [r0, #4]
   b6038:	461a      	mov	r2, r3
   b603a:	4619      	mov	r1, r3
   b603c:	f7fe be18 	b.w	b4c70 <network_on>

000b6040 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6040:	2200      	movs	r2, #0
   b6042:	6840      	ldr	r0, [r0, #4]
   b6044:	4611      	mov	r1, r2
   b6046:	f7fe be0b 	b.w	b4c60 <network_ready>

000b604a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b604a:	2200      	movs	r2, #0
   b604c:	6840      	ldr	r0, [r0, #4]
   b604e:	4611      	mov	r1, r2
   b6050:	f7fe bdf6 	b.w	b4c40 <network_connecting>

000b6054 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6054:	6840      	ldr	r0, [r0, #4]
   b6056:	2200      	movs	r2, #0
   b6058:	2102      	movs	r1, #2
   b605a:	f7fe bdf9 	b.w	b4c50 <network_disconnect>

000b605e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b605e:	2300      	movs	r3, #0
   b6060:	6840      	ldr	r0, [r0, #4]
   b6062:	461a      	mov	r2, r3
   b6064:	f7fe bde4 	b.w	b4c30 <network_connect>

000b6068 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6068:	4b02      	ldr	r3, [pc, #8]	; (b6074 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b606a:	2203      	movs	r2, #3
   b606c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b606e:	4a02      	ldr	r2, [pc, #8]	; (b6078 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6070:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b6072:	4770      	bx	lr
   b6074:	2003e6bc 	.word	0x2003e6bc
   b6078:	000b7318 	.word	0x000b7318

000b607c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b607c:	4770      	bx	lr

000b607e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b607e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6080:	4606      	mov	r6, r0
   b6082:	4615      	mov	r5, r2
   b6084:	460c      	mov	r4, r1
   b6086:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6088:	42bc      	cmp	r4, r7
   b608a:	d006      	beq.n	b609a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b608c:	6833      	ldr	r3, [r6, #0]
   b608e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6092:	689b      	ldr	r3, [r3, #8]
   b6094:	4630      	mov	r0, r6
   b6096:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6098:	e7f6      	b.n	b6088 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b609a:	4628      	mov	r0, r5
   b609c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b609e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b609e:	7c00      	ldrb	r0, [r0, #16]
   b60a0:	2200      	movs	r2, #0
   b60a2:	f7fe bc61 	b.w	b4968 <hal_i2c_write>

000b60a6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b60a6:	7c00      	ldrb	r0, [r0, #16]
   b60a8:	2100      	movs	r1, #0
   b60aa:	f7fe bc65 	b.w	b4978 <hal_i2c_available>

000b60ae <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b60ae:	7c00      	ldrb	r0, [r0, #16]
   b60b0:	2100      	movs	r1, #0
   b60b2:	f7fe bc69 	b.w	b4988 <hal_i2c_read>

000b60b6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b60b6:	7c00      	ldrb	r0, [r0, #16]
   b60b8:	2100      	movs	r1, #0
   b60ba:	f7fe bc6d 	b.w	b4998 <hal_i2c_peek>

000b60be <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b60be:	7c00      	ldrb	r0, [r0, #16]
   b60c0:	2100      	movs	r1, #0
   b60c2:	f7fe bc71 	b.w	b49a8 <hal_i2c_flush>

000b60c6 <_ZN7TwoWireD0Ev>:
   b60c6:	b510      	push	{r4, lr}
   b60c8:	2114      	movs	r1, #20
   b60ca:	4604      	mov	r4, r0
   b60cc:	f7fd ffe5 	bl	b409a <_ZdlPvj>
   b60d0:	4620      	mov	r0, r4
   b60d2:	bd10      	pop	{r4, pc}

000b60d4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b60d4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b60d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b60da:	4604      	mov	r4, r0
   b60dc:	4608      	mov	r0, r1
   b60de:	2100      	movs	r1, #0
   b60e0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b60e4:	4b03      	ldr	r3, [pc, #12]	; (b60f4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b60e6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b60e8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b60ea:	4611      	mov	r1, r2
   b60ec:	f7fe fc6c 	bl	b49c8 <hal_i2c_init>
}
   b60f0:	4620      	mov	r0, r4
   b60f2:	bd10      	pop	{r4, pc}
   b60f4:	000b7354 	.word	0x000b7354

000b60f8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b60f8:	4770      	bx	lr

000b60fa <_ZN9IPAddressD0Ev>:
   b60fa:	b510      	push	{r4, lr}
   b60fc:	2118      	movs	r1, #24
   b60fe:	4604      	mov	r4, r0
   b6100:	f7fd ffcb 	bl	b409a <_ZdlPvj>
   b6104:	4620      	mov	r0, r4
   b6106:	bd10      	pop	{r4, pc}

000b6108 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6108:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b610a:	7d03      	ldrb	r3, [r0, #20]
   b610c:	2b06      	cmp	r3, #6
{
   b610e:	b08d      	sub	sp, #52	; 0x34
   b6110:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6112:	f100 0704 	add.w	r7, r0, #4
   b6116:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b611a:	d012      	beq.n	b6142 <_ZNK9IPAddress7printToER5Print+0x3a>
   b611c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6120:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6124:	220a      	movs	r2, #10
   b6126:	4630      	mov	r0, r6
   b6128:	f000 f943 	bl	b63b2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b612c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b612e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6130:	d019      	beq.n	b6166 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6132:	2c00      	cmp	r4, #0
   b6134:	d0f4      	beq.n	b6120 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6136:	212e      	movs	r1, #46	; 0x2e
   b6138:	4630      	mov	r0, r6
   b613a:	f000 f937 	bl	b63ac <_ZN5Print5printEc>
   b613e:	4404      	add	r4, r0
   b6140:	e7ee      	b.n	b6120 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6142:	232f      	movs	r3, #47	; 0x2f
   b6144:	466a      	mov	r2, sp
   b6146:	4639      	mov	r1, r7
   b6148:	200a      	movs	r0, #10
		buf[0] = 0;
   b614a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b614e:	f7fe fc43 	bl	b49d8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6152:	4668      	mov	r0, sp
   b6154:	f000 fe9e 	bl	b6e94 <strlen>
   b6158:	6833      	ldr	r3, [r6, #0]
   b615a:	4602      	mov	r2, r0
   b615c:	68db      	ldr	r3, [r3, #12]
   b615e:	4669      	mov	r1, sp
   b6160:	4630      	mov	r0, r6
   b6162:	4798      	blx	r3
   b6164:	4604      	mov	r4, r0
    }
    return n;
}
   b6166:	4620      	mov	r0, r4
   b6168:	b00d      	add	sp, #52	; 0x34
   b616a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b616c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b616c:	b510      	push	{r4, lr}
   b616e:	4b05      	ldr	r3, [pc, #20]	; (b6184 <_ZN9IPAddressC1Ev+0x18>)
   b6170:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6172:	2211      	movs	r2, #17
   b6174:	f840 3b04 	str.w	r3, [r0], #4
   b6178:	2100      	movs	r1, #0
   b617a:	f000 fe43 	bl	b6e04 <memset>
}
   b617e:	4620      	mov	r0, r4
   b6180:	bd10      	pop	{r4, pc}
   b6182:	bf00      	nop
   b6184:	000b737c 	.word	0x000b737c

000b6188 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6188:	4603      	mov	r3, r0
   b618a:	4a07      	ldr	r2, [pc, #28]	; (b61a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b618c:	b510      	push	{r4, lr}
   b618e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6192:	f101 0210 	add.w	r2, r1, #16
   b6196:	f851 4b04 	ldr.w	r4, [r1], #4
   b619a:	f843 4b04 	str.w	r4, [r3], #4
   b619e:	4291      	cmp	r1, r2
   b61a0:	d1f9      	bne.n	b6196 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b61a2:	780a      	ldrb	r2, [r1, #0]
   b61a4:	701a      	strb	r2, [r3, #0]
}
   b61a6:	bd10      	pop	{r4, pc}
   b61a8:	000b737c 	.word	0x000b737c

000b61ac <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b61ac:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b61ae:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b61b2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b61b6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b61ba:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b61be:	2304      	movs	r3, #4
   b61c0:	6041      	str	r1, [r0, #4]
   b61c2:	7503      	strb	r3, [r0, #20]
}
   b61c4:	bd10      	pop	{r4, pc}
	...

000b61c8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b61c8:	b507      	push	{r0, r1, r2, lr}
   b61ca:	4b06      	ldr	r3, [pc, #24]	; (b61e4 <_ZN9IPAddressC1EPKh+0x1c>)
   b61cc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b61ce:	78cb      	ldrb	r3, [r1, #3]
   b61d0:	9300      	str	r3, [sp, #0]
   b61d2:	788b      	ldrb	r3, [r1, #2]
   b61d4:	784a      	ldrb	r2, [r1, #1]
   b61d6:	7809      	ldrb	r1, [r1, #0]
   b61d8:	f7ff ffe8 	bl	b61ac <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b61dc:	b003      	add	sp, #12
   b61de:	f85d fb04 	ldr.w	pc, [sp], #4
   b61e2:	bf00      	nop
   b61e4:	000b737c 	.word	0x000b737c

000b61e8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b61e8:	4b01      	ldr	r3, [pc, #4]	; (b61f0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b61ea:	4a02      	ldr	r2, [pc, #8]	; (b61f4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b61ec:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b61ee:	4770      	bx	lr
   b61f0:	2003e6c4 	.word	0x2003e6c4
   b61f4:	000b7388 	.word	0x000b7388

000b61f8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b61f8:	2300      	movs	r3, #0
   b61fa:	6840      	ldr	r0, [r0, #4]
   b61fc:	461a      	mov	r2, r3
   b61fe:	f7fe bd17 	b.w	b4c30 <network_connect>

000b6202 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6202:	6840      	ldr	r0, [r0, #4]
   b6204:	2200      	movs	r2, #0
   b6206:	2102      	movs	r1, #2
   b6208:	f7fe bd22 	b.w	b4c50 <network_disconnect>

000b620c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b620c:	2200      	movs	r2, #0
   b620e:	6840      	ldr	r0, [r0, #4]
   b6210:	4611      	mov	r1, r2
   b6212:	f7fe bd15 	b.w	b4c40 <network_connecting>

000b6216 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6216:	2200      	movs	r2, #0
   b6218:	6840      	ldr	r0, [r0, #4]
   b621a:	4611      	mov	r1, r2
   b621c:	f7fe bd20 	b.w	b4c60 <network_ready>

000b6220 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6220:	2300      	movs	r3, #0
   b6222:	6840      	ldr	r0, [r0, #4]
   b6224:	461a      	mov	r2, r3
   b6226:	4619      	mov	r1, r3
   b6228:	f7fe bd22 	b.w	b4c70 <network_on>

000b622c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b622c:	2300      	movs	r3, #0
   b622e:	6840      	ldr	r0, [r0, #4]
   b6230:	461a      	mov	r2, r3
   b6232:	4619      	mov	r1, r3
   b6234:	f7fe bd24 	b.w	b4c80 <network_off>

000b6238 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6238:	6840      	ldr	r0, [r0, #4]
   b623a:	2100      	movs	r1, #0
   b623c:	f7fe bd48 	b.w	b4cd0 <network_is_on>

000b6240 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6240:	6840      	ldr	r0, [r0, #4]
   b6242:	2100      	movs	r1, #0
   b6244:	f7fe bd4c 	b.w	b4ce0 <network_is_off>

000b6248 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6248:	6840      	ldr	r0, [r0, #4]
   b624a:	2200      	movs	r2, #0
   b624c:	f081 0101 	eor.w	r1, r1, #1
   b6250:	f7fe bd1e 	b.w	b4c90 <network_listen>

000b6254 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6254:	6840      	ldr	r0, [r0, #4]
   b6256:	2200      	movs	r2, #0
   b6258:	f7fe bd2a 	b.w	b4cb0 <network_set_listen_timeout>

000b625c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b625c:	2200      	movs	r2, #0
   b625e:	6840      	ldr	r0, [r0, #4]
   b6260:	4611      	mov	r1, r2
   b6262:	f7fe bd2d 	b.w	b4cc0 <network_get_listen_timeout>

000b6266 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6266:	2200      	movs	r2, #0
   b6268:	6840      	ldr	r0, [r0, #4]
   b626a:	4611      	mov	r1, r2
   b626c:	f7fe bd18 	b.w	b4ca0 <network_listening>

000b6270 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6270:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6274:	b095      	sub	sp, #84	; 0x54
   b6276:	4614      	mov	r4, r2
   b6278:	460d      	mov	r5, r1
   b627a:	4607      	mov	r7, r0
    IPAddress addr;
   b627c:	f7ff ff76 	bl	b616c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6280:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6282:	221c      	movs	r2, #28
   b6284:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6286:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6288:	f000 fdbc 	bl	b6e04 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b628c:	2340      	movs	r3, #64	; 0x40
   b628e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6290:	4620      	mov	r0, r4
   b6292:	466b      	mov	r3, sp
   b6294:	aa0c      	add	r2, sp, #48	; 0x30
   b6296:	2100      	movs	r1, #0
   b6298:	f7fe fbae 	bl	b49f8 <netdb_getaddrinfo>
    if (!r) {
   b629c:	4604      	mov	r4, r0
   b629e:	2800      	cmp	r0, #0
   b62a0:	d14b      	bne.n	b633a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b62a2:	4602      	mov	r2, r0
   b62a4:	2101      	movs	r1, #1
   b62a6:	6868      	ldr	r0, [r5, #4]
   b62a8:	f7fe fcda 	bl	b4c60 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b62ac:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b62ae:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b62b0:	4622      	mov	r2, r4
   b62b2:	6868      	ldr	r0, [r5, #4]
   b62b4:	f7fe fcd4 	bl	b4c60 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b62b8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b62ba:	4681      	mov	r9, r0
        bool ok = false;
   b62bc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b62be:	2e00      	cmp	r6, #0
   b62c0:	d03b      	beq.n	b633a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b62c2:	2900      	cmp	r1, #0
   b62c4:	d139      	bne.n	b633a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b62c6:	6873      	ldr	r3, [r6, #4]
   b62c8:	2b02      	cmp	r3, #2
   b62ca:	d003      	beq.n	b62d4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b62cc:	2b0a      	cmp	r3, #10
   b62ce:	d011      	beq.n	b62f4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b62d0:	69f6      	ldr	r6, [r6, #28]
   b62d2:	e7f4      	b.n	b62be <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b62d4:	f1b8 0f00 	cmp.w	r8, #0
   b62d8:	d0fa      	beq.n	b62d0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b62da:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b62dc:	a806      	add	r0, sp, #24
   b62de:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b62e0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b62e2:	f7ff ff71 	bl	b61c8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b62e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b62e8:	1d3c      	adds	r4, r7, #4
   b62ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b62ec:	682b      	ldr	r3, [r5, #0]
   b62ee:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b62f0:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b62f2:	e7ed      	b.n	b62d0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b62f4:	f1b9 0f00 	cmp.w	r9, #0
   b62f8:	d0ea      	beq.n	b62d0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b62fa:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b62fc:	2210      	movs	r2, #16
   b62fe:	a801      	add	r0, sp, #4
   b6300:	f000 fd80 	bl	b6e04 <memset>
                    a.v = 6;
   b6304:	2306      	movs	r3, #6
   b6306:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b630a:	ad01      	add	r5, sp, #4
   b630c:	f104 0308 	add.w	r3, r4, #8
   b6310:	3418      	adds	r4, #24
   b6312:	6818      	ldr	r0, [r3, #0]
   b6314:	6859      	ldr	r1, [r3, #4]
   b6316:	462a      	mov	r2, r5
   b6318:	c203      	stmia	r2!, {r0, r1}
   b631a:	3308      	adds	r3, #8
   b631c:	42a3      	cmp	r3, r4
   b631e:	4615      	mov	r5, r2
   b6320:	d1f7      	bne.n	b6312 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6322:	a901      	add	r1, sp, #4
   b6324:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6326:	ad07      	add	r5, sp, #28
   b6328:	f7ff ff2e 	bl	b6188 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b632c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b632e:	1d3c      	adds	r4, r7, #4
   b6330:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6332:	682b      	ldr	r3, [r5, #0]
   b6334:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6336:	4649      	mov	r1, r9
   b6338:	e7ca      	b.n	b62d0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b633a:	9800      	ldr	r0, [sp, #0]
   b633c:	f7fe fb54 	bl	b49e8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6340:	4638      	mov	r0, r7
   b6342:	b015      	add	sp, #84	; 0x54
   b6344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6348 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6348:	4b02      	ldr	r3, [pc, #8]	; (b6354 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b634a:	4a03      	ldr	r2, [pc, #12]	; (b6358 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b634c:	601a      	str	r2, [r3, #0]
   b634e:	2200      	movs	r2, #0
   b6350:	605a      	str	r2, [r3, #4]

} // spark
   b6352:	4770      	bx	lr
   b6354:	2003e6c8 	.word	0x2003e6c8
   b6358:	000b7394 	.word	0x000b7394

000b635c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b635c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b635e:	4606      	mov	r6, r0
   b6360:	460d      	mov	r5, r1
  size_t n = 0;
   b6362:	188f      	adds	r7, r1, r2
   b6364:	2400      	movs	r4, #0
  while (size--) {
   b6366:	42bd      	cmp	r5, r7
   b6368:	d00c      	beq.n	b6384 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b636a:	6833      	ldr	r3, [r6, #0]
   b636c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6370:	689b      	ldr	r3, [r3, #8]
   b6372:	4630      	mov	r0, r6
   b6374:	4798      	blx	r3
     if (chunk>=0)
   b6376:	1e03      	subs	r3, r0, #0
   b6378:	db01      	blt.n	b637e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b637a:	441c      	add	r4, r3
  while (size--) {
   b637c:	e7f3      	b.n	b6366 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b637e:	2c00      	cmp	r4, #0
   b6380:	bf08      	it	eq
   b6382:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6384:	4620      	mov	r0, r4
   b6386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6388 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6388:	b513      	push	{r0, r1, r4, lr}
   b638a:	4604      	mov	r4, r0
    }
   b638c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b638e:	b159      	cbz	r1, b63a8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6390:	9101      	str	r1, [sp, #4]
   b6392:	f000 fd7f 	bl	b6e94 <strlen>
   b6396:	6823      	ldr	r3, [r4, #0]
   b6398:	9901      	ldr	r1, [sp, #4]
   b639a:	68db      	ldr	r3, [r3, #12]
   b639c:	4602      	mov	r2, r0
   b639e:	4620      	mov	r0, r4
    }
   b63a0:	b002      	add	sp, #8
   b63a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b63a6:	4718      	bx	r3
    }
   b63a8:	b002      	add	sp, #8
   b63aa:	bd10      	pop	{r4, pc}

000b63ac <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b63ac:	6803      	ldr	r3, [r0, #0]
   b63ae:	689b      	ldr	r3, [r3, #8]
   b63b0:	4718      	bx	r3

000b63b2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b63b2:	b530      	push	{r4, r5, lr}
   b63b4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b63b6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b63b8:	2a01      	cmp	r2, #1
  *str = '\0';
   b63ba:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b63be:	bf98      	it	ls
   b63c0:	220a      	movls	r2, #10
   b63c2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b63c4:	460d      	mov	r5, r1
   b63c6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b63ca:	fb01 5312 	mls	r3, r1, r2, r5
   b63ce:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b63d2:	2b09      	cmp	r3, #9
   b63d4:	bf94      	ite	ls
   b63d6:	3330      	addls	r3, #48	; 0x30
   b63d8:	3337      	addhi	r3, #55	; 0x37
   b63da:	b2db      	uxtb	r3, r3
  } while(n);
   b63dc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b63de:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b63e2:	d9ef      	bls.n	b63c4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b63e4:	4621      	mov	r1, r4
   b63e6:	f7ff ffcf 	bl	b6388 <_ZN5Print5writeEPKc>
}
   b63ea:	b00b      	add	sp, #44	; 0x2c
   b63ec:	bd30      	pop	{r4, r5, pc}

000b63ee <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   b63ee:	b510      	push	{r4, lr}
   b63f0:	4604      	mov	r4, r0
    return LED_RGB_IsOverRidden();
   b63f2:	f7fe fba1 	bl	b4b38 <LED_RGB_IsOverRidden>
    if (override == controlled()) {
   b63f6:	4284      	cmp	r4, r0
   b63f8:	d008      	beq.n	b640c <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   b63fa:	b11c      	cbz	r4, b6404 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   b63fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Start();
   b6400:	f7fe bb8a 	b.w	b4b18 <LED_Signaling_Start>
}
   b6404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Stop();
   b6408:	f7fe bb8e 	b.w	b4b28 <LED_Signaling_Stop>
}
   b640c:	bd10      	pop	{r4, pc}

000b640e <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   b640e:	b570      	push	{r4, r5, r6, lr}
   b6410:	4605      	mov	r5, r0
   b6412:	460e      	mov	r6, r1
   b6414:	4614      	mov	r4, r2
    return LED_RGB_IsOverRidden();
   b6416:	f7fe fb8f 	bl	b4b38 <LED_RGB_IsOverRidden>
    if (!controlled()) {
   b641a:	b150      	cbz	r0, b6432 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   b641c:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
   b6420:	ea44 4005 	orr.w	r0, r4, r5, lsl #16
   b6424:	f7fe fb70 	bl	b4b08 <LED_SetSignalingColor>
    LED_On(PARTICLE_LED_RGB);
}
   b6428:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LED_On(PARTICLE_LED_RGB);
   b642c:	20e7      	movs	r0, #231	; 0xe7
   b642e:	f7fe bb8b 	b.w	b4b48 <LED_On>
}
   b6432:	bd70      	pop	{r4, r5, r6, pc}

000b6434 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b6434:	4b01      	ldr	r3, [pc, #4]	; (b643c <_GLOBAL__sub_I_RGB+0x8>)
   b6436:	2200      	movs	r2, #0
   b6438:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b643a:	4770      	bx	lr
   b643c:	2003e6d0 	.word	0x2003e6d0

000b6440 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6440:	b510      	push	{r4, lr}
   b6442:	4604      	mov	r4, r0
   b6444:	4608      	mov	r0, r1
{
    _spi = spi;
   b6446:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6448:	f7fe fade 	bl	b4a08 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b644c:	2300      	movs	r3, #0
   b644e:	6063      	str	r3, [r4, #4]
}
   b6450:	4620      	mov	r0, r4
   b6452:	bd10      	pop	{r4, pc}

000b6454 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b6454:	b510      	push	{r4, lr}
   b6456:	4604      	mov	r4, r0
{
	free(buffer);
   b6458:	6800      	ldr	r0, [r0, #0]
   b645a:	f7fe fc51 	bl	b4d00 <free>
}
   b645e:	4620      	mov	r0, r4
   b6460:	bd10      	pop	{r4, pc}

000b6462 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b6462:	b510      	push	{r4, lr}
   b6464:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b6466:	6800      	ldr	r0, [r0, #0]
   b6468:	b108      	cbz	r0, b646e <_ZN6String10invalidateEv+0xc>
   b646a:	f7fe fc49 	bl	b4d00 <free>
	buffer = NULL;
   b646e:	2300      	movs	r3, #0
	capacity = len = 0;
   b6470:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b6474:	6023      	str	r3, [r4, #0]
}
   b6476:	bd10      	pop	{r4, pc}

000b6478 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b6478:	b538      	push	{r3, r4, r5, lr}
   b647a:	4604      	mov	r4, r0
   b647c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b647e:	6800      	ldr	r0, [r0, #0]
   b6480:	3101      	adds	r1, #1
   b6482:	f7fe fc45 	bl	b4d10 <realloc>
	if (newbuffer) {
   b6486:	b110      	cbz	r0, b648e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b6488:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b648c:	2001      	movs	r0, #1
	}
	return 0;
}
   b648e:	bd38      	pop	{r3, r4, r5, pc}

000b6490 <_ZN6String7reserveEj>:
{
   b6490:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b6492:	6803      	ldr	r3, [r0, #0]
{
   b6494:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b6496:	b123      	cbz	r3, b64a2 <_ZN6String7reserveEj+0x12>
   b6498:	6843      	ldr	r3, [r0, #4]
   b649a:	428b      	cmp	r3, r1
   b649c:	d301      	bcc.n	b64a2 <_ZN6String7reserveEj+0x12>
   b649e:	2001      	movs	r0, #1
}
   b64a0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b64a2:	4620      	mov	r0, r4
   b64a4:	f7ff ffe8 	bl	b6478 <_ZN6String12changeBufferEj>
   b64a8:	2800      	cmp	r0, #0
   b64aa:	d0f9      	beq.n	b64a0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b64ac:	68a3      	ldr	r3, [r4, #8]
   b64ae:	2b00      	cmp	r3, #0
   b64b0:	d1f5      	bne.n	b649e <_ZN6String7reserveEj+0xe>
   b64b2:	6822      	ldr	r2, [r4, #0]
   b64b4:	7013      	strb	r3, [r2, #0]
   b64b6:	e7f2      	b.n	b649e <_ZN6String7reserveEj+0xe>

000b64b8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b64b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b64ba:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b64bc:	4611      	mov	r1, r2
   b64be:	9201      	str	r2, [sp, #4]
{
   b64c0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b64c2:	f7ff ffe5 	bl	b6490 <_ZN6String7reserveEj>
   b64c6:	9a01      	ldr	r2, [sp, #4]
   b64c8:	b928      	cbnz	r0, b64d6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b64ca:	4620      	mov	r0, r4
   b64cc:	f7ff ffc9 	bl	b6462 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b64d0:	4620      	mov	r0, r4
   b64d2:	b003      	add	sp, #12
   b64d4:	bd30      	pop	{r4, r5, pc}
	len = length;
   b64d6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b64d8:	4629      	mov	r1, r5
   b64da:	6820      	ldr	r0, [r4, #0]
   b64dc:	f000 fc6a 	bl	b6db4 <memcpy>
	buffer[len] = 0;
   b64e0:	6822      	ldr	r2, [r4, #0]
   b64e2:	68a3      	ldr	r3, [r4, #8]
   b64e4:	2100      	movs	r1, #0
   b64e6:	54d1      	strb	r1, [r2, r3]
	return *this;
   b64e8:	e7f2      	b.n	b64d0 <_ZN6String4copyEPKcj+0x18>

000b64ea <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b64ea:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b64ec:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b64ee:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b64f2:	4604      	mov	r4, r0
	len = 0;
   b64f4:	6083      	str	r3, [r0, #8]
	flags = 0;
   b64f6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b64f8:	b141      	cbz	r1, b650c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b64fa:	4608      	mov	r0, r1
   b64fc:	9101      	str	r1, [sp, #4]
   b64fe:	f000 fcc9 	bl	b6e94 <strlen>
   b6502:	9901      	ldr	r1, [sp, #4]
   b6504:	4602      	mov	r2, r0
   b6506:	4620      	mov	r0, r4
   b6508:	f7ff ffd6 	bl	b64b8 <_ZN6String4copyEPKcj>
}
   b650c:	4620      	mov	r0, r4
   b650e:	b002      	add	sp, #8
   b6510:	bd10      	pop	{r4, pc}

000b6512 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b6512:	b513      	push	{r0, r1, r4, lr}
   b6514:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b6516:	b159      	cbz	r1, b6530 <_ZN6StringaSEPKc+0x1e>
   b6518:	4608      	mov	r0, r1
   b651a:	9101      	str	r1, [sp, #4]
   b651c:	f000 fcba 	bl	b6e94 <strlen>
   b6520:	9901      	ldr	r1, [sp, #4]
   b6522:	4602      	mov	r2, r0
   b6524:	4620      	mov	r0, r4
   b6526:	f7ff ffc7 	bl	b64b8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b652a:	4620      	mov	r0, r4
   b652c:	b002      	add	sp, #8
   b652e:	bd10      	pop	{r4, pc}
	else invalidate();
   b6530:	f7ff ff97 	bl	b6462 <_ZN6String10invalidateEv>
   b6534:	e7f9      	b.n	b652a <_ZN6StringaSEPKc+0x18>
	...

000b6538 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6538:	4b05      	ldr	r3, [pc, #20]	; (b6550 <_GLOBAL__sub_I_System+0x18>)
   b653a:	2202      	movs	r2, #2
   b653c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b653e:	4b05      	ldr	r3, [pc, #20]	; (b6554 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6540:	4a05      	ldr	r2, [pc, #20]	; (b6558 <_GLOBAL__sub_I_System+0x20>)
   b6542:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6544:	2000      	movs	r0, #0
   b6546:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b654a:	f7fe bb1d 	b.w	b4b88 <set_system_mode>
   b654e:	bf00      	nop
   b6550:	2003e6ec 	.word	0x2003e6ec
   b6554:	2003e6e0 	.word	0x2003e6e0
   b6558:	ffff0000 	.word	0xffff0000

000b655c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b655c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b655e:	2000      	movs	r0, #0
   b6560:	f7fe fb4e 	bl	b4c00 <spark_sync_time_pending>
   b6564:	b128      	cbz	r0, b6572 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6566:	f7fe fb43 	bl	b4bf0 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b656a:	f080 0001 	eor.w	r0, r0, #1
   b656e:	b2c0      	uxtb	r0, r0
    }
   b6570:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b6572:	2001      	movs	r0, #1
   b6574:	e7fc      	b.n	b6570 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b6576 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b6576:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b6578:	2000      	movs	r0, #0
   b657a:	f7fe f9b5 	bl	b48e8 <hal_rtc_time_is_valid>
    if (rtcstate)
   b657e:	4604      	mov	r4, r0
   b6580:	b9a0      	cbnz	r0, b65ac <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b6582:	f7fe faf9 	bl	b4b78 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b6586:	2801      	cmp	r0, #1
   b6588:	d110      	bne.n	b65ac <_ZN9TimeClass7isValidEv+0x36>
   b658a:	4620      	mov	r0, r4
   b658c:	f7fe fb0c 	bl	b4ba8 <system_thread_get_state>
   b6590:	b960      	cbnz	r0, b65ac <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b6592:	f7ff ffe3 	bl	b655c <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b6596:	b910      	cbnz	r0, b659e <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b6598:	f7fe fb22 	bl	b4be0 <spark_process>
        while (_while() && !_condition()) {
   b659c:	e7f9      	b.n	b6592 <_ZN9TimeClass7isValidEv+0x1c>
   b659e:	f7ff ffdd 	bl	b655c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b65a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b65a6:	2000      	movs	r0, #0
   b65a8:	f7fe b99e 	b.w	b48e8 <hal_rtc_time_is_valid>
}
   b65ac:	4620      	mov	r0, r4
   b65ae:	bd10      	pop	{r4, pc}

000b65b0 <_ZN9TimeClass3nowEv>:
{
   b65b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b65b2:	f7ff ffe0 	bl	b6576 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b65b6:	2210      	movs	r2, #16
   b65b8:	2100      	movs	r1, #0
   b65ba:	4668      	mov	r0, sp
   b65bc:	f000 fc22 	bl	b6e04 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b65c0:	2100      	movs	r1, #0
   b65c2:	4668      	mov	r0, sp
   b65c4:	f7fe f998 	bl	b48f8 <hal_rtc_get_time>
}
   b65c8:	9800      	ldr	r0, [sp, #0]
   b65ca:	b005      	add	sp, #20
   b65cc:	f85d fb04 	ldr.w	pc, [sp], #4

000b65d0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b65d0:	4b02      	ldr	r3, [pc, #8]	; (b65dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b65d2:	681a      	ldr	r2, [r3, #0]
   b65d4:	4b02      	ldr	r3, [pc, #8]	; (b65e0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b65d6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b65d8:	4770      	bx	lr
   b65da:	bf00      	nop
   b65dc:	2003e564 	.word	0x2003e564
   b65e0:	2003e6f0 	.word	0x2003e6f0

000b65e4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b65e4:	4770      	bx	lr

000b65e6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b65e6:	7441      	strb	r1, [r0, #17]
}
   b65e8:	4770      	bx	lr

000b65ea <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b65ea:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b65ec:	7c00      	ldrb	r0, [r0, #16]
   b65ee:	f7fe fa4b 	bl	b4a88 <hal_usart_available_data_for_write>
}
   b65f2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b65f6:	bd08      	pop	{r3, pc}

000b65f8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b65f8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b65fa:	7c00      	ldrb	r0, [r0, #16]
   b65fc:	f7fe fa1c 	bl	b4a38 <hal_usart_available>
}
   b6600:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6604:	bd08      	pop	{r3, pc}

000b6606 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6606:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6608:	7c00      	ldrb	r0, [r0, #16]
   b660a:	f7fe fa25 	bl	b4a58 <hal_usart_peek>
}
   b660e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6612:	bd08      	pop	{r3, pc}

000b6614 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6614:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6616:	7c00      	ldrb	r0, [r0, #16]
   b6618:	f7fe fa16 	bl	b4a48 <hal_usart_read>
}
   b661c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6620:	bd08      	pop	{r3, pc}

000b6622 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6622:	7c00      	ldrb	r0, [r0, #16]
   b6624:	f7fe ba20 	b.w	b4a68 <hal_usart_flush>

000b6628 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6628:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b662a:	7c45      	ldrb	r5, [r0, #17]
{
   b662c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b662e:	b12d      	cbz	r5, b663c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6630:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6632:	b003      	add	sp, #12
   b6634:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6638:	f7fe b9f6 	b.w	b4a28 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b663c:	7c00      	ldrb	r0, [r0, #16]
   b663e:	9101      	str	r1, [sp, #4]
   b6640:	f7fe fa22 	bl	b4a88 <hal_usart_available_data_for_write>
   b6644:	2800      	cmp	r0, #0
   b6646:	9901      	ldr	r1, [sp, #4]
   b6648:	dcf2      	bgt.n	b6630 <_ZN11USARTSerial5writeEh+0x8>
}
   b664a:	4628      	mov	r0, r5
   b664c:	b003      	add	sp, #12
   b664e:	bd30      	pop	{r4, r5, pc}

000b6650 <_ZN11USARTSerialD0Ev>:
   b6650:	b510      	push	{r4, lr}
   b6652:	2114      	movs	r1, #20
   b6654:	4604      	mov	r4, r0
   b6656:	f7fd fd20 	bl	b409a <_ZdlPvj>
   b665a:	4620      	mov	r0, r4
   b665c:	bd10      	pop	{r4, pc}
	...

000b6660 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6660:	b510      	push	{r4, lr}
   b6662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6666:	4604      	mov	r4, r0
   b6668:	4608      	mov	r0, r1
   b666a:	4611      	mov	r1, r2
   b666c:	2200      	movs	r2, #0
   b666e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6672:	4b04      	ldr	r3, [pc, #16]	; (b6684 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6674:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6676:	2301      	movs	r3, #1
  _serial = serial;
   b6678:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b667a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b667c:	f7fe fa0c 	bl	b4a98 <hal_usart_init_ex>
}
   b6680:	4620      	mov	r0, r4
   b6682:	bd10      	pop	{r4, pc}
   b6684:	000b73ec 	.word	0x000b73ec

000b6688 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6688:	7441      	strb	r1, [r0, #17]
}
   b668a:	4770      	bx	lr

000b668c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b668c:	4770      	bx	lr

000b668e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b668e:	4770      	bx	lr

000b6690 <_ZN9USBSerial4readEv>:
{
   b6690:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6692:	2100      	movs	r1, #0
   b6694:	7c00      	ldrb	r0, [r0, #16]
   b6696:	f7fe fa1f 	bl	b4ad8 <HAL_USB_USART_Receive_Data>
}
   b669a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b669e:	bd08      	pop	{r3, pc}

000b66a0 <_ZN9USBSerial4peekEv>:
{
   b66a0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b66a2:	2101      	movs	r1, #1
   b66a4:	7c00      	ldrb	r0, [r0, #16]
   b66a6:	f7fe fa17 	bl	b4ad8 <HAL_USB_USART_Receive_Data>
}
   b66aa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b66ae:	bd08      	pop	{r3, pc}

000b66b0 <_ZN9USBSerial17availableForWriteEv>:
{
   b66b0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b66b2:	7c00      	ldrb	r0, [r0, #16]
   b66b4:	f7fe fa08 	bl	b4ac8 <HAL_USB_USART_Available_Data_For_Write>
}
   b66b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b66bc:	bd08      	pop	{r3, pc}

000b66be <_ZN9USBSerial9availableEv>:
{
   b66be:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b66c0:	7c00      	ldrb	r0, [r0, #16]
   b66c2:	f7fe f9f9 	bl	b4ab8 <HAL_USB_USART_Available_Data>
}
   b66c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b66ca:	bd08      	pop	{r3, pc}

000b66cc <_ZN9USBSerial5writeEh>:
{
   b66cc:	b513      	push	{r0, r1, r4, lr}
   b66ce:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b66d0:	7c00      	ldrb	r0, [r0, #16]
{
   b66d2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b66d4:	f7fe f9f8 	bl	b4ac8 <HAL_USB_USART_Available_Data_For_Write>
   b66d8:	2800      	cmp	r0, #0
   b66da:	9901      	ldr	r1, [sp, #4]
   b66dc:	dc01      	bgt.n	b66e2 <_ZN9USBSerial5writeEh+0x16>
   b66de:	7c60      	ldrb	r0, [r4, #17]
   b66e0:	b120      	cbz	r0, b66ec <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b66e2:	7c20      	ldrb	r0, [r4, #16]
   b66e4:	f7fe fa00 	bl	b4ae8 <HAL_USB_USART_Send_Data>
   b66e8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b66ec:	b002      	add	sp, #8
   b66ee:	bd10      	pop	{r4, pc}

000b66f0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b66f0:	7c00      	ldrb	r0, [r0, #16]
   b66f2:	f7fe ba01 	b.w	b4af8 <HAL_USB_USART_Flush_Data>

000b66f6 <_ZN9USBSerialD0Ev>:
   b66f6:	b510      	push	{r4, lr}
   b66f8:	2114      	movs	r1, #20
   b66fa:	4604      	mov	r4, r0
   b66fc:	f7fd fccd 	bl	b409a <_ZdlPvj>
   b6700:	4620      	mov	r0, r4
   b6702:	bd10      	pop	{r4, pc}

000b6704 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6704:	b510      	push	{r4, lr}
   b6706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b670a:	4604      	mov	r4, r0
   b670c:	4608      	mov	r0, r1
   b670e:	2100      	movs	r1, #0
   b6710:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6714:	4b04      	ldr	r3, [pc, #16]	; (b6728 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6716:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6718:	2301      	movs	r3, #1
  _serial = serial;
   b671a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b671c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b671e:	4611      	mov	r1, r2
   b6720:	f7fe f9c2 	bl	b4aa8 <HAL_USB_USART_Init>
}
   b6724:	4620      	mov	r0, r4
   b6726:	bd10      	pop	{r4, pc}
   b6728:	000b741c 	.word	0x000b741c

000b672c <_Z19acquireSerialBufferv>:
{
   b672c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b672e:	2214      	movs	r2, #20
{
   b6730:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6732:	2100      	movs	r1, #0
   b6734:	f000 fb66 	bl	b6e04 <memset>
}
   b6738:	4620      	mov	r0, r4
   b673a:	bd10      	pop	{r4, pc}

000b673c <_Z16_fetch_usbserialv>:
{
   b673c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b673e:	4c0f      	ldr	r4, [pc, #60]	; (b677c <_Z16_fetch_usbserialv+0x40>)
{
   b6740:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b6742:	a803      	add	r0, sp, #12
   b6744:	f7ff fff2 	bl	b672c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6748:	7821      	ldrb	r1, [r4, #0]
   b674a:	f3bf 8f5b 	dmb	ish
   b674e:	f011 0101 	ands.w	r1, r1, #1
   b6752:	d10f      	bne.n	b6774 <_Z16_fetch_usbserialv+0x38>
   b6754:	4620      	mov	r0, r4
   b6756:	9101      	str	r1, [sp, #4]
   b6758:	f7fd fca1 	bl	b409e <__cxa_guard_acquire>
   b675c:	9901      	ldr	r1, [sp, #4]
   b675e:	b148      	cbz	r0, b6774 <_Z16_fetch_usbserialv+0x38>
   b6760:	aa03      	add	r2, sp, #12
   b6762:	4807      	ldr	r0, [pc, #28]	; (b6780 <_Z16_fetch_usbserialv+0x44>)
   b6764:	f7ff ffce 	bl	b6704 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6768:	4620      	mov	r0, r4
   b676a:	f7fd fc9d 	bl	b40a8 <__cxa_guard_release>
   b676e:	4805      	ldr	r0, [pc, #20]	; (b6784 <_Z16_fetch_usbserialv+0x48>)
   b6770:	f000 fb0a 	bl	b6d88 <atexit>
	return _usbserial;
}
   b6774:	4802      	ldr	r0, [pc, #8]	; (b6780 <_Z16_fetch_usbserialv+0x44>)
   b6776:	b008      	add	sp, #32
   b6778:	bd10      	pop	{r4, pc}
   b677a:	bf00      	nop
   b677c:	2003e6f4 	.word	0x2003e6f4
   b6780:	2003e6f8 	.word	0x2003e6f8
   b6784:	000b668d 	.word	0x000b668d

000b6788 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6788:	2200      	movs	r2, #0
   b678a:	6840      	ldr	r0, [r0, #4]
   b678c:	4611      	mov	r1, r2
   b678e:	f7fe ba67 	b.w	b4c60 <network_ready>

000b6792 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6792:	2200      	movs	r2, #0
   b6794:	6840      	ldr	r0, [r0, #4]
   b6796:	4611      	mov	r1, r2
   b6798:	f7fe ba82 	b.w	b4ca0 <network_listening>

000b679c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b679c:	2200      	movs	r2, #0
   b679e:	6840      	ldr	r0, [r0, #4]
   b67a0:	4611      	mov	r1, r2
   b67a2:	f7fe ba8d 	b.w	b4cc0 <network_get_listen_timeout>

000b67a6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b67a6:	6840      	ldr	r0, [r0, #4]
   b67a8:	2200      	movs	r2, #0
   b67aa:	f7fe ba81 	b.w	b4cb0 <network_set_listen_timeout>

000b67ae <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b67ae:	6840      	ldr	r0, [r0, #4]
   b67b0:	2200      	movs	r2, #0
   b67b2:	f081 0101 	eor.w	r1, r1, #1
   b67b6:	f7fe ba6b 	b.w	b4c90 <network_listen>

000b67ba <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b67ba:	2300      	movs	r3, #0
   b67bc:	6840      	ldr	r0, [r0, #4]
   b67be:	461a      	mov	r2, r3
   b67c0:	4619      	mov	r1, r3
   b67c2:	f7fe ba5d 	b.w	b4c80 <network_off>

000b67c6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b67c6:	2300      	movs	r3, #0
   b67c8:	6840      	ldr	r0, [r0, #4]
   b67ca:	461a      	mov	r2, r3
   b67cc:	4619      	mov	r1, r3
   b67ce:	f7fe ba4f 	b.w	b4c70 <network_on>

000b67d2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b67d2:	2200      	movs	r2, #0
   b67d4:	6840      	ldr	r0, [r0, #4]
   b67d6:	4611      	mov	r1, r2
   b67d8:	f7fe ba32 	b.w	b4c40 <network_connecting>

000b67dc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b67dc:	6840      	ldr	r0, [r0, #4]
   b67de:	2200      	movs	r2, #0
   b67e0:	2102      	movs	r1, #2
   b67e2:	f7fe ba35 	b.w	b4c50 <network_disconnect>

000b67e6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b67e6:	2300      	movs	r3, #0
   b67e8:	6840      	ldr	r0, [r0, #4]
   b67ea:	461a      	mov	r2, r3
   b67ec:	f7fe ba20 	b.w	b4c30 <network_connect>

000b67f0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b67f0:	4b02      	ldr	r3, [pc, #8]	; (b67fc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b67f2:	2204      	movs	r2, #4
   b67f4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b67f6:	4a02      	ldr	r2, [pc, #8]	; (b6800 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b67f8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b67fa:	4770      	bx	lr
   b67fc:	2003e70c 	.word	0x2003e70c
   b6800:	000b744c 	.word	0x000b744c

000b6804 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6804:	4b01      	ldr	r3, [pc, #4]	; (b680c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b6806:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6808:	4770      	bx	lr
   b680a:	bf00      	nop
   b680c:	2003e568 	.word	0x2003e568

000b6810 <serialEventRun>:
{
   b6810:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b6812:	4b0b      	ldr	r3, [pc, #44]	; (b6840 <serialEventRun+0x30>)
   b6814:	b143      	cbz	r3, b6828 <serialEventRun+0x18>
   b6816:	f7ff ff91 	bl	b673c <_Z16_fetch_usbserialv>
   b681a:	6803      	ldr	r3, [r0, #0]
   b681c:	691b      	ldr	r3, [r3, #16]
   b681e:	4798      	blx	r3
   b6820:	2800      	cmp	r0, #0
   b6822:	dd01      	ble.n	b6828 <serialEventRun+0x18>
        serialEvent();
   b6824:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6828:	4b06      	ldr	r3, [pc, #24]	; (b6844 <serialEventRun+0x34>)
   b682a:	b143      	cbz	r3, b683e <serialEventRun+0x2e>
   b682c:	f000 f970 	bl	b6b10 <_Z22__fetch_global_Serial1v>
   b6830:	6803      	ldr	r3, [r0, #0]
   b6832:	691b      	ldr	r3, [r3, #16]
   b6834:	4798      	blx	r3
   b6836:	2800      	cmp	r0, #0
   b6838:	dd01      	ble.n	b683e <serialEventRun+0x2e>
        serialEvent1();
   b683a:	f3af 8000 	nop.w
}
   b683e:	bd08      	pop	{r3, pc}
	...

000b6848 <_post_loop>:
{
   b6848:	b508      	push	{r3, lr}
	serialEventRun();
   b684a:	f7ff ffe1 	bl	b6810 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b684e:	f7fe f843 	bl	b48d8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6852:	4b01      	ldr	r3, [pc, #4]	; (b6858 <_post_loop+0x10>)
   b6854:	6018      	str	r0, [r3, #0]
}
   b6856:	bd08      	pop	{r3, pc}
   b6858:	2003e728 	.word	0x2003e728

000b685c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b685c:	4805      	ldr	r0, [pc, #20]	; (b6874 <_Z33system_initialize_user_backup_ramv+0x18>)
   b685e:	4a06      	ldr	r2, [pc, #24]	; (b6878 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6860:	4906      	ldr	r1, [pc, #24]	; (b687c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b6862:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6864:	1a12      	subs	r2, r2, r0
   b6866:	f000 faa5 	bl	b6db4 <memcpy>
    __backup_sram_signature = signature;
   b686a:	4b05      	ldr	r3, [pc, #20]	; (b6880 <_Z33system_initialize_user_backup_ramv+0x24>)
   b686c:	4a05      	ldr	r2, [pc, #20]	; (b6884 <_Z33system_initialize_user_backup_ramv+0x28>)
   b686e:	601a      	str	r2, [r3, #0]
}
   b6870:	bd08      	pop	{r3, pc}
   b6872:	bf00      	nop
   b6874:	2003f400 	.word	0x2003f400
   b6878:	2003f404 	.word	0x2003f404
   b687c:	000b7734 	.word	0x000b7734
   b6880:	2003f400 	.word	0x2003f400
   b6884:	9a271c1e 	.word	0x9a271c1e

000b6888 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6888:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b688a:	2300      	movs	r3, #0
   b688c:	9300      	str	r3, [sp, #0]
   b688e:	461a      	mov	r2, r3
   b6890:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6894:	f7fe f99a 	bl	b4bcc <system_ctrl_set_result>
}
   b6898:	b003      	add	sp, #12
   b689a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b68a0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b68a0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b68a2:	8843      	ldrh	r3, [r0, #2]
   b68a4:	2b0a      	cmp	r3, #10
   b68a6:	d008      	beq.n	b68ba <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b68a8:	2b50      	cmp	r3, #80	; 0x50
   b68aa:	d10b      	bne.n	b68c4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b68ac:	4b09      	ldr	r3, [pc, #36]	; (b68d4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b68ae:	681b      	ldr	r3, [r3, #0]
   b68b0:	b14b      	cbz	r3, b68c6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b68b2:	b003      	add	sp, #12
   b68b4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b68b8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b68ba:	f7ff ffe5 	bl	b6888 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b68be:	b003      	add	sp, #12
   b68c0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b68c4:	2300      	movs	r3, #0
   b68c6:	9300      	str	r3, [sp, #0]
   b68c8:	461a      	mov	r2, r3
   b68ca:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b68ce:	f7fe f97d 	bl	b4bcc <system_ctrl_set_result>
}
   b68d2:	e7f4      	b.n	b68be <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b68d4:	2003e718 	.word	0x2003e718

000b68d8 <module_user_init_hook>:
{
   b68d8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b68da:	4812      	ldr	r0, [pc, #72]	; (b6924 <module_user_init_hook+0x4c>)
   b68dc:	2100      	movs	r1, #0
   b68de:	f7fe fa37 	bl	b4d50 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b68e2:	4b11      	ldr	r3, [pc, #68]	; (b6928 <module_user_init_hook+0x50>)
   b68e4:	681a      	ldr	r2, [r3, #0]
   b68e6:	4b11      	ldr	r3, [pc, #68]	; (b692c <module_user_init_hook+0x54>)
   b68e8:	429a      	cmp	r2, r3
   b68ea:	4b11      	ldr	r3, [pc, #68]	; (b6930 <module_user_init_hook+0x58>)
   b68ec:	bf0c      	ite	eq
   b68ee:	2201      	moveq	r2, #1
   b68f0:	2200      	movne	r2, #0
   b68f2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b68f4:	d001      	beq.n	b68fa <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b68f6:	f7ff ffb1 	bl	b685c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b68fa:	f7fd ffdd 	bl	b48b8 <HAL_RNG_GetRandomNumber>
   b68fe:	4604      	mov	r4, r0
    srand(seed);
   b6900:	f000 fa88 	bl	b6e14 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6904:	4b0b      	ldr	r3, [pc, #44]	; (b6934 <module_user_init_hook+0x5c>)
   b6906:	b113      	cbz	r3, b690e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6908:	4620      	mov	r0, r4
   b690a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b690e:	2100      	movs	r1, #0
   b6910:	4808      	ldr	r0, [pc, #32]	; (b6934 <module_user_init_hook+0x5c>)
   b6912:	f7fe f97d 	bl	b4c10 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b691a:	4807      	ldr	r0, [pc, #28]	; (b6938 <module_user_init_hook+0x60>)
   b691c:	2100      	movs	r1, #0
   b691e:	f7fe b94b 	b.w	b4bb8 <system_ctrl_set_app_request_handler>
   b6922:	bf00      	nop
   b6924:	000b6805 	.word	0x000b6805
   b6928:	2003f400 	.word	0x2003f400
   b692c:	9a271c1e 	.word	0x9a271c1e
   b6930:	2003e714 	.word	0x2003e714
   b6934:	00000000 	.word	0x00000000
   b6938:	000b68a1 	.word	0x000b68a1

000b693c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b693c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b693e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b6940:	d902      	bls.n	b6948 <pinAvailable+0xc>
    return false;
   b6942:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b6944:	b002      	add	sp, #8
   b6946:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b6948:	f1a0 030b 	sub.w	r3, r0, #11
   b694c:	2b02      	cmp	r3, #2
   b694e:	d81a      	bhi.n	b6986 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6950:	4c17      	ldr	r4, [pc, #92]	; (b69b0 <pinAvailable+0x74>)
   b6952:	7821      	ldrb	r1, [r4, #0]
   b6954:	f3bf 8f5b 	dmb	ish
   b6958:	f011 0101 	ands.w	r1, r1, #1
   b695c:	d10b      	bne.n	b6976 <pinAvailable+0x3a>
   b695e:	4620      	mov	r0, r4
   b6960:	9101      	str	r1, [sp, #4]
   b6962:	f7fd fb9c 	bl	b409e <__cxa_guard_acquire>
   b6966:	9901      	ldr	r1, [sp, #4]
   b6968:	b128      	cbz	r0, b6976 <pinAvailable+0x3a>
   b696a:	4812      	ldr	r0, [pc, #72]	; (b69b4 <pinAvailable+0x78>)
   b696c:	f7ff fd68 	bl	b6440 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6970:	4620      	mov	r0, r4
   b6972:	f7fd fb99 	bl	b40a8 <__cxa_guard_release>
   b6976:	4b0f      	ldr	r3, [pc, #60]	; (b69b4 <pinAvailable+0x78>)
   b6978:	7818      	ldrb	r0, [r3, #0]
   b697a:	f7fe f84d 	bl	b4a18 <hal_spi_is_enabled>
   b697e:	2800      	cmp	r0, #0
   b6980:	d1df      	bne.n	b6942 <pinAvailable+0x6>
  return true; // 'pin' is available
   b6982:	2001      	movs	r0, #1
   b6984:	e7de      	b.n	b6944 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b6986:	2801      	cmp	r0, #1
   b6988:	d809      	bhi.n	b699e <pinAvailable+0x62>
   b698a:	f000 f881 	bl	b6a90 <_Z19__fetch_global_Wirev>
   b698e:	2100      	movs	r1, #0
   b6990:	7c00      	ldrb	r0, [r0, #16]
   b6992:	f7fe f811 	bl	b49b8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b6996:	f080 0001 	eor.w	r0, r0, #1
   b699a:	b2c0      	uxtb	r0, r0
   b699c:	e7d2      	b.n	b6944 <pinAvailable+0x8>
   b699e:	3809      	subs	r0, #9
   b69a0:	2801      	cmp	r0, #1
   b69a2:	d8ee      	bhi.n	b6982 <pinAvailable+0x46>
   b69a4:	f000 f8b4 	bl	b6b10 <_Z22__fetch_global_Serial1v>
   b69a8:	7c00      	ldrb	r0, [r0, #16]
   b69aa:	f7fe f865 	bl	b4a78 <hal_usart_is_enabled>
   b69ae:	e7f2      	b.n	b6996 <pinAvailable+0x5a>
   b69b0:	2003e71c 	.word	0x2003e71c
   b69b4:	2003e720 	.word	0x2003e720

000b69b8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b69b8:	2823      	cmp	r0, #35	; 0x23
{
   b69ba:	b538      	push	{r3, r4, r5, lr}
   b69bc:	4604      	mov	r4, r0
   b69be:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b69c0:	d80a      	bhi.n	b69d8 <pinMode+0x20>
   b69c2:	29ff      	cmp	r1, #255	; 0xff
   b69c4:	d008      	beq.n	b69d8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b69c6:	f7ff ffb9 	bl	b693c <pinAvailable>
   b69ca:	b128      	cbz	r0, b69d8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b69cc:	4629      	mov	r1, r5
   b69ce:	4620      	mov	r0, r4
}
   b69d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b69d4:	f7fd bfa0 	b.w	b4918 <HAL_Pin_Mode>
}
   b69d8:	bd38      	pop	{r3, r4, r5, pc}

000b69da <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b69da:	b538      	push	{r3, r4, r5, lr}
   b69dc:	4604      	mov	r4, r0
   b69de:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b69e0:	f7fd ffa2 	bl	b4928 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b69e4:	28ff      	cmp	r0, #255	; 0xff
   b69e6:	d010      	beq.n	b6a0a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b69e8:	2806      	cmp	r0, #6
   b69ea:	d804      	bhi.n	b69f6 <digitalWrite+0x1c>
   b69ec:	234d      	movs	r3, #77	; 0x4d
   b69ee:	fa23 f000 	lsr.w	r0, r3, r0
   b69f2:	07c3      	lsls	r3, r0, #31
   b69f4:	d409      	bmi.n	b6a0a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b69f6:	4620      	mov	r0, r4
   b69f8:	f7ff ffa0 	bl	b693c <pinAvailable>
   b69fc:	b128      	cbz	r0, b6a0a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b69fe:	4629      	mov	r1, r5
   b6a00:	4620      	mov	r0, r4
}
   b6a02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b6a06:	f7fd bf97 	b.w	b4938 <HAL_GPIO_Write>
}
   b6a0a:	bd38      	pop	{r3, r4, r5, pc}

000b6a0c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b6a0c:	b510      	push	{r4, lr}
   b6a0e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b6a10:	f7fd ff8a 	bl	b4928 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b6a14:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b6a16:	b2db      	uxtb	r3, r3
   b6a18:	2b01      	cmp	r3, #1
   b6a1a:	d908      	bls.n	b6a2e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b6a1c:	4620      	mov	r0, r4
   b6a1e:	f7ff ff8d 	bl	b693c <pinAvailable>
   b6a22:	b120      	cbz	r0, b6a2e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b6a24:	4620      	mov	r0, r4
}
   b6a26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b6a2a:	f7fd bf8d 	b.w	b4948 <HAL_GPIO_Read>
}
   b6a2e:	2000      	movs	r0, #0
   b6a30:	bd10      	pop	{r4, pc}

000b6a32 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b6a32:	280d      	cmp	r0, #13
{
   b6a34:	b510      	push	{r4, lr}
   b6a36:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b6a38:	bf9c      	itt	ls
   b6a3a:	340e      	addls	r4, #14
   b6a3c:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b6a3e:	4620      	mov	r0, r4
   b6a40:	f7ff ff7c 	bl	b693c <pinAvailable>
   b6a44:	b150      	cbz	r0, b6a5c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b6a46:	2103      	movs	r1, #3
   b6a48:	4620      	mov	r0, r4
   b6a4a:	f7fd ff5d 	bl	b4908 <HAL_Validate_Pin_Function>
   b6a4e:	2803      	cmp	r0, #3
   b6a50:	d104      	bne.n	b6a5c <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b6a52:	4620      	mov	r0, r4
}
   b6a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b6a58:	f7fd bf7e 	b.w	b4958 <hal_adc_read>
}
   b6a5c:	2000      	movs	r0, #0
   b6a5e:	bd10      	pop	{r4, pc}

000b6a60 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6a60:	4770      	bx	lr
	...

000b6a64 <_Z17acquireWireBufferv>:
{
   b6a64:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b6a66:	2520      	movs	r5, #32
   b6a68:	2314      	movs	r3, #20
{
   b6a6a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b6a6c:	6003      	str	r3, [r0, #0]
   b6a6e:	6085      	str	r5, [r0, #8]
   b6a70:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6a72:	4906      	ldr	r1, [pc, #24]	; (b6a8c <_Z17acquireWireBufferv+0x28>)
   b6a74:	4628      	mov	r0, r5
   b6a76:	f000 f86f 	bl	b6b58 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6a7a:	4904      	ldr	r1, [pc, #16]	; (b6a8c <_Z17acquireWireBufferv+0x28>)
	};
   b6a7c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6a7e:	4628      	mov	r0, r5
   b6a80:	f000 f86a 	bl	b6b58 <_ZnajRKSt9nothrow_t>
	};
   b6a84:	60e0      	str	r0, [r4, #12]
}
   b6a86:	4620      	mov	r0, r4
   b6a88:	bd38      	pop	{r3, r4, r5, pc}
   b6a8a:	bf00      	nop
   b6a8c:	000b7480 	.word	0x000b7480

000b6a90 <_Z19__fetch_global_Wirev>:
{
   b6a90:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6a92:	4d0e      	ldr	r5, [pc, #56]	; (b6acc <_Z19__fetch_global_Wirev+0x3c>)
   b6a94:	7829      	ldrb	r1, [r5, #0]
   b6a96:	f3bf 8f5b 	dmb	ish
   b6a9a:	f011 0401 	ands.w	r4, r1, #1
{
   b6a9e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6aa0:	d111      	bne.n	b6ac6 <_Z19__fetch_global_Wirev+0x36>
   b6aa2:	4628      	mov	r0, r5
   b6aa4:	f7fd fafb 	bl	b409e <__cxa_guard_acquire>
   b6aa8:	b168      	cbz	r0, b6ac6 <_Z19__fetch_global_Wirev+0x36>
   b6aaa:	a801      	add	r0, sp, #4
   b6aac:	f7ff ffda 	bl	b6a64 <_Z17acquireWireBufferv>
   b6ab0:	aa01      	add	r2, sp, #4
   b6ab2:	4621      	mov	r1, r4
   b6ab4:	4806      	ldr	r0, [pc, #24]	; (b6ad0 <_Z19__fetch_global_Wirev+0x40>)
   b6ab6:	f7ff fb0d 	bl	b60d4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b6aba:	4628      	mov	r0, r5
   b6abc:	f7fd faf4 	bl	b40a8 <__cxa_guard_release>
   b6ac0:	4804      	ldr	r0, [pc, #16]	; (b6ad4 <_Z19__fetch_global_Wirev+0x44>)
   b6ac2:	f000 f961 	bl	b6d88 <atexit>
	return wire;
}
   b6ac6:	4802      	ldr	r0, [pc, #8]	; (b6ad0 <_Z19__fetch_global_Wirev+0x40>)
   b6ac8:	b007      	add	sp, #28
   b6aca:	bd30      	pop	{r4, r5, pc}
   b6acc:	2003e72c 	.word	0x2003e72c
   b6ad0:	2003e730 	.word	0x2003e730
   b6ad4:	000b6a61 	.word	0x000b6a61

000b6ad8 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6ad8:	4770      	bx	lr
	...

000b6adc <_Z20acquireSerial1Bufferv>:
{
   b6adc:	b538      	push	{r3, r4, r5, lr}
   b6ade:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6ae0:	2514      	movs	r5, #20
   b6ae2:	462a      	mov	r2, r5
   b6ae4:	2100      	movs	r1, #0
   b6ae6:	f000 f98d 	bl	b6e04 <memset>
   b6aea:	8025      	strh	r5, [r4, #0]
   b6aec:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6aee:	4907      	ldr	r1, [pc, #28]	; (b6b0c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6af0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6af2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6af4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6af6:	f000 f82f 	bl	b6b58 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6afa:	4904      	ldr	r1, [pc, #16]	; (b6b0c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6afc:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6afe:	4628      	mov	r0, r5
   b6b00:	f000 f82a 	bl	b6b58 <_ZnajRKSt9nothrow_t>
    };
   b6b04:	60e0      	str	r0, [r4, #12]
}
   b6b06:	4620      	mov	r0, r4
   b6b08:	bd38      	pop	{r3, r4, r5, pc}
   b6b0a:	bf00      	nop
   b6b0c:	000b7480 	.word	0x000b7480

000b6b10 <_Z22__fetch_global_Serial1v>:
{
   b6b10:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6b12:	4d0e      	ldr	r5, [pc, #56]	; (b6b4c <_Z22__fetch_global_Serial1v+0x3c>)
   b6b14:	7829      	ldrb	r1, [r5, #0]
   b6b16:	f3bf 8f5b 	dmb	ish
   b6b1a:	f011 0401 	ands.w	r4, r1, #1
{
   b6b1e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6b20:	d111      	bne.n	b6b46 <_Z22__fetch_global_Serial1v+0x36>
   b6b22:	4628      	mov	r0, r5
   b6b24:	f7fd fabb 	bl	b409e <__cxa_guard_acquire>
   b6b28:	b168      	cbz	r0, b6b46 <_Z22__fetch_global_Serial1v+0x36>
   b6b2a:	a801      	add	r0, sp, #4
   b6b2c:	f7ff ffd6 	bl	b6adc <_Z20acquireSerial1Bufferv>
   b6b30:	aa01      	add	r2, sp, #4
   b6b32:	4621      	mov	r1, r4
   b6b34:	4806      	ldr	r0, [pc, #24]	; (b6b50 <_Z22__fetch_global_Serial1v+0x40>)
   b6b36:	f7ff fd93 	bl	b6660 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6b3a:	4628      	mov	r0, r5
   b6b3c:	f7fd fab4 	bl	b40a8 <__cxa_guard_release>
   b6b40:	4804      	ldr	r0, [pc, #16]	; (b6b54 <_Z22__fetch_global_Serial1v+0x44>)
   b6b42:	f000 f921 	bl	b6d88 <atexit>
    return serial1;
}
   b6b46:	4802      	ldr	r0, [pc, #8]	; (b6b50 <_Z22__fetch_global_Serial1v+0x40>)
   b6b48:	b007      	add	sp, #28
   b6b4a:	bd30      	pop	{r4, r5, pc}
   b6b4c:	2003e744 	.word	0x2003e744
   b6b50:	2003e748 	.word	0x2003e748
   b6b54:	000b6ad9 	.word	0x000b6ad9

000b6b58 <_ZnajRKSt9nothrow_t>:
   b6b58:	f7fd ba9d 	b.w	b4096 <_Znaj>

000b6b5c <_ZSt25__throw_bad_function_callv>:
   b6b5c:	b508      	push	{r3, lr}
   b6b5e:	f7fe f8e7 	bl	b4d30 <abort>
	...

000b6b64 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b6b64:	4901      	ldr	r1, [pc, #4]	; (b6b6c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b6b66:	f000 b8f9 	b.w	b6d5c <_ZNKSt9type_infoeqERKS_>
   b6b6a:	bf00      	nop
   b6b6c:	000b749c 	.word	0x000b749c

000b6b70 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b6b70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b6b72:	2400      	movs	r4, #0
   b6b74:	2310      	movs	r3, #16
   b6b76:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b6b7a:	6803      	ldr	r3, [r0, #0]
   b6b7c:	4615      	mov	r5, r2
   b6b7e:	699e      	ldr	r6, [r3, #24]
   b6b80:	6812      	ldr	r2, [r2, #0]
   b6b82:	466b      	mov	r3, sp
   b6b84:	e9cd 4400 	strd	r4, r4, [sp]
   b6b88:	47b0      	blx	r6
   b6b8a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b6b8e:	f003 0306 	and.w	r3, r3, #6
   b6b92:	2b06      	cmp	r3, #6
   b6b94:	bf03      	ittte	eq
   b6b96:	9b00      	ldreq	r3, [sp, #0]
   b6b98:	602b      	streq	r3, [r5, #0]
   b6b9a:	2001      	moveq	r0, #1
   b6b9c:	4620      	movne	r0, r4
   b6b9e:	b004      	add	sp, #16
   b6ba0:	bd70      	pop	{r4, r5, r6, pc}

000b6ba2 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b6ba2:	9800      	ldr	r0, [sp, #0]
   b6ba4:	4290      	cmp	r0, r2
   b6ba6:	bf14      	ite	ne
   b6ba8:	2001      	movne	r0, #1
   b6baa:	2006      	moveq	r0, #6
   b6bac:	4770      	bx	lr
	...

000b6bb0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b6bb0:	b510      	push	{r4, lr}
   b6bb2:	4b03      	ldr	r3, [pc, #12]	; (b6bc0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b6bb4:	6003      	str	r3, [r0, #0]
   b6bb6:	4604      	mov	r4, r0
   b6bb8:	f000 f8cd 	bl	b6d56 <_ZNSt9type_infoD1Ev>
   b6bbc:	4620      	mov	r0, r4
   b6bbe:	bd10      	pop	{r4, pc}
   b6bc0:	000b74dc 	.word	0x000b74dc

000b6bc4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b6bc4:	b510      	push	{r4, lr}
   b6bc6:	4604      	mov	r4, r0
   b6bc8:	f7ff fff2 	bl	b6bb0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6bcc:	4620      	mov	r0, r4
   b6bce:	2108      	movs	r1, #8
   b6bd0:	f7fd fa63 	bl	b409a <_ZdlPvj>
   b6bd4:	4620      	mov	r0, r4
   b6bd6:	bd10      	pop	{r4, pc}

000b6bd8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b6bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6bdc:	461f      	mov	r7, r3
   b6bde:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b6be2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b6be6:	4598      	cmp	r8, r3
   b6be8:	4606      	mov	r6, r0
   b6bea:	4615      	mov	r5, r2
   b6bec:	d107      	bne.n	b6bfe <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b6bee:	9907      	ldr	r1, [sp, #28]
   b6bf0:	f000 f8b4 	bl	b6d5c <_ZNKSt9type_infoeqERKS_>
   b6bf4:	b118      	cbz	r0, b6bfe <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b6bf6:	7165      	strb	r5, [r4, #5]
   b6bf8:	2000      	movs	r0, #0
   b6bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6bfe:	4639      	mov	r1, r7
   b6c00:	4630      	mov	r0, r6
   b6c02:	f000 f8ab 	bl	b6d5c <_ZNKSt9type_infoeqERKS_>
   b6c06:	2800      	cmp	r0, #0
   b6c08:	d0f6      	beq.n	b6bf8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b6c0a:	2301      	movs	r3, #1
   b6c0c:	f8c4 8000 	str.w	r8, [r4]
   b6c10:	7125      	strb	r5, [r4, #4]
   b6c12:	71a3      	strb	r3, [r4, #6]
   b6c14:	e7f0      	b.n	b6bf8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b6c16 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b6c16:	b538      	push	{r3, r4, r5, lr}
   b6c18:	4615      	mov	r5, r2
   b6c1a:	461c      	mov	r4, r3
   b6c1c:	f000 f89e 	bl	b6d5c <_ZNKSt9type_infoeqERKS_>
   b6c20:	b120      	cbz	r0, b6c2c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b6c22:	2308      	movs	r3, #8
   b6c24:	60e3      	str	r3, [r4, #12]
   b6c26:	2306      	movs	r3, #6
   b6c28:	6025      	str	r5, [r4, #0]
   b6c2a:	7123      	strb	r3, [r4, #4]
   b6c2c:	bd38      	pop	{r3, r4, r5, pc}

000b6c2e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b6c2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6c30:	4605      	mov	r5, r0
   b6c32:	460c      	mov	r4, r1
   b6c34:	9201      	str	r2, [sp, #4]
   b6c36:	461e      	mov	r6, r3
   b6c38:	f000 f890 	bl	b6d5c <_ZNKSt9type_infoeqERKS_>
   b6c3c:	b950      	cbnz	r0, b6c54 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b6c3e:	2e03      	cmp	r6, #3
   b6c40:	d808      	bhi.n	b6c54 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b6c42:	6823      	ldr	r3, [r4, #0]
   b6c44:	9a01      	ldr	r2, [sp, #4]
   b6c46:	695b      	ldr	r3, [r3, #20]
   b6c48:	4629      	mov	r1, r5
   b6c4a:	4620      	mov	r0, r4
   b6c4c:	b002      	add	sp, #8
   b6c4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6c52:	4718      	bx	r3
   b6c54:	b002      	add	sp, #8
   b6c56:	bd70      	pop	{r4, r5, r6, pc}

000b6c58 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b6c58:	b510      	push	{r4, lr}
   b6c5a:	4b03      	ldr	r3, [pc, #12]	; (b6c68 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b6c5c:	6003      	str	r3, [r0, #0]
   b6c5e:	4604      	mov	r4, r0
   b6c60:	f7ff ffa6 	bl	b6bb0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6c64:	4620      	mov	r0, r4
   b6c66:	bd10      	pop	{r4, pc}
   b6c68:	000b753c 	.word	0x000b753c

000b6c6c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b6c6c:	b510      	push	{r4, lr}
   b6c6e:	4604      	mov	r4, r0
   b6c70:	f7ff fff2 	bl	b6c58 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b6c74:	4620      	mov	r0, r4
   b6c76:	210c      	movs	r1, #12
   b6c78:	f7fd fa0f 	bl	b409a <_ZdlPvj>
   b6c7c:	4620      	mov	r0, r4
   b6c7e:	bd10      	pop	{r4, pc}

000b6c80 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b6c80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6c82:	9f08      	ldr	r7, [sp, #32]
   b6c84:	4297      	cmp	r7, r2
   b6c86:	4605      	mov	r5, r0
   b6c88:	460e      	mov	r6, r1
   b6c8a:	4614      	mov	r4, r2
   b6c8c:	d00a      	beq.n	b6ca4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b6c8e:	68a8      	ldr	r0, [r5, #8]
   b6c90:	6802      	ldr	r2, [r0, #0]
   b6c92:	9708      	str	r7, [sp, #32]
   b6c94:	6a15      	ldr	r5, [r2, #32]
   b6c96:	4631      	mov	r1, r6
   b6c98:	4622      	mov	r2, r4
   b6c9a:	46ac      	mov	ip, r5
   b6c9c:	b003      	add	sp, #12
   b6c9e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b6ca2:	4760      	bx	ip
   b6ca4:	4619      	mov	r1, r3
   b6ca6:	9301      	str	r3, [sp, #4]
   b6ca8:	f000 f858 	bl	b6d5c <_ZNKSt9type_infoeqERKS_>
   b6cac:	9b01      	ldr	r3, [sp, #4]
   b6cae:	2800      	cmp	r0, #0
   b6cb0:	d0ed      	beq.n	b6c8e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b6cb2:	2006      	movs	r0, #6
   b6cb4:	b003      	add	sp, #12
   b6cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6cb8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b6cb8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6cbc:	460d      	mov	r5, r1
   b6cbe:	4619      	mov	r1, r3
   b6cc0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b6cc4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b6cc8:	4681      	mov	r9, r0
   b6cca:	4617      	mov	r7, r2
   b6ccc:	4698      	mov	r8, r3
   b6cce:	f000 f845 	bl	b6d5c <_ZNKSt9type_infoeqERKS_>
   b6cd2:	b190      	cbz	r0, b6cfa <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b6cd4:	2d00      	cmp	r5, #0
   b6cd6:	6034      	str	r4, [r6, #0]
   b6cd8:	7137      	strb	r7, [r6, #4]
   b6cda:	db09      	blt.n	b6cf0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b6cdc:	1961      	adds	r1, r4, r5
   b6cde:	458a      	cmp	sl, r1
   b6ce0:	bf0c      	ite	eq
   b6ce2:	2106      	moveq	r1, #6
   b6ce4:	2101      	movne	r1, #1
   b6ce6:	71b1      	strb	r1, [r6, #6]
   b6ce8:	2000      	movs	r0, #0
   b6cea:	b001      	add	sp, #4
   b6cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6cf0:	3502      	adds	r5, #2
   b6cf2:	d1f9      	bne.n	b6ce8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6cf4:	2301      	movs	r3, #1
   b6cf6:	71b3      	strb	r3, [r6, #6]
   b6cf8:	e7f6      	b.n	b6ce8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6cfa:	4554      	cmp	r4, sl
   b6cfc:	d106      	bne.n	b6d0c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b6cfe:	4659      	mov	r1, fp
   b6d00:	4648      	mov	r0, r9
   b6d02:	f000 f82b 	bl	b6d5c <_ZNKSt9type_infoeqERKS_>
   b6d06:	b108      	cbz	r0, b6d0c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b6d08:	7177      	strb	r7, [r6, #5]
   b6d0a:	e7ed      	b.n	b6ce8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6d0c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b6d10:	6803      	ldr	r3, [r0, #0]
   b6d12:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b6d16:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b6d1a:	69dc      	ldr	r4, [r3, #28]
   b6d1c:	463a      	mov	r2, r7
   b6d1e:	4643      	mov	r3, r8
   b6d20:	4629      	mov	r1, r5
   b6d22:	46a4      	mov	ip, r4
   b6d24:	b001      	add	sp, #4
   b6d26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6d2a:	4760      	bx	ip

000b6d2c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b6d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6d30:	4607      	mov	r7, r0
   b6d32:	460c      	mov	r4, r1
   b6d34:	4615      	mov	r5, r2
   b6d36:	461e      	mov	r6, r3
   b6d38:	f7ff ff6d 	bl	b6c16 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b6d3c:	b948      	cbnz	r0, b6d52 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b6d3e:	68b8      	ldr	r0, [r7, #8]
   b6d40:	6803      	ldr	r3, [r0, #0]
   b6d42:	699f      	ldr	r7, [r3, #24]
   b6d44:	462a      	mov	r2, r5
   b6d46:	4633      	mov	r3, r6
   b6d48:	4621      	mov	r1, r4
   b6d4a:	46bc      	mov	ip, r7
   b6d4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b6d50:	4760      	bx	ip
   b6d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6d56 <_ZNSt9type_infoD1Ev>:
   b6d56:	4770      	bx	lr

000b6d58 <_ZNKSt9type_info14__is_pointer_pEv>:
   b6d58:	2000      	movs	r0, #0
   b6d5a:	4770      	bx	lr

000b6d5c <_ZNKSt9type_infoeqERKS_>:
   b6d5c:	4281      	cmp	r1, r0
   b6d5e:	b508      	push	{r3, lr}
   b6d60:	d00e      	beq.n	b6d80 <_ZNKSt9type_infoeqERKS_+0x24>
   b6d62:	6840      	ldr	r0, [r0, #4]
   b6d64:	7803      	ldrb	r3, [r0, #0]
   b6d66:	2b2a      	cmp	r3, #42	; 0x2a
   b6d68:	d00c      	beq.n	b6d84 <_ZNKSt9type_infoeqERKS_+0x28>
   b6d6a:	6849      	ldr	r1, [r1, #4]
   b6d6c:	780b      	ldrb	r3, [r1, #0]
   b6d6e:	2b2a      	cmp	r3, #42	; 0x2a
   b6d70:	bf08      	it	eq
   b6d72:	3101      	addeq	r1, #1
   b6d74:	f000 f87c 	bl	b6e70 <strcmp>
   b6d78:	fab0 f080 	clz	r0, r0
   b6d7c:	0940      	lsrs	r0, r0, #5
   b6d7e:	bd08      	pop	{r3, pc}
   b6d80:	2001      	movs	r0, #1
   b6d82:	e7fc      	b.n	b6d7e <_ZNKSt9type_infoeqERKS_+0x22>
   b6d84:	2000      	movs	r0, #0
   b6d86:	e7fa      	b.n	b6d7e <_ZNKSt9type_infoeqERKS_+0x22>

000b6d88 <atexit>:
   b6d88:	2300      	movs	r3, #0
   b6d8a:	4601      	mov	r1, r0
   b6d8c:	461a      	mov	r2, r3
   b6d8e:	4618      	mov	r0, r3
   b6d90:	f000 b910 	b.w	b6fb4 <__register_exitproc>

000b6d94 <memcmp>:
   b6d94:	b510      	push	{r4, lr}
   b6d96:	3901      	subs	r1, #1
   b6d98:	4402      	add	r2, r0
   b6d9a:	4290      	cmp	r0, r2
   b6d9c:	d101      	bne.n	b6da2 <memcmp+0xe>
   b6d9e:	2000      	movs	r0, #0
   b6da0:	e005      	b.n	b6dae <memcmp+0x1a>
   b6da2:	7803      	ldrb	r3, [r0, #0]
   b6da4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b6da8:	42a3      	cmp	r3, r4
   b6daa:	d001      	beq.n	b6db0 <memcmp+0x1c>
   b6dac:	1b18      	subs	r0, r3, r4
   b6dae:	bd10      	pop	{r4, pc}
   b6db0:	3001      	adds	r0, #1
   b6db2:	e7f2      	b.n	b6d9a <memcmp+0x6>

000b6db4 <memcpy>:
   b6db4:	440a      	add	r2, r1
   b6db6:	4291      	cmp	r1, r2
   b6db8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b6dbc:	d100      	bne.n	b6dc0 <memcpy+0xc>
   b6dbe:	4770      	bx	lr
   b6dc0:	b510      	push	{r4, lr}
   b6dc2:	f811 4b01 	ldrb.w	r4, [r1], #1
   b6dc6:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6dca:	4291      	cmp	r1, r2
   b6dcc:	d1f9      	bne.n	b6dc2 <memcpy+0xe>
   b6dce:	bd10      	pop	{r4, pc}

000b6dd0 <memmove>:
   b6dd0:	4288      	cmp	r0, r1
   b6dd2:	b510      	push	{r4, lr}
   b6dd4:	eb01 0402 	add.w	r4, r1, r2
   b6dd8:	d902      	bls.n	b6de0 <memmove+0x10>
   b6dda:	4284      	cmp	r4, r0
   b6ddc:	4623      	mov	r3, r4
   b6dde:	d807      	bhi.n	b6df0 <memmove+0x20>
   b6de0:	1e43      	subs	r3, r0, #1
   b6de2:	42a1      	cmp	r1, r4
   b6de4:	d008      	beq.n	b6df8 <memmove+0x28>
   b6de6:	f811 2b01 	ldrb.w	r2, [r1], #1
   b6dea:	f803 2f01 	strb.w	r2, [r3, #1]!
   b6dee:	e7f8      	b.n	b6de2 <memmove+0x12>
   b6df0:	4402      	add	r2, r0
   b6df2:	4601      	mov	r1, r0
   b6df4:	428a      	cmp	r2, r1
   b6df6:	d100      	bne.n	b6dfa <memmove+0x2a>
   b6df8:	bd10      	pop	{r4, pc}
   b6dfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b6dfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b6e02:	e7f7      	b.n	b6df4 <memmove+0x24>

000b6e04 <memset>:
   b6e04:	4402      	add	r2, r0
   b6e06:	4603      	mov	r3, r0
   b6e08:	4293      	cmp	r3, r2
   b6e0a:	d100      	bne.n	b6e0e <memset+0xa>
   b6e0c:	4770      	bx	lr
   b6e0e:	f803 1b01 	strb.w	r1, [r3], #1
   b6e12:	e7f9      	b.n	b6e08 <memset+0x4>

000b6e14 <srand>:
   b6e14:	b538      	push	{r3, r4, r5, lr}
   b6e16:	4b10      	ldr	r3, [pc, #64]	; (b6e58 <srand+0x44>)
   b6e18:	681d      	ldr	r5, [r3, #0]
   b6e1a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6e1c:	4604      	mov	r4, r0
   b6e1e:	b9b3      	cbnz	r3, b6e4e <srand+0x3a>
   b6e20:	2018      	movs	r0, #24
   b6e22:	f7fd ff65 	bl	b4cf0 <malloc>
   b6e26:	4602      	mov	r2, r0
   b6e28:	63a8      	str	r0, [r5, #56]	; 0x38
   b6e2a:	b920      	cbnz	r0, b6e36 <srand+0x22>
   b6e2c:	4b0b      	ldr	r3, [pc, #44]	; (b6e5c <srand+0x48>)
   b6e2e:	480c      	ldr	r0, [pc, #48]	; (b6e60 <srand+0x4c>)
   b6e30:	2142      	movs	r1, #66	; 0x42
   b6e32:	f7fd ff85 	bl	b4d40 <__assert_func>
   b6e36:	490b      	ldr	r1, [pc, #44]	; (b6e64 <srand+0x50>)
   b6e38:	4b0b      	ldr	r3, [pc, #44]	; (b6e68 <srand+0x54>)
   b6e3a:	e9c0 1300 	strd	r1, r3, [r0]
   b6e3e:	4b0b      	ldr	r3, [pc, #44]	; (b6e6c <srand+0x58>)
   b6e40:	6083      	str	r3, [r0, #8]
   b6e42:	230b      	movs	r3, #11
   b6e44:	8183      	strh	r3, [r0, #12]
   b6e46:	2100      	movs	r1, #0
   b6e48:	2001      	movs	r0, #1
   b6e4a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b6e4e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6e50:	2200      	movs	r2, #0
   b6e52:	611c      	str	r4, [r3, #16]
   b6e54:	615a      	str	r2, [r3, #20]
   b6e56:	bd38      	pop	{r3, r4, r5, pc}
   b6e58:	2003e568 	.word	0x2003e568
   b6e5c:	000b7575 	.word	0x000b7575
   b6e60:	000b758c 	.word	0x000b758c
   b6e64:	abcd330e 	.word	0xabcd330e
   b6e68:	e66d1234 	.word	0xe66d1234
   b6e6c:	0005deec 	.word	0x0005deec

000b6e70 <strcmp>:
   b6e70:	f810 2b01 	ldrb.w	r2, [r0], #1
   b6e74:	f811 3b01 	ldrb.w	r3, [r1], #1
   b6e78:	2a01      	cmp	r2, #1
   b6e7a:	bf28      	it	cs
   b6e7c:	429a      	cmpcs	r2, r3
   b6e7e:	d0f7      	beq.n	b6e70 <strcmp>
   b6e80:	1ad0      	subs	r0, r2, r3
   b6e82:	4770      	bx	lr

000b6e84 <strcpy>:
   b6e84:	4603      	mov	r3, r0
   b6e86:	f811 2b01 	ldrb.w	r2, [r1], #1
   b6e8a:	f803 2b01 	strb.w	r2, [r3], #1
   b6e8e:	2a00      	cmp	r2, #0
   b6e90:	d1f9      	bne.n	b6e86 <strcpy+0x2>
   b6e92:	4770      	bx	lr

000b6e94 <strlen>:
   b6e94:	4603      	mov	r3, r0
   b6e96:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6e9a:	2a00      	cmp	r2, #0
   b6e9c:	d1fb      	bne.n	b6e96 <strlen+0x2>
   b6e9e:	1a18      	subs	r0, r3, r0
   b6ea0:	3801      	subs	r0, #1
   b6ea2:	4770      	bx	lr

000b6ea4 <strnlen>:
   b6ea4:	b510      	push	{r4, lr}
   b6ea6:	4602      	mov	r2, r0
   b6ea8:	4401      	add	r1, r0
   b6eaa:	428a      	cmp	r2, r1
   b6eac:	4613      	mov	r3, r2
   b6eae:	d003      	beq.n	b6eb8 <strnlen+0x14>
   b6eb0:	781c      	ldrb	r4, [r3, #0]
   b6eb2:	3201      	adds	r2, #1
   b6eb4:	2c00      	cmp	r4, #0
   b6eb6:	d1f8      	bne.n	b6eaa <strnlen+0x6>
   b6eb8:	1a18      	subs	r0, r3, r0
   b6eba:	bd10      	pop	{r4, pc}

000b6ebc <_strtoul_l.constprop.0>:
   b6ebc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6ec0:	4f36      	ldr	r7, [pc, #216]	; (b6f9c <_strtoul_l.constprop.0+0xe0>)
   b6ec2:	4686      	mov	lr, r0
   b6ec4:	460d      	mov	r5, r1
   b6ec6:	4628      	mov	r0, r5
   b6ec8:	f815 4b01 	ldrb.w	r4, [r5], #1
   b6ecc:	5de6      	ldrb	r6, [r4, r7]
   b6ece:	f016 0608 	ands.w	r6, r6, #8
   b6ed2:	d1f8      	bne.n	b6ec6 <_strtoul_l.constprop.0+0xa>
   b6ed4:	2c2d      	cmp	r4, #45	; 0x2d
   b6ed6:	d12f      	bne.n	b6f38 <_strtoul_l.constprop.0+0x7c>
   b6ed8:	782c      	ldrb	r4, [r5, #0]
   b6eda:	2601      	movs	r6, #1
   b6edc:	1c85      	adds	r5, r0, #2
   b6ede:	2b00      	cmp	r3, #0
   b6ee0:	d057      	beq.n	b6f92 <_strtoul_l.constprop.0+0xd6>
   b6ee2:	2b10      	cmp	r3, #16
   b6ee4:	d109      	bne.n	b6efa <_strtoul_l.constprop.0+0x3e>
   b6ee6:	2c30      	cmp	r4, #48	; 0x30
   b6ee8:	d107      	bne.n	b6efa <_strtoul_l.constprop.0+0x3e>
   b6eea:	7828      	ldrb	r0, [r5, #0]
   b6eec:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   b6ef0:	2858      	cmp	r0, #88	; 0x58
   b6ef2:	d149      	bne.n	b6f88 <_strtoul_l.constprop.0+0xcc>
   b6ef4:	786c      	ldrb	r4, [r5, #1]
   b6ef6:	2310      	movs	r3, #16
   b6ef8:	3502      	adds	r5, #2
   b6efa:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   b6efe:	2700      	movs	r7, #0
   b6f00:	fbb8 f8f3 	udiv	r8, r8, r3
   b6f04:	fb03 f908 	mul.w	r9, r3, r8
   b6f08:	ea6f 0909 	mvn.w	r9, r9
   b6f0c:	4638      	mov	r0, r7
   b6f0e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   b6f12:	f1bc 0f09 	cmp.w	ip, #9
   b6f16:	d814      	bhi.n	b6f42 <_strtoul_l.constprop.0+0x86>
   b6f18:	4664      	mov	r4, ip
   b6f1a:	42a3      	cmp	r3, r4
   b6f1c:	dd22      	ble.n	b6f64 <_strtoul_l.constprop.0+0xa8>
   b6f1e:	2f00      	cmp	r7, #0
   b6f20:	db1d      	blt.n	b6f5e <_strtoul_l.constprop.0+0xa2>
   b6f22:	4580      	cmp	r8, r0
   b6f24:	d31b      	bcc.n	b6f5e <_strtoul_l.constprop.0+0xa2>
   b6f26:	d101      	bne.n	b6f2c <_strtoul_l.constprop.0+0x70>
   b6f28:	45a1      	cmp	r9, r4
   b6f2a:	db18      	blt.n	b6f5e <_strtoul_l.constprop.0+0xa2>
   b6f2c:	fb00 4003 	mla	r0, r0, r3, r4
   b6f30:	2701      	movs	r7, #1
   b6f32:	f815 4b01 	ldrb.w	r4, [r5], #1
   b6f36:	e7ea      	b.n	b6f0e <_strtoul_l.constprop.0+0x52>
   b6f38:	2c2b      	cmp	r4, #43	; 0x2b
   b6f3a:	bf04      	itt	eq
   b6f3c:	782c      	ldrbeq	r4, [r5, #0]
   b6f3e:	1c85      	addeq	r5, r0, #2
   b6f40:	e7cd      	b.n	b6ede <_strtoul_l.constprop.0+0x22>
   b6f42:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   b6f46:	f1bc 0f19 	cmp.w	ip, #25
   b6f4a:	d801      	bhi.n	b6f50 <_strtoul_l.constprop.0+0x94>
   b6f4c:	3c37      	subs	r4, #55	; 0x37
   b6f4e:	e7e4      	b.n	b6f1a <_strtoul_l.constprop.0+0x5e>
   b6f50:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   b6f54:	f1bc 0f19 	cmp.w	ip, #25
   b6f58:	d804      	bhi.n	b6f64 <_strtoul_l.constprop.0+0xa8>
   b6f5a:	3c57      	subs	r4, #87	; 0x57
   b6f5c:	e7dd      	b.n	b6f1a <_strtoul_l.constprop.0+0x5e>
   b6f5e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   b6f62:	e7e6      	b.n	b6f32 <_strtoul_l.constprop.0+0x76>
   b6f64:	2f00      	cmp	r7, #0
   b6f66:	da07      	bge.n	b6f78 <_strtoul_l.constprop.0+0xbc>
   b6f68:	2322      	movs	r3, #34	; 0x22
   b6f6a:	f8ce 3000 	str.w	r3, [lr]
   b6f6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6f72:	b932      	cbnz	r2, b6f82 <_strtoul_l.constprop.0+0xc6>
   b6f74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b6f78:	b106      	cbz	r6, b6f7c <_strtoul_l.constprop.0+0xc0>
   b6f7a:	4240      	negs	r0, r0
   b6f7c:	2a00      	cmp	r2, #0
   b6f7e:	d0f9      	beq.n	b6f74 <_strtoul_l.constprop.0+0xb8>
   b6f80:	b107      	cbz	r7, b6f84 <_strtoul_l.constprop.0+0xc8>
   b6f82:	1e69      	subs	r1, r5, #1
   b6f84:	6011      	str	r1, [r2, #0]
   b6f86:	e7f5      	b.n	b6f74 <_strtoul_l.constprop.0+0xb8>
   b6f88:	2430      	movs	r4, #48	; 0x30
   b6f8a:	2b00      	cmp	r3, #0
   b6f8c:	d1b5      	bne.n	b6efa <_strtoul_l.constprop.0+0x3e>
   b6f8e:	2308      	movs	r3, #8
   b6f90:	e7b3      	b.n	b6efa <_strtoul_l.constprop.0+0x3e>
   b6f92:	2c30      	cmp	r4, #48	; 0x30
   b6f94:	d0a9      	beq.n	b6eea <_strtoul_l.constprop.0+0x2e>
   b6f96:	230a      	movs	r3, #10
   b6f98:	e7af      	b.n	b6efa <_strtoul_l.constprop.0+0x3e>
   b6f9a:	bf00      	nop
   b6f9c:	000b75e6 	.word	0x000b75e6

000b6fa0 <strtoul>:
   b6fa0:	4613      	mov	r3, r2
   b6fa2:	460a      	mov	r2, r1
   b6fa4:	4601      	mov	r1, r0
   b6fa6:	4802      	ldr	r0, [pc, #8]	; (b6fb0 <strtoul+0x10>)
   b6fa8:	6800      	ldr	r0, [r0, #0]
   b6faa:	f7ff bf87 	b.w	b6ebc <_strtoul_l.constprop.0>
   b6fae:	bf00      	nop
   b6fb0:	2003e568 	.word	0x2003e568

000b6fb4 <__register_exitproc>:
   b6fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6fb8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7074 <__register_exitproc+0xc0>
   b6fbc:	4606      	mov	r6, r0
   b6fbe:	f8d8 0000 	ldr.w	r0, [r8]
   b6fc2:	461f      	mov	r7, r3
   b6fc4:	460d      	mov	r5, r1
   b6fc6:	4691      	mov	r9, r2
   b6fc8:	f000 f856 	bl	b7078 <__retarget_lock_acquire_recursive>
   b6fcc:	4b25      	ldr	r3, [pc, #148]	; (b7064 <__register_exitproc+0xb0>)
   b6fce:	681c      	ldr	r4, [r3, #0]
   b6fd0:	b934      	cbnz	r4, b6fe0 <__register_exitproc+0x2c>
   b6fd2:	4c25      	ldr	r4, [pc, #148]	; (b7068 <__register_exitproc+0xb4>)
   b6fd4:	601c      	str	r4, [r3, #0]
   b6fd6:	4b25      	ldr	r3, [pc, #148]	; (b706c <__register_exitproc+0xb8>)
   b6fd8:	b113      	cbz	r3, b6fe0 <__register_exitproc+0x2c>
   b6fda:	681b      	ldr	r3, [r3, #0]
   b6fdc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6fe0:	6863      	ldr	r3, [r4, #4]
   b6fe2:	2b1f      	cmp	r3, #31
   b6fe4:	dd07      	ble.n	b6ff6 <__register_exitproc+0x42>
   b6fe6:	f8d8 0000 	ldr.w	r0, [r8]
   b6fea:	f000 f847 	bl	b707c <__retarget_lock_release_recursive>
   b6fee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6ff6:	b34e      	cbz	r6, b704c <__register_exitproc+0x98>
   b6ff8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6ffc:	b988      	cbnz	r0, b7022 <__register_exitproc+0x6e>
   b6ffe:	4b1c      	ldr	r3, [pc, #112]	; (b7070 <__register_exitproc+0xbc>)
   b7000:	b923      	cbnz	r3, b700c <__register_exitproc+0x58>
   b7002:	f8d8 0000 	ldr.w	r0, [r8]
   b7006:	f000 f838 	bl	b707a <__retarget_lock_release>
   b700a:	e7f0      	b.n	b6fee <__register_exitproc+0x3a>
   b700c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7010:	f7fd fe6e 	bl	b4cf0 <malloc>
   b7014:	2800      	cmp	r0, #0
   b7016:	d0f4      	beq.n	b7002 <__register_exitproc+0x4e>
   b7018:	2300      	movs	r3, #0
   b701a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b701e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b7022:	6863      	ldr	r3, [r4, #4]
   b7024:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7028:	2201      	movs	r2, #1
   b702a:	409a      	lsls	r2, r3
   b702c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7030:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7034:	4313      	orrs	r3, r2
   b7036:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b703a:	2e02      	cmp	r6, #2
   b703c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7040:	bf02      	ittt	eq
   b7042:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7046:	4313      	orreq	r3, r2
   b7048:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b704c:	6863      	ldr	r3, [r4, #4]
   b704e:	f8d8 0000 	ldr.w	r0, [r8]
   b7052:	1c5a      	adds	r2, r3, #1
   b7054:	3302      	adds	r3, #2
   b7056:	6062      	str	r2, [r4, #4]
   b7058:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b705c:	f000 f80e 	bl	b707c <__retarget_lock_release_recursive>
   b7060:	2000      	movs	r0, #0
   b7062:	e7c6      	b.n	b6ff2 <__register_exitproc+0x3e>
   b7064:	2003e7e8 	.word	0x2003e7e8
   b7068:	2003e75c 	.word	0x2003e75c
   b706c:	00000000 	.word	0x00000000
   b7070:	000b4cf1 	.word	0x000b4cf1
   b7074:	2003e5cc 	.word	0x2003e5cc

000b7078 <__retarget_lock_acquire_recursive>:
   b7078:	4770      	bx	lr

000b707a <__retarget_lock_release>:
   b707a:	4770      	bx	lr

000b707c <__retarget_lock_release_recursive>:
   b707c:	4770      	bx	lr

000b707e <link_code_end>:
	...

000b7080 <dynalib_user>:
   b7080:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b7090:	0000 0000 6f63 6d6d 6e61 0064 6461 3137     ....command.ad71
   b70a0:	6332 3166 632d 3137 2d38 6334 3931 622d     2cf1-c718-4c19-b
   b70b0:	6665 2d39 3166 3137 6330 6337 6465 6439     ef9-f1710c7ced9d
   b70c0:	6100 3764 3231 6663 2d30 3763 3831 342d     .ad712cf0-c718-4
   b70d0:	3163 2d39 6562 3966 662d 3731 3031 3763     c19-bef9-f1710c7
   b70e0:	6563 3964 0064 6148 734e 6d4f 7250 4d4f     ced9d.HaNsOmPrOM
   b70f0:	7a65 6164 3231 4c31 5453 3739 2500 3630     ezda121LST97.%06
   b7100:	646c 0100 4523 8967 cdab feef badc 7698     ld..#Eg........v
   b7110:	3254 f010 d2e1 00c3                         T2......

000b7118 <_ZTV9Sha1Class>:
	...
   b7120:	44eb 000b 44ed 000b 4687 000b 635d 000b     .D...D...F..]c..
   b7130:	7341 6573 7472 6f69 466e 6961 756c 6572     AssertionFailure
   b7140:	6620 6c61 6573 7700 7269 6e69 2e67 6c62      false.wiring.bl
   b7150:	0065 7453 7261 2074 6964 6373 766f 7265     e.Start discover
   b7160:	6e69 2067 6573 7672 6369 7365 002e 7341     ing services..As
   b7170:	6573 7472 6f69 466e 6961 756c 6572 6820     sertionFailure h
   b7180:	6c61 625f 656c 735f 6174 6b63 695f 696e     al_ble_stack_ini
   b7190:	2874 756e 6c6c 7470 2972 3d20 203d 5953     t(nullptr) == SY
   b71a0:	5453 4d45 455f 5252 524f 4e5f 4e4f 0045     STEM_ERROR_NONE.
   b71b0:	6550 7265 6420 7665 6369 2065 7369 6d20     Peer device is m
   b71c0:	7369 6973 676e 0021 6146 6c69 6465 7420     issing!.Failed t
   b71d0:	206f 7061 6570 646e 7020 6565 2072 6543     o append peer Ce
   b71e0:	746e 6172 206c 6564 6976 6563 002e 6f43     ntral device..Co
   b71f0:	6e6e 6365 6574 2064 7962 4320 6e65 7274     nnected by Centr
   b7200:	6c61 6420 7665 6369 2e65 4400 7369 6f63     al device..Disco
   b7210:	6e6e 6365 6574 2064 7962 7220 6d65 746f     nnected by remot
   b7220:	2065 6564 6976 6563 002e 7544 6c70 6369     e device..Duplic
   b7230:	7461 6465 6320 6168 6172 7463 7265 7369     ated characteris
   b7240:	6974 2063 6163 6e6e 746f 6220 2065 6461     tic cannot be ad
   b7250:	6564 2e64 4600 6961 656c 2064 6f74 6120     ded..Failed to a
   b7260:	7070 6e65 2064 6f6c 6163 206c 6863 7261     ppend local char
   b7270:	6361 6574 6972 7473 6369 002e               acteristic..

000b727c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b7284:	4d6d 000b 4dd1 000b 4eb7 000b 4dfb 000b     mM...M...N...M..
   b7294:	4d71 000b                                   qM..

000b7298 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b72a0:	4d69 000b 4ddf 000b 4d6b 000b 4e01 000b     iM...M..kM...N..
   b72b0:	4d91 000b                                   .M..

000b72b4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b72bc:	4d67 000b 4ded 000b 557d 000b 4e07 000b     gM...M..}U...N..
   b72cc:	4db1 000b                                   .M..

000b72d0 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b72dc:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000b72ee <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   b72ee:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000b72fe <_ZN8particle7BleUuid9BASE_UUIDE>:
   b72fe:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000b7310 <_ZTVN5spark13EthernetClassE>:
	...
   b7318:	605f 000b 6055 000b 604b 000b 6041 000b     _`..U`..K`..A`..
   b7328:	6035 000b 6029 000b 6239 000b 6241 000b     5`..)`..9b..Ab..
   b7338:	601d 000b 6015 000b 600b 000b 6001 000b     .`...`...`...`..
   b7348:	6271 000b                                   qb..

000b734c <_ZTV7TwoWire>:
	...
   b7354:	607d 000b 60c7 000b 609f 000b 607f 000b     }`...`...`...`..
   b7364:	60a7 000b 60af 000b 60b7 000b 60bf 000b     .`...`...`...`..

000b7374 <_ZTV9IPAddress>:
	...
   b737c:	6109 000b 60f9 000b 60fb 000b 7061 0070     .a...`...`..app.

000b738c <_ZTVN5spark12NetworkClassE>:
	...
   b7394:	61f9 000b 6203 000b 620d 000b 6217 000b     .a...b...b...b..
   b73a4:	6221 000b 622d 000b 6239 000b 6241 000b     !b..-b..9b..Ab..
   b73b4:	6249 000b 6255 000b 625d 000b 6267 000b     Ib..Ub..]b..gb..
   b73c4:	6271 000b 5925 252d 2d6d 6425 2554 3a48     qb..%Y-%m-%dT%H:
   b73d4:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b73e4 <_ZTV11USARTSerial>:
	...
   b73ec:	65e5 000b 6651 000b 6629 000b 635d 000b     .e..Qf..)f..]c..
   b73fc:	65f9 000b 6615 000b 6607 000b 6623 000b     .e...f...f..#f..
   b740c:	65e7 000b 65eb 000b                         .e...e..

000b7414 <_ZTV9USBSerial>:
	...
   b741c:	668f 000b 66f7 000b 66cd 000b 635d 000b     .f...f...f..]c..
   b742c:	66bf 000b 6691 000b 66a1 000b 66f1 000b     .f...f...f...f..
   b743c:	66b1 000b 6689 000b                         .f...f..

000b7444 <_ZTVN5spark9WiFiClassE>:
	...
   b744c:	67e7 000b 67dd 000b 67d3 000b 6789 000b     .g...g...g...g..
   b745c:	67c7 000b 67bb 000b 6239 000b 6241 000b     .g...g..9b..Ab..
   b746c:	67af 000b 67a7 000b 679d 000b 6793 000b     .g...g...g...g..
   b747c:	6271 000b                                   qb..

000b7480 <_ZSt7nothrow>:
	...

000b7481 <_ZTSSt19_Sp_make_shared_tag>:
   b7481:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b7491:	6572 5f64 6174 0067 0000                     red_tag....

000b749c <_ZTISt19_Sp_make_shared_tag>:
   b749c:	74dc 000b 7481 000b                         .t...t..

000b74a4 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b74a4:	753c 000b 74b0 000b 7560 000b               <u...t..`u..

000b74b0 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b74b0:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b74c0:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b74d0:	0045 0000                                   E...

000b74d4 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b74d4:	0000 0000 74a4 000b 6bb1 000b 6bc5 000b     .....t...k...k..
   b74e4:	6d59 000b 6d59 000b 6c2f 000b 6b71 000b     Ym..Ym../l..qk..
   b74f4:	6c17 000b 6bd9 000b 6ba3 000b               .l...k...k..

000b7500 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b7500:	753c 000b 750c 000b 74a4 000b               <u...u...t..

000b750c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b750c:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b751c:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b752c:	666e 456f 0000 0000                         nfoE....

000b7534 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b7534:	0000 0000 7500 000b 6c59 000b 6c6d 000b     .....u..Yl..ml..
   b7544:	6d59 000b 6d59 000b 6c2f 000b 6b71 000b     Ym..Ym../l..qk..
   b7554:	6d2d 000b 6cb9 000b 6c81 000b               -m...l...l..

000b7560 <_ZTISt9type_info>:
   b7560:	74dc 000b 7568 000b                         .t..hu..

000b7568 <_ZTSSt9type_info>:
   b7568:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b7578:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b7588:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   b7598:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   b75a8:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   b75b8:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   b75c8:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   b75d8:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000b75e5 <_ctype_>:
   b75e5:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b75f5:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b7605:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b7615:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b7625:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b7635:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b7645:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b7655:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b7665:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b76e6 <link_const_variable_data_end>:
	...

000b76e8 <link_constructors_location>:
   b76e8:	000b444d 	.word	0x000b444d
   b76ec:	000b47e5 	.word	0x000b47e5
   b76f0:	000b5fbd 	.word	0x000b5fbd
   b76f4:	000b6069 	.word	0x000b6069
   b76f8:	000b61e9 	.word	0x000b61e9
   b76fc:	000b6349 	.word	0x000b6349
   b7700:	000b6435 	.word	0x000b6435
   b7704:	000b6539 	.word	0x000b6539
   b7708:	000b65d1 	.word	0x000b65d1
   b770c:	000b67f1 	.word	0x000b67f1
